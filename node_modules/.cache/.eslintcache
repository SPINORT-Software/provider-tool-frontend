[{"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/index.js":"1","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/App.js":"2","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/serviceWorker.js":"3","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/_mockApis/index.js":"4","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/index.js":"5","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducer.js":"6","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/_mockApis/account.js":"7","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/index.js":"8","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/contexts/FirebaseContext.js":"9","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/NavigationScroll.js":"10","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/Locales.js":"11","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/contexts/JWTContext.js":"12","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/extended/Snackbar.js":"13","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/themes/index.js":"14","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/routes/index.js":"15","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/dashboardActions.js":"16","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/snackbarReducer.js":"17","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/cartReducer.js":"18","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/customizationReducer.js":"19","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/sectionFormReducer.js":"20","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/config.js":"21","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/themes/shadows.js":"22","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/routes/LoginRoutes.js":"23","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/reviewBoard/index.js":"24","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/utils/mockAdapter.js":"25","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/routes/role-based-routes/ReviewBoardRoutes.js":"26","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/routes/role-based-routes/CaseManagerRoutes.js":"27","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/utils/axios.js":"28","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/Loader.js":"29","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-client.js":"30","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actionTypes.js":"31","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/accountReducer.js":"32","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/themes/typography.js":"33","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/themes/palette.js":"34","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/themes/compStyleOverride.js":"35","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/reviewBoard/clientReferral.js":"36","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/Loadable.js":"37","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/NavMotion.js":"38","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/authentication/authentication2/Login2.js":"39","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/utils/route-guard/AuthGuard.js":"40","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/review-board/referral/index.js":"41","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/authentication/AuthWrapper2.js":"42","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/authentication/AuthCardWrapper.js":"43","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/authentication/login/FirebaseLogin.js":"44","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/authentication/login/JWTLogin.js":"45","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/index.js":"46","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/index.js":"47","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/Logo.js":"48","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/cards/AuthSlider.js":"49","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/cards/BackgroundPattern2.js":"50","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/cards/AuthFooter.js":"51","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/review-board/referral/forms/referral-forms.js":"52","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/review-board/referral/forms/client-detail.js":"53","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/review-board/referral/forms/case-presentation-form.js":"54","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/hooks/useAuth.js":"55","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/constant.js":"56","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/cards/MainCard.js":"57","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/extended/AnimateButton.js":"58","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/common/file-input.js":"59","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/cards/SubCard.js":"60","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/reviewBoard/referralActions.js":"61","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/forms/project-activities.js":"62","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/forms/details.js":"63","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/forms/project-clinical-activities.js":"64","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/forms/client-caseload.js":"65","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/review-board/referral/forms/decision.js":"66","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/review-board/referral/forms/referral-details.js":"67","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/extended/Breadcrumbs.js":"68","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Sidebar/index.js":"69","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Header/index.js":"70","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/hooks/useScriptRef.js":"71","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/common/provider-specific-forms.js":"72","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/common/assessment-forms.js":"73","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/review-board/referral/forms/organization-responsible.js":"74","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/review-board/referral/forms/referral-source.js":"75","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Header/NotificationSection/index.js":"76","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Header/ProfileSection/index.js":"77","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Header/MobileSection/index.js":"78","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Header/SearchSection/index.js":"79","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Header/LocalizationSection/index.js":"80","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/LogoSection/index.js":"81","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Sidebar/MenuList/index.js":"82","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Header/NotificationSection/NotificationList.js":"83","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Header/ProfileSection/UpgradePlanCard.js":"84","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/utils/route-guard/GuestGuard.js":"85","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/extended/Transitions.js":"86","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Sidebar/MenuList/NavGroup/index.js":"87","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MinimalLayout/index.js":"88","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Sidebar/MenuList/NavCollapse/index.js":"89","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Sidebar/MenuList/NavItem/index.js":"90","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/case-manager/index.js":"91","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/case-manager/prepare-menu-items.js":"92","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/common/common-menu-items.js":"93","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/review-board/index.js":"94","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/review-board/prepare-menu-items.js":"95","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-calls/review-board.js":"96","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-calls/axios-client.js":"97","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/review-board/referral/add-referral.js":"98","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-calls/common.js":"99","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/chat/index.js":"100","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/chat/AvatarStatus.js":"101","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/chat/UserDetails.js":"102","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/chat/ChatDrawer.js":"103","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/extended/Avatar.js":"104","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/chat/UserList.js":"105","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/chat/UserAvatar.js":"106","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/routes/common-routes/index.js":"107","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/common/utils.js":"108","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/caseManager/index.js":"109","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/caseManager/dailyWorkload.js":"110","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-calls/case-manager.js":"111","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/caseManager/dailyWorkloadActions.js":"112","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/ui/ProgressCircularControlled.js":"113","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/caseManager/clientAssessment.js":"114","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/caseManager/clientAssessmentActions.js":"115","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/common/provider-specific-forms/generic-form.js":"116","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/messagingReducer.js":"117","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/messagingActions.js":"118","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/share/index.js":"119","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/externalPartner/index.js":"120","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/clinician/index.js":"121","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/search/index.js":"122","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/client/index.js":"123","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/dashboard/index.js":"124","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/routes/common-routes/home.js":"125","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/routes/role-based-routes/ClientRoutes.js":"126","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/routes/role-based-routes/CommunityParamedicRoutes.js":"127","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/search/applicationUserSearch.js":"128","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/clinician/clientIntervention.js":"129","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/externalPartner/clientIntervention.js":"130","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/client/communicationLog.js":"131","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/share/externalFollowUp.js":"132","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/caseManager/clientIntervention.js":"133","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/dashboard/externalFollowUp.js":"134","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/dashboard/internalReferrals.js":"135","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/dashboard/internalFollowUp.js":"136","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/dashboard/externalReferrals.js":"137","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/dashboard/index.js":"138","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/communication-log/index.js":"139","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/daily-workload/edit/index.js":"140","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-calls/client.js":"141","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/client/communicationLogActions.js":"142","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/dashboard/casemanager/index.js":"143","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/dashboard/client/index.js":"144","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/client/visitorLogActions.js":"145","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/common/common-menu-items-top.js":"146","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/dashboard/common/ExternalReferrals.js":"147","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/dashboard/common/NewClients.js":"148","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/dashboard/common/InternalReferrals.js":"149","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/dashboard/common/ClientReferrals.js":"150","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/dashboard/common/InternalFollowUp.js":"151","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/dashboard/common/ExternalFollowUp.js":"152","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/dashboard/common/Notifications.js":"153","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/cards/IconNumberCard.js":"154","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-calls/share.js":"155","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/utils/helpers/datetime.js":"156","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/dashboard/dashboardActions.js":"157","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/utils/helpers/dashboard-messages.js":"158","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/community-paramedic/index.js":"159","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/client/index.js":"160","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/clinician/index.js":"161","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/external-partner/index.js":"162","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/chat/ChatHistory.js":"163","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/daily-workload/add/forms/details.js":"164","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/daily-workload/add/forms/client-caseload.js":"165","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/community-paramedic/prepare-menu-items.js":"166","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/clinician/prepare-menu-items.js":"167","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/client/prepare-menu-items.js":"168","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/external-partner/prepare-menu-items.js":"169","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/chat/UsersSearchList.js":"170","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/dashboard/generalNotifications.js":"171","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/dashboard/reviewBoardReferrals.js":"172","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-calls/messaging.js":"173","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/client/personalInformation.js":"174","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/client/clinicalInformation.js":"175","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/clinician/dailyWorkload.js":"176","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/share/internalFollowUp.js":"177","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/clinician/clientAssessment.js":"178","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/share/externalReferral.js":"179","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/client/visitorLog.js":"180","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/share/internalReferral.js":"181","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/routes/role-based-routes/ClinicianRoutes.js":"182","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/routes/role-based-routes/ExternalPartnerRoutes.js":"183","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/daily-workload/add/index.js":"184","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/daily-workload/detail/index.js":"185","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/daily-workload/list/index.js":"186","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/visitors-log/index.js":"187","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/clinical-information/index.js":"188","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/personal-information/index.js":"189","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/detail/index.js":"190","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/add/index.js":"191","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/list/index.js":"192","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/detail/assessment-data.js":"193","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/personal-information/home-safety.js":"194","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/personal-information/personal-info.js":"195","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/clinical-information/emergency-room-visits.js":"196","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/clinical-information/clinical-information.js":"197","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/clinical-information/hospitalizations.js":"198","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/clinical-information/ambulance-use.js":"199","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/clinical-information/medication.js":"200","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/add/forms/client.js":"201","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/add/forms/conditional-display/existing-case-client.js":"202","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/add/forms/conditional-display/home-safety.js":"203","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/add/forms/conditional-display/new-case-client-assessment.js":"204","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/add/forms/conditional-display/existing-case-client-assessment.js":"205","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/add/forms/conditional-display/existing-extra-mural.js":"206","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/add/forms/conditional-display/new-case-client.js":"207","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/daily-workload/forms/details.js":"208","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/daily-workload/edit/index.js":"209","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-assessment/list/index.js":"210","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/edit/index.js":"211","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-assessment/detail/index.js":"212","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/list/index.js":"213","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/detail/index.js":"214","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-interventions/add/index.js":"215","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-interventions/list/index.js":"216","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/external-partner/client-interventions/list/index.js":"217","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/client/personalInformationActions.js":"218","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-assessment/add/index.js":"219","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/client/clinicalInformationActions.js":"220","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/external-partner/client-interventions/add/index.js":"221","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/add/index.js":"222","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/detail/assessment-forms.js":"223","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/daily-workload/detail/index.js":"224","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/daily-workload/list/index.js":"225","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/clinical-information/add-medication.js":"226","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-interventions/list/index.js":"227","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-interventions/add/index.js":"228","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-assessment/add/index.js":"229","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-assessment/detail/index.js":"230","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-assessment/list/index.js":"231","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/caseManager/clientInterventionActions.js":"232","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-assessment/detail/assessment-data.js":"233","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/extended/Accordion.js":"234","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/cards/CardSecondaryAction.js":"235","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-interventions/add/forms/client.js":"236","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-interventions/add/forms/assessment-forms.js":"237","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-interventions/add/forms/intervention-details.js":"238","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/add/forms/details.js":"239","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/add/forms/client-caseload.js":"240","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/add/forms/project-clinical-activities.js":"241","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/add/forms/project-activities.js":"242","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/common/assessment-forms-cp.js":"243","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/external-partner/client-interventions/add/forms/partner-external-communication.js":"244","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/external-partner/client-interventions/add/forms/assessment-forms.js":"245","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/daily-workload/forms/details.js":"246","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/external-partner/client-interventions/add/forms/partner-internal-communication.js":"247","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/external-partner/client-interventions/add/forms/client.js":"248","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-assessment/add/forms/conditional-display/new-extra-mural.js":"249","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-assessment/add/forms/conditional-display/client-reassessment.js":"250","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-assessment/add/forms/conditional-display/existing-extra-mural.js":"251","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/extended/Form/InputLabel.js":"252","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-assessment/add/forms/client.js":"253","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-assessment/detail/assessment-data.js":"254","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-calls/external-partner.js":"255","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-assessment/add/forms/client.js":"256","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-assessment/add/forms/conditional-display/client-reassessment.js":"257","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-assessment/add/forms/conditional-display/new-extra-mural.js":"258","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-assessment/add/forms/conditional-display/existing-extra-mural.js":"259","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-interventions/add/forms/assessment-forms.js":"260","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-interventions/add/forms/client.js":"261","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-interventions/add/forms/intervention-details.js":"262","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/externalPartner/clientInterventionActions.js":"263","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-assessment/detail/assessment-forms.js":"264","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/daily-workload/add/forms/details.js":"265","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/daily-workload/add/forms/client-caseload.js":"266","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/common/communication/share/index.js":"267","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-calls/clinician.js":"268","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-interventions/add/forms/type-therapeutic-intervention.js":"269","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/clinician/dailyWorkloadActions.js":"270","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/clinician/clientAssessmentActions.js":"271","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/external-partner/client-interventions/add/forms/type-therapeutic-intervention.js":"272","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/clinician/clientInterventionActions.js":"273","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-assessment/detail/assessment-forms.js":"274","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-interventions/add/forms/type-therapeutic-intervention.js":"275","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/common/communication/share/share-dialog-follow-up.js":"276","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/common/communication/share/share-dialog-referral.js":"277","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/daily-workload/add/index.js":"278","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-calls/search.js":"279","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/share/followup.js":"280","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/share/referrals.js":"281","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/search/applicationUser.js":"282","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/daily-workload/add/forms/project-activities.js":"283","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/daily-workload/add/forms/project-clinical-activities.js":"284","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/Customization/index.js":"285"},{"size":1075,"mtime":1636406728997,"results":"286","hashOfConfig":"287"},{"size":2113,"mtime":1643857756730,"results":"288","hashOfConfig":"287"},{"size":5911,"mtime":1636406728999,"results":"289","hashOfConfig":"287"},{"size":33,"mtime":1637375675096,"results":"290","hashOfConfig":"287"},{"size":496,"mtime":1636406728999,"results":"291","hashOfConfig":"287"},{"size":1727,"mtime":1645906429221,"results":"292","hashOfConfig":"287"},{"size":2495,"mtime":1637375672127,"results":"293","hashOfConfig":"294"},{"size":36,"mtime":1636406728999,"results":"295","hashOfConfig":"287"},{"size":3027,"mtime":1636406728997,"results":"296","hashOfConfig":"287"},{"size":671,"mtime":1636406728999,"results":"297","hashOfConfig":"287"},{"size":1342,"mtime":1636406729000,"results":"298","hashOfConfig":"287"},{"size":6620,"mtime":1662774072192,"results":"299","hashOfConfig":"287"},{"size":4464,"mtime":1636406729003,"results":"300","hashOfConfig":"287"},{"size":3875,"mtime":1638126007615,"results":"301","hashOfConfig":"287"},{"size":2696,"mtime":1644524771521,"results":"302","hashOfConfig":"287"},{"size":1297,"mtime":1636408487038,"results":"303","hashOfConfig":"287"},{"size":1523,"mtime":1636406729000,"results":"304","hashOfConfig":"287"},{"size":7443,"mtime":1636406729000,"results":"305","hashOfConfig":"287"},{"size":2146,"mtime":1636406729000,"results":"306","hashOfConfig":"287"},{"size":1202,"mtime":1636407119659,"results":"307","hashOfConfig":"287"},{"size":973,"mtime":1638787947065,"results":"308","hashOfConfig":"287"},{"size":1219,"mtime":1636406729000,"results":"309","hashOfConfig":"287"},{"size":844,"mtime":1636406728999,"results":"310","hashOfConfig":"287"},{"size":304,"mtime":1638738852752,"results":"311","hashOfConfig":"287"},{"size":246,"mtime":1637375589359,"results":"312","hashOfConfig":"294"},{"size":905,"mtime":1638823174939,"results":"313","hashOfConfig":"287"},{"size":2694,"mtime":1643330425195,"results":"314","hashOfConfig":"287"},{"size":407,"mtime":1637785140258,"results":"315","hashOfConfig":"287"},{"size":732,"mtime":1638126007615,"results":"316","hashOfConfig":"287"},{"size":715,"mtime":1637310549625,"results":"317","hashOfConfig":"287"},{"size":15393,"mtime":1646179315605,"results":"318","hashOfConfig":"287"},{"size":1092,"mtime":1646172381192,"results":"319","hashOfConfig":"287"},{"size":3577,"mtime":1636406729000,"results":"320","hashOfConfig":"287"},{"size":3087,"mtime":1636406729000,"results":"321","hashOfConfig":"287"},{"size":10816,"mtime":1636406729000,"results":"322","hashOfConfig":"287"},{"size":4586,"mtime":1638664826556,"results":"323","hashOfConfig":"287"},{"size":379,"mtime":1636406729000,"results":"324","hashOfConfig":"287"},{"size":930,"mtime":1636406728998,"results":"325","hashOfConfig":"287"},{"size":7122,"mtime":1636407119659,"results":"326","hashOfConfig":"287"},{"size":750,"mtime":1636406729004,"results":"327","hashOfConfig":"287"},{"size":19707,"mtime":1637718399328,"results":"328","hashOfConfig":"287"},{"size":549,"mtime":1636406729004,"results":"329","hashOfConfig":"287"},{"size":1218,"mtime":1636406729004,"results":"330","hashOfConfig":"287"},{"size":11689,"mtime":1636406729005,"results":"331","hashOfConfig":"287"},{"size":8590,"mtime":1637184410080,"results":"332","hashOfConfig":"287"},{"size":10777,"mtime":1638044901832,"results":"333","hashOfConfig":"294"},{"size":4321,"mtime":1662775271736,"results":"334","hashOfConfig":"287"},{"size":466,"mtime":1636406729000,"results":"335","hashOfConfig":"287"},{"size":1095,"mtime":1636406729000,"results":"336","hashOfConfig":"287"},{"size":2064,"mtime":1636406729001,"results":"337","hashOfConfig":"287"},{"size":690,"mtime":1636406729000,"results":"338","hashOfConfig":"287"},{"size":1785,"mtime":1637710087784,"results":"339","hashOfConfig":"287"},{"size":4860,"mtime":1638740711363,"results":"340","hashOfConfig":"287"},{"size":923,"mtime":1637711400628,"results":"341","hashOfConfig":"287"},{"size":371,"mtime":1636407119657,"results":"342","hashOfConfig":"287"},{"size":5000,"mtime":1646185127179,"results":"343","hashOfConfig":"287"},{"size":2785,"mtime":1636406729001,"results":"344","hashOfConfig":"287"},{"size":2747,"mtime":1636406729003,"results":"345","hashOfConfig":"287"},{"size":4742,"mtime":1638731868948,"results":"346","hashOfConfig":"287"},{"size":2321,"mtime":1636406729002,"results":"347","hashOfConfig":"287"},{"size":1327,"mtime":1637716479582,"results":"348","hashOfConfig":"287"},{"size":4547,"mtime":1637927955591,"results":"349","hashOfConfig":"294"},{"size":4682,"mtime":1638967042483,"results":"350","hashOfConfig":"287"},{"size":4626,"mtime":1637928229414,"results":"351","hashOfConfig":"294"},{"size":5815,"mtime":1637927233026,"results":"352","hashOfConfig":"294"},{"size":6382,"mtime":1638741374976,"results":"353","hashOfConfig":"287"},{"size":16522,"mtime":1641333405950,"results":"354","hashOfConfig":"287"},{"size":7449,"mtime":1636406729003,"results":"355","hashOfConfig":"287"},{"size":3061,"mtime":1636406728998,"results":"356","hashOfConfig":"287"},{"size":3073,"mtime":1638804158403,"results":"357","hashOfConfig":"287"},{"size":378,"mtime":1636406728997,"results":"358","hashOfConfig":"287"},{"size":2927,"mtime":1638045665412,"results":"359","hashOfConfig":"287"},{"size":2306,"mtime":1638045089894,"results":"360","hashOfConfig":"287"},{"size":2746,"mtime":1637641477165,"results":"361","hashOfConfig":"287"},{"size":3571,"mtime":1636407119663,"results":"362","hashOfConfig":"294"},{"size":10315,"mtime":1636406728998,"results":"363","hashOfConfig":"287"},{"size":13454,"mtime":1641384821856,"results":"364","hashOfConfig":"287"},{"size":4270,"mtime":1636406728997,"results":"365","hashOfConfig":"287"},{"size":10116,"mtime":1636406728998,"results":"366","hashOfConfig":"287"},{"size":8881,"mtime":1636406728997,"results":"367","hashOfConfig":"287"},{"size":483,"mtime":1636406728998,"results":"368","hashOfConfig":"287"},{"size":2472,"mtime":1644524294001,"results":"369","hashOfConfig":"287"},{"size":6867,"mtime":1638804108852,"results":"370","hashOfConfig":"287"},{"size":3253,"mtime":1636406728998,"results":"371","hashOfConfig":"287"},{"size":809,"mtime":1636406729004,"results":"372","hashOfConfig":"287"},{"size":3129,"mtime":1636406729003,"results":"373","hashOfConfig":"287"},{"size":2263,"mtime":1636406728998,"results":"374","hashOfConfig":"287"},{"size":232,"mtime":1636406728998,"results":"375","hashOfConfig":"287"},{"size":5425,"mtime":1638787777020,"results":"376","hashOfConfig":"287"},{"size":4912,"mtime":1636406728998,"results":"377","hashOfConfig":"287"},{"size":320,"mtime":1638787777022,"results":"378","hashOfConfig":"287"},{"size":205,"mtime":1638407592637,"results":"379","hashOfConfig":"287"},{"size":177,"mtime":1637806571754,"results":"380","hashOfConfig":"287"},{"size":226,"mtime":1637806588158,"results":"381","hashOfConfig":"287"},{"size":253,"mtime":1637805504195,"results":"382","hashOfConfig":"287"},{"size":3975,"mtime":1637718109437,"results":"383","hashOfConfig":"287"},{"size":557,"mtime":1646139605866,"results":"384","hashOfConfig":"287"},{"size":9206,"mtime":1638740935246,"results":"385","hashOfConfig":"287"},{"size":1576,"mtime":1638739905810,"results":"386","hashOfConfig":"287"},{"size":16739,"mtime":1641266268763,"results":"387","hashOfConfig":"287"},{"size":1802,"mtime":1636406729005,"results":"388","hashOfConfig":"287"},{"size":10623,"mtime":1636406729006,"results":"389","hashOfConfig":"287"},{"size":7770,"mtime":1641317673637,"results":"390","hashOfConfig":"287"},{"size":4118,"mtime":1636406729003,"results":"391","hashOfConfig":"287"},{"size":3803,"mtime":1638330269313,"results":"392","hashOfConfig":"287"},{"size":811,"mtime":1638155991668,"results":"393","hashOfConfig":"287"},{"size":819,"mtime":1638788446474,"results":"394","hashOfConfig":"287"},{"size":738,"mtime":1662774468865,"results":"395","hashOfConfig":"287"},{"size":521,"mtime":1639880438851,"results":"396","hashOfConfig":"287"},{"size":3496,"mtime":1639761169751,"results":"397","hashOfConfig":"287"},{"size":3159,"mtime":1643492052992,"results":"398","hashOfConfig":"287"},{"size":1012,"mtime":1639759978462,"results":"399","hashOfConfig":"287"},{"size":266,"mtime":1637959728825,"results":"400","hashOfConfig":"287"},{"size":9987,"mtime":1639100317858,"results":"401","hashOfConfig":"287"},{"size":4090,"mtime":1639101515336,"results":"402","hashOfConfig":"287"},{"size":128,"mtime":1638041264930,"results":"403","hashOfConfig":"287"},{"size":3372,"mtime":1641252973664,"results":"404","hashOfConfig":"287"},{"size":1301,"mtime":1638320274285,"results":"405","hashOfConfig":"287"},{"size":618,"mtime":1645912030616,"results":"406","hashOfConfig":"287"},{"size":331,"mtime":1644525595830,"results":"407","hashOfConfig":"287"},{"size":517,"mtime":1644091747074,"results":"408","hashOfConfig":"287"},{"size":320,"mtime":1645829723163,"results":"409","hashOfConfig":"287"},{"size":624,"mtime":1642902781968,"results":"410","hashOfConfig":"287"},{"size":789,"mtime":1645462464140,"results":"411","hashOfConfig":"287"},{"size":571,"mtime":1638788534249,"results":"412","hashOfConfig":"287"},{"size":1241,"mtime":1638682074195,"results":"413","hashOfConfig":"287"},{"size":2337,"mtime":1641322083146,"results":"414","hashOfConfig":"287"},{"size":978,"mtime":1645865888191,"results":"415","hashOfConfig":"287"},{"size":3089,"mtime":1644093203112,"results":"416","hashOfConfig":"287"},{"size":1080,"mtime":1644783485078,"results":"417","hashOfConfig":"287"},{"size":823,"mtime":1638679677940,"results":"418","hashOfConfig":"287"},{"size":766,"mtime":1645911320923,"results":"419","hashOfConfig":"287"},{"size":3120,"mtime":1643492202545,"results":"420","hashOfConfig":"287"},{"size":546,"mtime":1645587791501,"results":"421","hashOfConfig":"287"},{"size":548,"mtime":1645587757267,"results":"422","hashOfConfig":"287"},{"size":545,"mtime":1645587796818,"results":"423","hashOfConfig":"287"},{"size":548,"mtime":1645587768358,"results":"424","hashOfConfig":"287"},{"size":1200,"mtime":1641349510022,"results":"425","hashOfConfig":"287"},{"size":10646,"mtime":1638785301856,"results":"426","hashOfConfig":"287"},{"size":14208,"mtime":1641322367578,"results":"427","hashOfConfig":"287"},{"size":1934,"mtime":1643075501239,"results":"428","hashOfConfig":"287"},{"size":240,"mtime":1638681245406,"results":"429","hashOfConfig":"287"},{"size":3804,"mtime":1645583407711,"results":"430","hashOfConfig":"287"},{"size":2472,"mtime":1641412501438,"results":"431","hashOfConfig":"287"},{"size":222,"mtime":1638677144105,"results":"432","hashOfConfig":"287"},{"size":185,"mtime":1638787524373,"results":"433","hashOfConfig":"287"},{"size":3306,"mtime":1645587681411,"results":"434","hashOfConfig":"287"},{"size":17142,"mtime":1638789177299,"results":"435","hashOfConfig":"287"},{"size":3306,"mtime":1646179661034,"results":"436","hashOfConfig":"287"},{"size":3601,"mtime":1646091579049,"results":"437","hashOfConfig":"287"},{"size":3321,"mtime":1646016314325,"results":"438","hashOfConfig":"287"},{"size":3322,"mtime":1646016326303,"results":"439","hashOfConfig":"287"},{"size":4725,"mtime":1662772666217,"results":"440","hashOfConfig":"287"},{"size":1527,"mtime":1636406729001,"results":"441","hashOfConfig":"287"},{"size":1792,"mtime":1646261993334,"results":"442","hashOfConfig":"287"},{"size":577,"mtime":1645585376170,"results":"443","hashOfConfig":"287"},{"size":897,"mtime":1646187103145,"results":"444","hashOfConfig":"287"},{"size":626,"mtime":1646263633238,"results":"445","hashOfConfig":"287"},{"size":320,"mtime":1638787777022,"results":"446","hashOfConfig":"287"},{"size":230,"mtime":1637874349344,"results":"447","hashOfConfig":"287"},{"size":320,"mtime":1638787777022,"results":"448","hashOfConfig":"287"},{"size":320,"mtime":1638787777022,"results":"449","hashOfConfig":"287"},{"size":6218,"mtime":1638407257870,"results":"450","hashOfConfig":"287"},{"size":2530,"mtime":1641322409981,"results":"451","hashOfConfig":"287"},{"size":6359,"mtime":1641328876971,"results":"452","hashOfConfig":"287"},{"size":212,"mtime":1641321577081,"results":"453","hashOfConfig":"287"},{"size":200,"mtime":1643850181817,"results":"454","hashOfConfig":"287"},{"size":196,"mtime":1638407969194,"results":"455","hashOfConfig":"287"},{"size":209,"mtime":1644524261961,"results":"456","hashOfConfig":"287"},{"size":4054,"mtime":1638313312528,"results":"457","hashOfConfig":"287"},{"size":794,"mtime":1646192898209,"results":"458","hashOfConfig":"287"},{"size":313,"mtime":1645461307502,"results":"459","hashOfConfig":"287"},{"size":717,"mtime":1638321864027,"results":"460","hashOfConfig":"287"},{"size":1785,"mtime":1642467625174,"results":"461","hashOfConfig":"287"},{"size":1574,"mtime":1643077094983,"results":"462","hashOfConfig":"287"},{"size":2886,"mtime":1643859702657,"results":"463","hashOfConfig":"287"},{"size":793,"mtime":1645911304381,"results":"464","hashOfConfig":"287"},{"size":9844,"mtime":1643953804810,"results":"465","hashOfConfig":"287"},{"size":707,"mtime":1645908123250,"results":"466","hashOfConfig":"287"},{"size":858,"mtime":1638679498293,"results":"467","hashOfConfig":"287"},{"size":707,"mtime":1645906383925,"results":"468","hashOfConfig":"287"},{"size":2663,"mtime":1644083871061,"results":"469","hashOfConfig":"287"},{"size":1200,"mtime":1644528475763,"results":"470","hashOfConfig":"287"},{"size":12911,"mtime":1641322446553,"results":"471","hashOfConfig":"287"},{"size":7911,"mtime":1639875833966,"results":"472","hashOfConfig":"287"},{"size":19104,"mtime":1641322131358,"results":"473","hashOfConfig":"287"},{"size":11240,"mtime":1638785252531,"results":"474","hashOfConfig":"287"},{"size":9095,"mtime":1643076873773,"results":"475","hashOfConfig":"287"},{"size":7730,"mtime":1643070128056,"results":"476","hashOfConfig":"287"},{"size":4721,"mtime":1639875896463,"results":"477","hashOfConfig":"287"},{"size":17633,"mtime":1641329070402,"results":"478","hashOfConfig":"287"},{"size":19682,"mtime":1641322646724,"results":"479","hashOfConfig":"287"},{"size":8437,"mtime":1639861945691,"results":"480","hashOfConfig":"287"},{"size":22147,"mtime":1642563293648,"results":"481","hashOfConfig":"287"},{"size":18332,"mtime":1642476852765,"results":"482","hashOfConfig":"287"},{"size":6901,"mtime":1643077007648,"results":"483","hashOfConfig":"287"},{"size":14408,"mtime":1643107253042,"results":"484","hashOfConfig":"287"},{"size":7131,"mtime":1643077009863,"results":"485","hashOfConfig":"287"},{"size":6764,"mtime":1643077015485,"results":"486","hashOfConfig":"287"},{"size":17056,"mtime":1643112310050,"results":"487","hashOfConfig":"287"},{"size":9293,"mtime":1641323241436,"results":"488","hashOfConfig":"287"},{"size":3621,"mtime":1641331829105,"results":"489","hashOfConfig":"287"},{"size":18140,"mtime":1641324950559,"results":"490","hashOfConfig":"287"},{"size":15407,"mtime":1641332363693,"results":"491","hashOfConfig":"287"},{"size":32994,"mtime":1641332000865,"results":"492","hashOfConfig":"287"},{"size":2552,"mtime":1639104297647,"results":"493","hashOfConfig":"287"},{"size":4337,"mtime":1641332147801,"results":"494","hashOfConfig":"287"},{"size":4682,"mtime":1638967042482,"results":"495","hashOfConfig":"287"},{"size":13696,"mtime":1643938872483,"results":"496","hashOfConfig":"287"},{"size":19679,"mtime":1639055599672,"results":"497","hashOfConfig":"287"},{"size":14718,"mtime":1643863545410,"results":"498","hashOfConfig":"287"},{"size":4888,"mtime":1646016122876,"results":"499","hashOfConfig":"287"},{"size":19101,"mtime":1638967755563,"results":"500","hashOfConfig":"287"},{"size":7911,"mtime":1639875833967,"results":"501","hashOfConfig":"287"},{"size":12212,"mtime":1643480625328,"results":"502","hashOfConfig":"287"},{"size":18790,"mtime":1644099983212,"results":"503","hashOfConfig":"287"},{"size":18495,"mtime":1644527882848,"results":"504","hashOfConfig":"287"},{"size":564,"mtime":1642467441982,"results":"505","hashOfConfig":"287"},{"size":17832,"mtime":1639103049954,"results":"506","hashOfConfig":"287"},{"size":398,"mtime":1643067569148,"results":"507","hashOfConfig":"287"},{"size":12227,"mtime":1644783538159,"results":"508","hashOfConfig":"287"},{"size":13680,"mtime":1643858835711,"results":"509","hashOfConfig":"287"},{"size":3926,"mtime":1639861883578,"results":"510","hashOfConfig":"287"},{"size":6690,"mtime":1643938354321,"results":"511","hashOfConfig":"287"},{"size":19003,"mtime":1643864182471,"results":"512","hashOfConfig":"287"},{"size":7219,"mtime":1643111984653,"results":"513","hashOfConfig":"287"},{"size":18532,"mtime":1644099960182,"results":"514","hashOfConfig":"287"},{"size":12039,"mtime":1644093103053,"results":"515","hashOfConfig":"287"},{"size":17599,"mtime":1643953611081,"results":"516","hashOfConfig":"287"},{"size":4856,"mtime":1645906171781,"results":"517","hashOfConfig":"287"},{"size":19594,"mtime":1644000337756,"results":"518","hashOfConfig":"287"},{"size":1151,"mtime":1643492142109,"results":"519","hashOfConfig":"287"},{"size":8263,"mtime":1641387692757,"results":"520","hashOfConfig":"287"},{"size":3147,"mtime":1636406729003,"results":"521","hashOfConfig":"287"},{"size":2735,"mtime":1636406729001,"results":"522","hashOfConfig":"287"},{"size":7147,"mtime":1643338698833,"results":"523","hashOfConfig":"287"},{"size":1129,"mtime":1643331349398,"results":"524","hashOfConfig":"287"},{"size":11141,"mtime":1643480576905,"results":"525","hashOfConfig":"287"},{"size":4673,"mtime":1639764268859,"results":"526","hashOfConfig":"287"},{"size":6359,"mtime":1638967067056,"results":"527","hashOfConfig":"287"},{"size":5048,"mtime":1638967079725,"results":"528","hashOfConfig":"287"},{"size":4968,"mtime":1638967073002,"results":"529","hashOfConfig":"287"},{"size":1640,"mtime":1641323759282,"results":"530","hashOfConfig":"287"},{"size":2802,"mtime":1644531558234,"results":"531","hashOfConfig":"287"},{"size":1129,"mtime":1643331349398,"results":"532","hashOfConfig":"287"},{"size":4682,"mtime":1638967042482,"results":"533","hashOfConfig":"287"},{"size":9054,"mtime":1644531569184,"results":"534","hashOfConfig":"287"},{"size":7904,"mtime":1644531422621,"results":"535","hashOfConfig":"287"},{"size":4808,"mtime":1639104328316,"results":"536","hashOfConfig":"287"},{"size":5340,"mtime":1644614045573,"results":"537","hashOfConfig":"287"},{"size":2552,"mtime":1639104297647,"results":"538","hashOfConfig":"287"},{"size":814,"mtime":1636406729003,"results":"539","hashOfConfig":"287"},{"size":10831,"mtime":1639104202080,"results":"540","hashOfConfig":"287"},{"size":8263,"mtime":1641387692756,"results":"541","hashOfConfig":"287"},{"size":653,"mtime":1644525441249,"results":"542","hashOfConfig":"287"},{"size":10702,"mtime":1643953743077,"results":"543","hashOfConfig":"287"},{"size":5337,"mtime":1644000292554,"results":"544","hashOfConfig":"287"},{"size":4804,"mtime":1644083603616,"results":"545","hashOfConfig":"287"},{"size":2381,"mtime":1643953515413,"results":"546","hashOfConfig":"287"},{"size":1129,"mtime":1643331349398,"results":"547","hashOfConfig":"287"},{"size":6983,"mtime":1644083929152,"results":"548","hashOfConfig":"287"},{"size":11082,"mtime":1644093029155,"results":"549","hashOfConfig":"287"},{"size":1098,"mtime":1644526339698,"results":"550","hashOfConfig":"287"},{"size":3926,"mtime":1639861883579,"results":"551","hashOfConfig":"287"},{"size":4637,"mtime":1643939110831,"results":"552","hashOfConfig":"287"},{"size":6355,"mtime":1643939129960,"results":"553","hashOfConfig":"287"},{"size":2303,"mtime":1645908278231,"results":"554","hashOfConfig":"287"},{"size":3155,"mtime":1644099583050,"results":"555","hashOfConfig":"287"},{"size":1632,"mtime":1639931247712,"results":"556","hashOfConfig":"287"},{"size":994,"mtime":1643859798138,"results":"557","hashOfConfig":"287"},{"size":4035,"mtime":1644000316515,"results":"558","hashOfConfig":"287"},{"size":1632,"mtime":1639931247711,"results":"559","hashOfConfig":"287"},{"size":1032,"mtime":1644099690475,"results":"560","hashOfConfig":"287"},{"size":3926,"mtime":1639861883578,"results":"561","hashOfConfig":"287"},{"size":1632,"mtime":1639931247711,"results":"562","hashOfConfig":"287"},{"size":19606,"mtime":1645923657565,"results":"563","hashOfConfig":"287"},{"size":17368,"mtime":1645923502094,"results":"564","hashOfConfig":"287"},{"size":12870,"mtime":1643863141886,"results":"565","hashOfConfig":"287"},{"size":412,"mtime":1645829106347,"results":"566","hashOfConfig":"287"},{"size":304,"mtime":1645909820024,"results":"567","hashOfConfig":"287"},{"size":473,"mtime":1645908147962,"results":"568","hashOfConfig":"287"},{"size":475,"mtime":1645862758750,"results":"569","hashOfConfig":"287"},{"size":4968,"mtime":1643938964668,"results":"570","hashOfConfig":"287"},{"size":5048,"mtime":1643938964663,"results":"571","hashOfConfig":"287"},{"size":18430,"mtime":1662775231220,"results":"572","hashOfConfig":"287"},{"filePath":"573","messages":"574","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},"1ezynww",{"filePath":"576","messages":"577","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"578","usedDeprecatedRules":"575"},{"filePath":"579","messages":"580","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"581","messages":"582","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"583","messages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"585","messages":"586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"587","messages":"588","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1meghoq",{"filePath":"589","messages":"590","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"591","messages":"592","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"593","messages":"594","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"595","messages":"596","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"597","messages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"599","messages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"601","messages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"603","messages":"604","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"605","usedDeprecatedRules":"575"},{"filePath":"606","messages":"607","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"608","usedDeprecatedRules":"575"},{"filePath":"609","messages":"610","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"611","messages":"612","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"613","messages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"617","messages":"618","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"619","messages":"620","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"621","messages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"623","messages":"624","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"625","messages":"626","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"627","messages":"628","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"629","messages":"630","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"631","messages":"632","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"633","messages":"634","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"635","messages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"637","messages":"638","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"639","messages":"640","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"641","messages":"642","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"643","messages":"644","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"645","messages":"646","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"647","messages":"648","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"649","messages":"650","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"651","messages":"652","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"655","usedDeprecatedRules":"575"},{"filePath":"656","messages":"657","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"658","messages":"659","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"660","usedDeprecatedRules":"575"},{"filePath":"661","messages":"662","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"663","messages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"665","messages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"667","usedDeprecatedRules":"575"},{"filePath":"668","messages":"669","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"670","messages":"671","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"672"},{"filePath":"673","messages":"674","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"675","messages":"676","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"677","usedDeprecatedRules":"575"},{"filePath":"678","messages":"679","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"680","messages":"681","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"682","usedDeprecatedRules":"575"},{"filePath":"683","messages":"684","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"685","messages":"686","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"687","usedDeprecatedRules":"575"},{"filePath":"688","messages":"689","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"690","usedDeprecatedRules":"575"},{"filePath":"691","messages":"692","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"693","usedDeprecatedRules":"575"},{"filePath":"694","messages":"695","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"696","usedDeprecatedRules":"575"},{"filePath":"697","messages":"698","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"699","messages":"700","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"701","messages":"702","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"703","messages":"704","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"705","usedDeprecatedRules":"575"},{"filePath":"706","messages":"707","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"708","messages":"709","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"710","usedDeprecatedRules":"575"},{"filePath":"711","messages":"712","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"713"},{"filePath":"714","messages":"715","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"716","usedDeprecatedRules":"575"},{"filePath":"717","messages":"718","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"713"},{"filePath":"719","messages":"720","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"721","usedDeprecatedRules":"713"},{"filePath":"722","messages":"723","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"724","usedDeprecatedRules":"575"},{"filePath":"725","messages":"726","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"727","usedDeprecatedRules":"575"},{"filePath":"728","messages":"729","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"730","messages":"731","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"732","messages":"733","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"734","usedDeprecatedRules":"575"},{"filePath":"735","messages":"736","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"737","messages":"738","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"739","usedDeprecatedRules":"575"},{"filePath":"740","messages":"741","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"742","usedDeprecatedRules":"575"},{"filePath":"743","messages":"744","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"745","usedDeprecatedRules":"575"},{"filePath":"746","messages":"747","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"748","usedDeprecatedRules":"749"},{"filePath":"750","messages":"751","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"752","messages":"753","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"754","usedDeprecatedRules":"575"},{"filePath":"755","messages":"756","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"757","messages":"758","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"759","messages":"760","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"761","messages":"762","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"763","messages":"764","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"765","messages":"766","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"767","usedDeprecatedRules":"575"},{"filePath":"768","messages":"769","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"770","messages":"771","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"772","messages":"773","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"774","messages":"775","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"776","messages":"777","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"778","messages":"779","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"780","messages":"781","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"782","messages":"783","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"784","messages":"785","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"786","usedDeprecatedRules":"575"},{"filePath":"787","messages":"788","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"789","usedDeprecatedRules":"575"},{"filePath":"790","messages":"791","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"792","messages":"793","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"794","usedDeprecatedRules":"575"},{"filePath":"795","messages":"796","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"797","usedDeprecatedRules":"575"},{"filePath":"798","messages":"799","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"800","messages":"801","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"802","usedDeprecatedRules":"575"},{"filePath":"803","messages":"804","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"805","messages":"806","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"807","usedDeprecatedRules":"575"},{"filePath":"808","messages":"809","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"810","messages":"811","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"812","messages":"813","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"814","usedDeprecatedRules":"575"},{"filePath":"815","messages":"816","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"817","messages":"818","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"819","usedDeprecatedRules":"575"},{"filePath":"820","messages":"821","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"822","usedDeprecatedRules":"575"},{"filePath":"823","messages":"824","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"825","messages":"826","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"827","messages":"828","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"829","messages":"830","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"831","messages":"832","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"833","messages":"834","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"835","messages":"836","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"837","usedDeprecatedRules":"575"},{"filePath":"838","messages":"839","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"840","usedDeprecatedRules":"575"},{"filePath":"841","messages":"842","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"843","messages":"844","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"845","usedDeprecatedRules":"575"},{"filePath":"846","messages":"847","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"848","messages":"849","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"850","usedDeprecatedRules":"575"},{"filePath":"851","messages":"852","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"853","messages":"854","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"855","messages":"856","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"857","messages":"858","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"859","messages":"860","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"861","messages":"862","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"863","messages":"864","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"865","messages":"866","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"867","messages":"868","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"869","messages":"870","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"871","messages":"872","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"873","messages":"874","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"875","usedDeprecatedRules":"575"},{"filePath":"876","messages":"877","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"878","messages":"879","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"880","messages":"881","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"882","messages":"883","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"884","messages":"885","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"886","messages":"887","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"888","messages":"889","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"890","messages":"891","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"892","messages":"893","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"894","usedDeprecatedRules":"575"},{"filePath":"895","messages":"896","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"897","usedDeprecatedRules":"575"},{"filePath":"898","messages":"899","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"900","messages":"901","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"902","messages":"903","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"904","usedDeprecatedRules":"575"},{"filePath":"905","messages":"906","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"907","usedDeprecatedRules":"575"},{"filePath":"908","messages":"909","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"910","messages":"911","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"912","usedDeprecatedRules":"575"},{"filePath":"913","messages":"914","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"915","usedDeprecatedRules":"575"},{"filePath":"916","messages":"917","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"918","usedDeprecatedRules":"575"},{"filePath":"919","messages":"920","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"921","usedDeprecatedRules":"575"},{"filePath":"922","messages":"923","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"924","usedDeprecatedRules":"575"},{"filePath":"925","messages":"926","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"927","usedDeprecatedRules":"575"},{"filePath":"928","messages":"929","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"930","usedDeprecatedRules":"575"},{"filePath":"931","messages":"932","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"933","usedDeprecatedRules":"575"},{"filePath":"934","messages":"935","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"936","messages":"937","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"938","messages":"939","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"940","messages":"941","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"942","usedDeprecatedRules":"575"},{"filePath":"943","messages":"944","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"945","usedDeprecatedRules":"575"},{"filePath":"946","messages":"947","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"948","messages":"949","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"950","messages":"951","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"952","messages":"953","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"954","messages":"955","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"956","usedDeprecatedRules":"575"},{"filePath":"957","messages":"958","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"959","usedDeprecatedRules":"575"},{"filePath":"960","messages":"961","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"962","usedDeprecatedRules":"575"},{"filePath":"963","messages":"964","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"965","usedDeprecatedRules":"575"},{"filePath":"966","messages":"967","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"968","usedDeprecatedRules":"575"},{"filePath":"969","messages":"970","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"971","usedDeprecatedRules":"575"},{"filePath":"972","messages":"973","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"974","usedDeprecatedRules":"575"},{"filePath":"975","messages":"976","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"977","messages":"978","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"979","usedDeprecatedRules":"575"},{"filePath":"980","messages":"981","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"982","usedDeprecatedRules":"575"},{"filePath":"983","messages":"984","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"985","messages":"986","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"987","usedDeprecatedRules":"575"},{"filePath":"988","messages":"989","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"990","messages":"991","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"992","usedDeprecatedRules":"575"},{"filePath":"993","messages":"994","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"995","messages":"996","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"997","messages":"998","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"999","messages":"1000","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1001","usedDeprecatedRules":"575"},{"filePath":"1002","messages":"1003","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"1004","messages":"1005","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"1006","messages":"1007","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"1008","messages":"1009","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1010","usedDeprecatedRules":"575"},{"filePath":"1011","messages":"1012","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1013","usedDeprecatedRules":"575"},{"filePath":"1014","messages":"1015","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1016","usedDeprecatedRules":"575"},{"filePath":"1017","messages":"1018","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1019","usedDeprecatedRules":"575"},{"filePath":"1020","messages":"1021","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1022","usedDeprecatedRules":"575"},{"filePath":"1023","messages":"1024","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1025","usedDeprecatedRules":"575"},{"filePath":"1026","messages":"1027","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1028","usedDeprecatedRules":"575"},{"filePath":"1029","messages":"1030","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1031","usedDeprecatedRules":"575"},{"filePath":"1032","messages":"1033","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1034","usedDeprecatedRules":"575"},{"filePath":"1035","messages":"1036","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1037","usedDeprecatedRules":"575"},{"filePath":"1038","messages":"1039","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1040","usedDeprecatedRules":"575"},{"filePath":"1041","messages":"1042","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1043","usedDeprecatedRules":"575"},{"filePath":"1044","messages":"1045","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1046","usedDeprecatedRules":"575"},{"filePath":"1047","messages":"1048","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1049","usedDeprecatedRules":"575"},{"filePath":"1050","messages":"1051","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1052","usedDeprecatedRules":"575"},{"filePath":"1053","messages":"1054","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1055","usedDeprecatedRules":"575"},{"filePath":"1056","messages":"1057","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1058","usedDeprecatedRules":"575"},{"filePath":"1059","messages":"1060","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1061","usedDeprecatedRules":"575"},{"filePath":"1062","messages":"1063","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1064","usedDeprecatedRules":"575"},{"filePath":"1065","messages":"1066","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1067","usedDeprecatedRules":"575"},{"filePath":"1068","messages":"1069","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1070","usedDeprecatedRules":"575"},{"filePath":"1071","messages":"1072","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1073","usedDeprecatedRules":"575"},{"filePath":"1074","messages":"1075","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1076","usedDeprecatedRules":"575"},{"filePath":"1077","messages":"1078","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1079","usedDeprecatedRules":"575"},{"filePath":"1080","messages":"1081","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"716","usedDeprecatedRules":"575"},{"filePath":"1082","messages":"1083","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1084","usedDeprecatedRules":"575"},{"filePath":"1085","messages":"1086","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1087","usedDeprecatedRules":"575"},{"filePath":"1088","messages":"1089","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1090","usedDeprecatedRules":"575"},{"filePath":"1091","messages":"1092","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1093","usedDeprecatedRules":"575"},{"filePath":"1094","messages":"1095","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1096","usedDeprecatedRules":"575"},{"filePath":"1097","messages":"1098","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1013","usedDeprecatedRules":"575"},{"filePath":"1099","messages":"1100","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1101","usedDeprecatedRules":"575"},{"filePath":"1102","messages":"1103","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1104","usedDeprecatedRules":"575"},{"filePath":"1105","messages":"1106","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1107","usedDeprecatedRules":"575"},{"filePath":"1108","messages":"1109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"1110","messages":"1111","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1112","usedDeprecatedRules":"575"},{"filePath":"1113","messages":"1114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"1115","messages":"1116","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1117","usedDeprecatedRules":"575"},{"filePath":"1118","messages":"1119","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1120","usedDeprecatedRules":"575"},{"filePath":"1121","messages":"1122","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1123","usedDeprecatedRules":"575"},{"filePath":"1124","messages":"1125","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1126","usedDeprecatedRules":"575"},{"filePath":"1127","messages":"1128","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1129","usedDeprecatedRules":"575"},{"filePath":"1130","messages":"1131","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1132","usedDeprecatedRules":"575"},{"filePath":"1133","messages":"1134","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1135","usedDeprecatedRules":"575"},{"filePath":"1136","messages":"1137","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1138","usedDeprecatedRules":"575"},{"filePath":"1139","messages":"1140","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1141","usedDeprecatedRules":"575"},{"filePath":"1142","messages":"1143","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1144","usedDeprecatedRules":"575"},{"filePath":"1145","messages":"1146","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1147","usedDeprecatedRules":"575"},{"filePath":"1148","messages":"1149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1150","usedDeprecatedRules":"575"},{"filePath":"1151","messages":"1152","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1153","usedDeprecatedRules":"575"},{"filePath":"1154","messages":"1155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"1156","messages":"1157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"1158","messages":"1159","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1160","usedDeprecatedRules":"575"},{"filePath":"1161","messages":"1162","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1163","usedDeprecatedRules":"575"},{"filePath":"1164","messages":"1165","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1166","usedDeprecatedRules":"575"},{"filePath":"1167","messages":"1168","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1169","usedDeprecatedRules":"575"},{"filePath":"1170","messages":"1171","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"962","usedDeprecatedRules":"575"},{"filePath":"1172","messages":"1173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1174","usedDeprecatedRules":"575"},{"filePath":"1175","messages":"1176","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1177","usedDeprecatedRules":"575"},{"filePath":"1178","messages":"1179","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1180","usedDeprecatedRules":"575"},{"filePath":"1181","messages":"1182","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1183","usedDeprecatedRules":"575"},{"filePath":"1184","messages":"1185","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1163","usedDeprecatedRules":"575"},{"filePath":"1186","messages":"1187","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"716","usedDeprecatedRules":"575"},{"filePath":"1188","messages":"1189","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1190","usedDeprecatedRules":"575"},{"filePath":"1191","messages":"1192","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1193","usedDeprecatedRules":"575"},{"filePath":"1194","messages":"1195","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1196","usedDeprecatedRules":"575"},{"filePath":"1197","messages":"1198","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1199","usedDeprecatedRules":"575"},{"filePath":"1200","messages":"1201","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1076","usedDeprecatedRules":"575"},{"filePath":"1202","messages":"1203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"1204","messages":"1205","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1206","usedDeprecatedRules":"575"},{"filePath":"1207","messages":"1208","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1153","usedDeprecatedRules":"575"},{"filePath":"1209","messages":"1210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"1211","messages":"1212","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1213","usedDeprecatedRules":"575"},{"filePath":"1214","messages":"1215","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1216","usedDeprecatedRules":"575"},{"filePath":"1217","messages":"1218","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1219","usedDeprecatedRules":"575"},{"filePath":"1220","messages":"1221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"1222","messages":"1223","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1163","usedDeprecatedRules":"575"},{"filePath":"1224","messages":"1225","errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1226","usedDeprecatedRules":"575"},{"filePath":"1227","messages":"1228","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1229","usedDeprecatedRules":"575"},{"filePath":"1230","messages":"1231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"1232","messages":"1233","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1123","usedDeprecatedRules":"575"},{"filePath":"1234","messages":"1235","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1236","usedDeprecatedRules":"575"},{"filePath":"1237","messages":"1238","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1239","usedDeprecatedRules":"575"},{"filePath":"1240","messages":"1241","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1242","usedDeprecatedRules":"575"},{"filePath":"1243","messages":"1244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"1245","messages":"1246","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1247","usedDeprecatedRules":"575"},{"filePath":"1248","messages":"1249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"1250","messages":"1251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"1252","messages":"1253","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1247","usedDeprecatedRules":"575"},{"filePath":"1254","messages":"1255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"1256","messages":"1257","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1123","usedDeprecatedRules":"575"},{"filePath":"1258","messages":"1259","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1247","usedDeprecatedRules":"575"},{"filePath":"1260","messages":"1261","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1262","usedDeprecatedRules":"575"},{"filePath":"1263","messages":"1264","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1265","usedDeprecatedRules":"575"},{"filePath":"1266","messages":"1267","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1268","usedDeprecatedRules":"575"},{"filePath":"1269","messages":"1270","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1271","usedDeprecatedRules":"575"},{"filePath":"1272","messages":"1273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"1274","messages":"1275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"1276","messages":"1277","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"575"},{"filePath":"1278","messages":"1279","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1177","usedDeprecatedRules":"575"},{"filePath":"1280","messages":"1281","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1174","usedDeprecatedRules":"575"},{"filePath":"1282","messages":"1283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/index.js",[],["1284","1285","1286","1287","1288","1289"],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/App.js",["1290","1291","1292","1293","1294"],"import React from 'react';\r\nimport {connect, useSelector} from 'react-redux';\r\n\r\nimport {ThemeProvider} from '@material-ui/core/styles';\r\nimport {CssBaseline, StyledEngineProvider} from '@material-ui/core';\r\n\r\n// routing\r\nimport Routes from 'routes';\r\n\r\n// defaultTheme\r\nimport themes from 'themes';\r\n\r\n// project imports\r\nimport Locales from 'ui-component/Locales';\r\nimport NavigationScroll from 'layout/NavigationScroll';\r\n// import RTLLayout from 'ui-component/RTLLayout';\r\nimport Snackbar from 'ui-component/extended/Snackbar';\r\n\r\n// auth provider\r\nimport {FirebaseProvider} from 'contexts/FirebaseContext';\r\nimport {JWTProvider} from 'contexts/JWTContext';\r\n// import {Auth0Provider} from 'contexts/Auth0Context';\r\n\r\nimport * as actions from './store/actions';\r\nimport {fetchSectionAttributes, fetchSectionAttributesByRole} from \"store/actions\";\r\n\r\n\r\n// ===========================|| APP ||=========================== //\r\n\r\nconst App = ({fetchSectionAttributesByRole}) => {\r\n    const customization = useSelector((state) => state.customization);\r\n\r\n    // React.useEffect(() => {\r\n    //     fetchSectionAttributesByRole('43701c82-01c7-484e-9aaf-c90901542216')\r\n    // }, []);\r\n\r\n    return (\r\n        <StyledEngineProvider injectFirst>\r\n            <ThemeProvider theme={themes(customization)}>\r\n                <CssBaseline/>\r\n                {/* RTL layout */}\r\n                {/* <RTLLayout> */}\r\n                <Locales>\r\n                    <NavigationScroll>\r\n                        <JWTProvider>\r\n                            <Routes/>\r\n                            <Snackbar/>\r\n                        </JWTProvider>\r\n                    </NavigationScroll>\r\n                </Locales>\r\n                {/* </RTLLayout> */}\r\n            </ThemeProvider>\r\n        </StyledEngineProvider>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    sectionData: state.sectionForm\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchSectionAttributesByRole: (roleID) => dispatch(actions.fetchSectionAttributesByRole(roleID))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/serviceWorker.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/_mockApis/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducer.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/_mockApis/account.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/contexts/FirebaseContext.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/NavigationScroll.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/Locales.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/contexts/JWTContext.js",["1295","1296","1297","1298","1299","1300","1301"],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/extended/Snackbar.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/themes/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/routes/index.js",["1302"],"import {useRoutes} from 'react-router-dom';\r\nimport React, {useContext} from 'react';\r\n\r\n// project imports\r\nimport CaseManagerRoutes from './role-based-routes/CaseManagerRoutes';\r\nimport ExternalPartnerRoutes from './role-based-routes/ExternalPartnerRoutes';\r\nimport ClinicianRoutes from './role-based-routes/ClinicianRoutes';\r\nimport CommunityParamedicRoutes from './role-based-routes/CommunityParamedicRoutes';\r\nimport ReviewBoardRoutes from './role-based-routes/ReviewBoardRoutes';\r\nimport ClientRoutes from './role-based-routes/ClientRoutes';\r\nimport LoginRoutes from './LoginRoutes';\r\nimport CommonRoutes from './common-routes';\r\nimport HomeRoute from './common-routes/home';\r\n\r\nimport JWTContext from \"contexts/JWTContext\";\r\n\r\n// export default function ThemeRoutes() {\r\n//     return useRoutes([LoginRoutes, CaseManagerRoutes, CommunityParamedicRoutes, ReviewBoardRoutes, ClientRoutes, CommonRoutes, HomeRoute]);\r\n// }\r\n\r\nconst makeRoutes = (user) => {\r\n    let routes = [LoginRoutes, CommonRoutes, HomeRoute];\r\n\r\n    if (!user) {\r\n        return routes\r\n    }\r\n\r\n    // eslint-disable-next-line camelcase\r\n    const {user_type: userType} = user;\r\n\r\n    if (typeof (user) === 'object' && ('user_type' in user) && user) {\r\n        switch (userType) {\r\n            case 'TYPE_CASE_MANAGER':\r\n                routes = [\r\n                    ...routes,\r\n                    CaseManagerRoutes\r\n                ]\r\n                break;\r\n            case 'TYPE_CLINICIAN':\r\n                routes = [\r\n                    ...routes,\r\n                    ClinicianRoutes\r\n                ]\r\n                break;\r\n            case 'TYPE_CLIENT':\r\n                routes = [\r\n                    ...routes,\r\n                    ClientRoutes\r\n                ]\r\n                break;\r\n            case 'TYPE_COMMUNITY_PARAMEDIC':\r\n                routes = [\r\n                    ...routes,\r\n                    CommunityParamedicRoutes\r\n                ]\r\n                break;\r\n            case 'TYPE_REVIEW_BOARD':\r\n                routes = [\r\n                    ...routes,\r\n                    ReviewBoardRoutes\r\n                ]\r\n                break;\r\n            case 'TYPE_EXTERNAL_PARTNER':\r\n                routes = [\r\n                    ...routes,\r\n                    ExternalPartnerRoutes\r\n                ]\r\n                break;\r\n            default:\r\n                routes = [\r\n                    ...routes\r\n                ]\r\n        }\r\n    }\r\n\r\n    return routes\r\n}\r\n\r\nconst Routes = () => {\r\n    const jwtContext = useContext(JWTContext);\r\n    const {user} = jwtContext;\r\n\r\n    const routes = makeRoutes(user)\r\n    return useRoutes(routes);\r\n}\r\n\r\nexport default Routes;","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/dashboardActions.js",["1303","1304"],"import * as actionTypes from '../actionTypes';\nimport apiClient from '../api-client';\n// import {REVIEW_BOARD_CLIENT_REFERRAL_SET_DECISION} from \"../actionTypes\";\n\nexport const fetchMenuItems = () => ({\n    type: actionTypes.ADD_PRODUCTS,\n    data: {\n        menu: 'Menu items'\n    }\n});\n\n\nexport const fetchSectionAttributes = (sectionUuid) => function (dispatch) {\n    apiClient.getAttributeGroupsDataBySection(sectionUuid).then(response => {\n        // eslint-disable-next-line camelcase\n        const {value: {attribute_groups, attribute_set}} = response.data\n\n        dispatch(\n            {\n                type: actionTypes.FETCH_SECTION_ATTRIBUTES,\n                data: {\n                    sectionUuid,\n                    attribute_groups,\n                    attribute_set\n                }\n            }\n        )\n    })\n}\n\nexport const fetchSectionAttributesByRole = (roleID) => function (dispatch) {\n    apiClient.getSectionsAndAttributeGroupsDataByRole(roleID).then(response => {\n        // eslint-disable-next-line camelcase\n        const {value} = response.data\n        dispatch(\n            {\n                type: actionTypes.FETCH_ROLE_SECTION_ATTRIBUTES,\n                data: {\n                    sections: value\n                }\n            }\n        )\n    })\n}\n\n\n\n\n\n\n\n\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/snackbarReducer.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/cartReducer.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/customizationReducer.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/sectionFormReducer.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/config.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/themes/shadows.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/routes/LoginRoutes.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/reviewBoard/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/utils/mockAdapter.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/routes/role-based-routes/ReviewBoardRoutes.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/routes/role-based-routes/CaseManagerRoutes.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/utils/axios.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/Loader.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-client.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actionTypes.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/accountReducer.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/themes/typography.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/themes/palette.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/themes/compStyleOverride.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/reviewBoard/clientReferral.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/Loadable.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/NavMotion.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/authentication/authentication2/Login2.js",["1305"],"import React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\n// material-ui\r\nimport { makeStyles, useTheme } from '@material-ui/styles';\r\nimport { Box, Divider, Grid, Stack, Typography, useMediaQuery } from '@material-ui/core';\r\n\r\n// project imports\r\nimport AuthWrapper2 from '../AuthWrapper2';\r\nimport AuthCardWrapper from '../AuthCardWrapper';\r\nimport FirebaseLogin from '../login/FirebaseLogin';\r\nimport JWTLogin from '../login/JWTLogin';\r\nimport Logo from 'ui-component/Logo';\r\nimport BackgroundPattern2 from 'ui-component/cards/BackgroundPattern2';\r\nimport AuthSlider from 'ui-component/cards/AuthSlider';\r\nimport AuthFooter from 'ui-component/cards/AuthFooter';\r\n\r\n// assets\r\nimport imgMain from 'assets/images/auth/img-a2-login.svg';\r\n\r\nconst useStyles = makeStyles({\r\n    authImage: {\r\n        maxWidth: '100%',\r\n        margin: '0 auto',\r\n        display: 'block',\r\n        width: '300px',\r\n        position: 'relative',\r\n        zIndex: 5\r\n    }\r\n});\r\n\r\n// carousel items\r\nconst items = [\r\n    {\r\n        title: 'Powerful and easy to use case manager functions.',\r\n        description: 'Powerful and easy to use case manager functions.'\r\n    },\r\n    {\r\n        title: 'Powerful and easy to use case manager functions.',\r\n        description: 'Powerful and easy to use case manager functions.'\r\n    },\r\n    {\r\n        title: 'Powerful and easy to use case manager functions.',\r\n        description: 'Powerful and easy to use case manager functions.'\r\n    }\r\n];\r\n\r\n// ================================|| AUTH2 - LOGIN ||================================ //\r\n\r\nconst Login = () => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const matchDownSM = useMediaQuery(theme.breakpoints.down('sm'));\r\n    const matchDownMD = useMediaQuery(theme.breakpoints.down('md'));\r\n\r\n    return (\r\n        <AuthWrapper2>\r\n            <Grid container justifyContent={matchDownSM ? 'center' : 'space-between'} alignItems=\"center\">\r\n                <Grid item md={6} lg={7} xs={12} sx={{ minHeight: '100vh' }}>\r\n                    <Grid\r\n                        sx={{ minHeight: '100vh' }}\r\n                        container\r\n                        alignItems={matchDownSM ? 'center' : 'flex-start'}\r\n                        justifyContent={matchDownSM ? 'center' : 'space-between'}\r\n                    >\r\n                        <Grid item sx={{ display: { xs: 'none', md: 'block' }, m: 3 }}>\r\n                            <RouterLink to=\"#\">\r\n                                <Logo />\r\n                            </RouterLink>\r\n                        </Grid>\r\n                        <Grid\r\n                            item\r\n                            xs={12}\r\n                            container\r\n                            justifyContent=\"center\"\r\n                            alignItems=\"center\"\r\n                            sx={{ minHeight: { xs: 'calc(100vh - 68px)', md: 'calc(100vh - 152px)' } }}\r\n                        >\r\n                            <Stack justifyContent=\"center\" alignItems=\"center\" spacing={5} m={2}>\r\n                                <Box component={RouterLink} to=\"#\" sx={{ display: { xs: 'block', md: 'none' } }}>\r\n                                    <Logo />\r\n                                </Box>\r\n                                <AuthCardWrapper border={matchDownMD}>\r\n                                    <Grid container spacing={2} justifyContent=\"center\">\r\n                                        <Grid item>\r\n                                            <Stack alignItems=\"center\" justifyContent=\"center\" spacing={1}>\r\n                                                <Typography\r\n                                                    color={theme.palette.secondary.main}\r\n                                                    gutterBottom\r\n                                                    variant={matchDownSM ? 'h3' : 'h2'}\r\n                                                >\r\n                                                    Hi, Welcome Back\r\n                                                </Typography>\r\n                                                <Typography variant=\"caption\" fontSize=\"16px\" textAlign={matchDownSM ? 'center' : ''}>\r\n                                                    Enter your credentials to continue\r\n                                                </Typography>\r\n                                            </Stack>\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <JWTLogin loginIndex={2} />\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <Divider />\r\n                                        </Grid>\r\n                                        <Grid item xs={12}>\r\n                                            <Grid item container direction=\"column\" alignItems=\"center\" xs={12}>\r\n                                                <Typography\r\n                                                    component={RouterLink}\r\n                                                    to=\"/pages/register/register2\"\r\n                                                    variant=\"subtitle1\"\r\n                                                    sx={{ textDecoration: 'none' }}\r\n                                                >\r\n                                                    Don&apos;t have an account?\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </AuthCardWrapper>\r\n                            </Stack>\r\n                        </Grid>\r\n                        <Grid item xs={12} sx={{ m: 3 }}>\r\n                            <AuthFooter />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item md={6} lg={5} sx={{ position: 'relative', alignSelf: 'stretch', display: { xs: 'none', md: 'block' } }}>\r\n                    <BackgroundPattern2>\r\n                        <Grid item container justifyContent=\"center\">\r\n                            <Grid item xs={12}>\r\n                                <Grid item container justifyContent=\"center\" sx={{ pb: 8 }}>\r\n                                    <Grid item xs={10} lg={8} sx={{ '& .slick-list': { pb: 2 } }}>\r\n                                        <AuthSlider items={items} />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={12} sx={{ position: 'relative' }}>\r\n                                <img alt=\"Auth method\" src={imgMain} className={classes.authImage} />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </BackgroundPattern2>\r\n                </Grid>\r\n            </Grid>\r\n        </AuthWrapper2>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/utils/route-guard/AuthGuard.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/review-board/referral/index.js",["1306","1307","1308","1309","1310"],"import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {listReferralsByReviewBoardID} from 'store/actions/reviewBoard/referralActions';\nimport { useNavigate } from 'react-router-dom';\n\n// material-ui\nimport {makeStyles, useTheme} from '@material-ui/styles';\nimport {\n    CardContent,\n    Checkbox,\n    Fab,\n    Grid,\n    IconButton,\n    InputAdornment,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TablePagination,\n    TableRow,\n    TableSortLabel,\n    TextField,\n    Toolbar,\n    Tooltip,\n    Typography\n} from '@material-ui/core';\nimport {visuallyHidden} from '@material-ui/utils';\n\n// third-party\nimport clsx from 'clsx';\n\n// project imports\n\nimport MainCard from 'ui-component/cards/MainCard';\n\n// assets\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterListTwoTone';\nimport PrintIcon from '@material-ui/icons/PrintTwoTone';\nimport FileCopyIcon from '@material-ui/icons/FileCopyTwoTone';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddIcon from '@material-ui/icons/AddTwoTone';\nimport MoreHorizOutlinedIcon from '@material-ui/icons/MoreHorizOutlined';\nimport {useContext, useEffect} from \"react\";\n\n// axios api\nimport reviewBoardApi from 'store/api-calls/review-board';\nimport JWTContext from \"contexts/JWTContext\";\n\n// table data\nfunction createData(id, name, category, price, date, qty) {\n    return {id, name, category, price, date, qty};\n}\n\nconst rowsInitial = [\n    createData('790841', 'Samsung TV 32” LED Retina', 'Television', 2500, '12.07.2018', 5),\n];\n\n// table sort\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\n// table header options\nconst headCells = [\n    {\n        id: 'id',\n        numeric: true,\n        label: 'ID',\n        align: 'center'\n    },\n    {\n        id: 'name',\n        numeric: false,\n        label: 'First Name',\n        align: 'left'\n    },\n    {\n        id: 'name',\n        numeric: false,\n        label: 'Last Name',\n        align: 'left'\n    },\n    {\n        id: 'name',\n        numeric: false,\n        label: 'Referral Date',\n        align: 'left'\n    },\n];\n\n// style const\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%'\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2)\n    },\n    table: {\n        minWidth: 750\n    },\n    sortSpan: visuallyHidden\n}));\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        padding: 0,\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1)\n    },\n    highlight: {\n        color: theme.palette.secondary.main\n    },\n    title: {\n        flex: '1 1 100%'\n    }\n}));\n\n// ===========================|| TABLE HEADER ||=========================== //\n\nfunction EnhancedTableHead({\n                               classes,\n                               onSelectAllClick,\n                               order,\n                               orderBy,\n                               numSelected,\n                               rowCount,\n                               onRequestSort,\n                               theme,\n                               selected\n                           }) {\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\" sx={{pl: 3}}>\n                    <Checkbox\n                        color=\"primary\"\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\n                        checked={rowCount > 0 && numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{\n                            'aria-label': 'select all desserts'\n                        }}\n                    />\n                </TableCell>\n                {numSelected > 0 && (\n                    <TableCell padding=\"none\" colSpan={7}>\n                        <EnhancedTableToolbar numSelected={selected.length}/>\n                    </TableCell>\n                )}\n                {numSelected <= 0 &&\n                headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.align}\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span\n                                    className={classes.sortSpan}>{order === 'desc' ? 'sorted descending' : 'sorted ascending'}</span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n                {numSelected <= 0 && (\n                    <TableCell sortDirection={false} align=\"center\" sx={{pr: 3}}>\n                        <Typography\n                            variant=\"subtitle1\"\n                            sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                        >\n                            Action\n                        </Typography>\n                    </TableCell>\n                )}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    theme: PropTypes.object,\n    selected: PropTypes.array,\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired\n};\n\n// ===========================|| TABLE HEADER TOOLBAR ||=========================== //\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const {numSelected} = props;\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"h4\" component=\"div\">\n                    {numSelected} Selected\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Nutrition\n                </Typography>\n            )}\n\n            {numSelected > 0 && (\n                <Tooltip title=\"Delete\">\n                    <IconButton>\n                        <DeleteIcon fontSize=\"small\"/>\n                    </IconButton>\n                </Tooltip>\n            )}\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired\n};\n\n// ===========================|| PRODUCT LIST ||=========================== //\n\nconst ReviewBoardReferralList = () => {\n    const jwtContext = React.useContext(JWTContext);\n    const {user} = jwtContext;\n    const navigate = useNavigate();\n    const reviewBoardRedux = useSelector(state => state.reviewBoard)\n    const dispatch = useDispatch();\n\n    const classes = useStyles();\n    const theme = useTheme();\n\n    // show a right sidebar when clicked on new product\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpenDialog = () => {\n        navigate('add-referral');\n    };\n    const handleCloseDialog = () => {\n        setOpen(false);\n    };\n\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [search, setSearch] = React.useState('');\n    const [rows, setRows] = React.useState([]);\n\n    const handleSearch = (event) => {\n        const newString = event.target.value;\n        setSearch(newString);\n\n        if (newString) {\n            const newRows = rows.filter((row) => {\n                let matches = true;\n\n                const properties = ['name', 'category', 'price', 'qty', 'id'];\n                let containsQuery = false;\n\n                properties.forEach((property) => {\n                    if (row[property].toString().toLowerCase().includes(newString.toString().toLowerCase())) {\n                        containsQuery = true;\n                    }\n                });\n\n                if (!containsQuery) {\n                    matches = false;\n                }\n                return matches;\n            });\n            setRows(newRows);\n        } else {\n            setRows(rowsInitial);\n        }\n    };\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelectedId = rows.map((n) => n.name);\n            setSelected(newSelectedId);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, name) => {\n        const selectedIndex = selected.indexOf(name);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, name);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const fetchListData = async (reviewBoardID) => {\n        const response = await reviewBoardApi.listReferralsByReviewBoardID(reviewBoardID);\n\n        setRows(response)\n\n        // Set this response to redux and display in table\n        dispatch(listReferralsByReviewBoardID(response))\n    }\n\n    useEffect(() => {\n        // eslint-disable-next-line camelcase\n        const {user_type_pk} = user;\n        fetchListData(user_type_pk)\n    }, [])\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n    const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n    return (\n        <MainCard title=\"Client Referrals\" content={false}>\n            <CardContent>\n                <Grid container justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <SearchIcon fontSize=\"small\"/>\n                                    </InputAdornment>\n                                )\n                            }}\n                            onChange={handleSearch}\n                            placeholder=\"Search Referral\"\n                            value={search}\n                            size=\"small\"\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={6} sx={{textAlign: 'right'}}>\n                        <Tooltip title=\"Copy\">\n                            <IconButton>\n                                <FileCopyIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Print\">\n                            <IconButton>\n                                <PrintIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Filter\">\n                            <IconButton>\n                                <FilterListIcon/>\n                            </IconButton>\n                        </Tooltip>\n\n                        {/* product add & dialog */}\n                        <Tooltip title=\"Add Referral\">\n                            <Fab\n                                color=\"primary\"\n                                size=\"small\"\n                                onClick={handleClickOpenDialog}\n                                sx={{boxShadow: 'none', ml: 1, width: '32px', height: '32px', minHeight: '32px'}}\n                            >\n                                <AddIcon fontSize=\"small\"/>\n                            </Fab>\n                        </Tooltip>\n\n                    </Grid>\n                </Grid>\n            </CardContent>\n\n            {/* table */}\n            <TableContainer>\n                <Table className={classes.table} aria-labelledby=\"tableTitle\">\n                    <EnhancedTableHead\n                        classes={classes}\n                        numSelected={selected.length}\n                        order={order}\n                        orderBy={orderBy}\n                        onSelectAllClick={handleSelectAllClick}\n                        onRequestSort={handleRequestSort}\n                        rowCount={rows.length}\n                        theme={theme}\n                        selected={selected}\n                    />\n                    <TableBody>\n                        {stableSort(rows, getComparator(order, orderBy))\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map((row, index) => {\n                                const isItemSelected = isSelected(row.referral_id);\n                                const labelId = `enhanced-table-checkbox-${index}`;\n\n                                return (\n                                    <TableRow\n                                        hover\n                                        role=\"checkbox\"\n                                        aria-checked={isItemSelected}\n                                        tabIndex={-1}\n                                        key={index}\n                                        selected={isItemSelected}\n                                    >\n                                        <TableCell padding=\"checkbox\" sx={{pl: 3}}\n                                                   onClick={(event) => handleClick(event, row.referral_id)}>\n                                            <Checkbox\n                                                color=\"primary\"\n                                                checked={isItemSelected}\n                                                inputProps={{\n                                                    'aria-labelledby': labelId\n                                                }}\n                                            />\n                                        </TableCell>\n                                        <TableCell\n                                            align=\"center\"\n                                            component=\"th\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            onClick={(event) => handleClick(event, row.referral_id)}\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row.referral_id}{' '}\n                                            </Typography>\n                                        </TableCell>\n                                        <TableCell\n                                            component=\"th\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            onClick={(event) => handleClick(event, row.client_first_name)}\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row.client_first_name}{' '}\n                                            </Typography>\n                                        </TableCell>\n                                        <TableCell>{row.client_last_name}</TableCell>\n                                        <TableCell align=\"left\">{row.referral_date}</TableCell>\n                                        <TableCell align=\"center\" sx={{pr: 3}}>\n                                            <IconButton>\n                                                <MoreHorizOutlinedIcon sx={{fontSize: '1.3rem'}}/>\n                                            </IconButton>\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                            })}\n                        {emptyRows > 0 && (\n                            <TableRow\n                                style={{\n                                    height: 53 * emptyRows\n                                }}\n                            >\n                                <TableCell colSpan={6}/>\n                            </TableRow>\n                        )}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n\n            {/* table pagination */}\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </MainCard>\n    );\n};\n\nexport default ReviewBoardReferralList;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/authentication/AuthWrapper2.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/authentication/AuthCardWrapper.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/authentication/login/FirebaseLogin.js",["1311","1312","1313"],"import PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\n// material-ui\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Checkbox,\r\n    Divider,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormHelperText,\r\n    Grid,\r\n    IconButton,\r\n    InputAdornment,\r\n    InputLabel,\r\n    OutlinedInput,\r\n    Stack,\r\n    Typography\r\n} from '@material-ui/core';\r\n\r\n// third party\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\n\r\n// project imports\r\nimport useAuth from 'hooks/useAuth';\r\nimport useScriptRef from 'hooks/useScriptRef';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\n\r\n// assets\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\n\r\nimport Google from 'assets/images/icons/social-google.svg';\r\n\r\n// style constant\r\nconst useStyles = makeStyles((theme) => ({\r\n    redButton: {\r\n        fontSize: '1rem',\r\n        fontWeight: 500,\r\n        backgroundColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50],\r\n        border: '1px solid',\r\n        borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 20 : theme.palette.grey[100],\r\n        color: theme.palette.grey[700],\r\n        textTransform: 'none',\r\n        '&:hover': {\r\n            backgroundColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 20 : theme.palette.primary.light\r\n        },\r\n        [theme.breakpoints.down('sm')]: {\r\n            fontSize: '0.875rem'\r\n        }\r\n    },\r\n    signDivider: {\r\n        flexGrow: 1\r\n    },\r\n    signText: {\r\n        cursor: 'unset',\r\n        margin: theme.spacing(2),\r\n        padding: '5px 56px',\r\n        borderColor:\r\n            theme.palette.mode === 'dark' ? `${theme.palette.dark.light + 20} !important` : `${theme.palette.grey[100]} !important`,\r\n        color: `${theme.palette.grey[900]} !important`,\r\n        fontWeight: 500\r\n    },\r\n    loginIcon: {\r\n        marginRight: '16px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginRight: '8px'\r\n        }\r\n    },\r\n    loginInput: {\r\n        ...theme.typography.customInput\r\n    }\r\n}));\r\n\r\n// ============================|| FIREBASE - LOGIN ||============================ //\r\n\r\nconst FirebaseLogin = ({ loginIndex, ...others }) => {\r\n    const classes = useStyles();\r\n\r\n    const customization = useSelector((state) => state.customization);\r\n    const scriptedRef = useScriptRef();\r\n    const [checked, setChecked] = React.useState(true);\r\n\r\n    const { firebaseEmailPasswordSignIn, firebaseGoogleSignIn } = useAuth();\r\n    const googleHandler = async () => {\r\n        try {\r\n            await firebaseGoogleSignIn();\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const [showPassword, setShowPassword] = React.useState(false);\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n    };\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Grid container direction=\"column\" justifyContent=\"center\" spacing={2}>\r\n                <Grid item xs={12}>\r\n                    <Box\r\n                        sx={{\r\n                            alignItems: 'center',\r\n                            display: 'flex'\r\n                        }}\r\n                    >\r\n                        <Divider className={classes.signDivider} orientation=\"horizontal\" />\r\n                        <Divider className={classes.signDivider} orientation=\"horizontal\" />\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item xs={12} container alignItems=\"center\" justifyContent=\"center\">\r\n                    <Box\r\n                        sx={{\r\n                            mb: 2\r\n                        }}\r\n                    >\r\n                        <Typography variant=\"subtitle1\">Sign in with Email address</Typography>\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Formik\r\n                initialValues={{\r\n                    email: 'info@codedthemes.com',\r\n                    password: '123456',\r\n                    submit: null\r\n                }}\r\n                validationSchema={Yup.object().shape({\r\n                    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n                    password: Yup.string().max(255).required('Password is required')\r\n                })}\r\n                onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {\r\n                    try {\r\n                        await firebaseEmailPasswordSignIn(values.email, values.password);\r\n\r\n                        if (scriptedRef.current) {\r\n                            setStatus({ success: true });\r\n                            setSubmitting(false);\r\n                        }\r\n                    } catch (err) {\r\n                        console.error(err);\r\n                        if (scriptedRef.current) {\r\n                            setStatus({ success: false });\r\n                            setErrors({ submit: err.message });\r\n                            setSubmitting(false);\r\n                        }\r\n                    }\r\n                }}\r\n            >\r\n                {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (\r\n                    <form noValidate onSubmit={handleSubmit} {...others}>\r\n                        <FormControl fullWidth error={Boolean(touched.email && errors.email)} className={classes.loginInput}>\r\n                            <InputLabel htmlFor=\"outlined-adornment-email-login\">Email Address / Username</InputLabel>\r\n                            <OutlinedInput\r\n                                id=\"outlined-adornment-email-login\"\r\n                                type=\"email\"\r\n                                value={values.email}\r\n                                name=\"email\"\r\n                                onBlur={handleBlur}\r\n                                onChange={handleChange}\r\n                                label=\"Email Address / Username\"\r\n                                inputProps={{\r\n                                    classes: {\r\n                                        notchedOutline: classes.notchedOutline\r\n                                    }\r\n                                }}\r\n                            />\r\n                            {touched.email && errors.email && (\r\n                                <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n                                    {' '}\r\n                                    {errors.email}{' '}\r\n                                </FormHelperText>\r\n                            )}\r\n                        </FormControl>\r\n\r\n                        <FormControl fullWidth error={Boolean(touched.password && errors.password)} className={classes.loginInput}>\r\n                            <InputLabel htmlFor=\"outlined-adornment-password-login\">Password</InputLabel>\r\n                            <OutlinedInput\r\n                                id=\"outlined-adornment-password-login\"\r\n                                type={showPassword ? 'text' : 'password'}\r\n                                value={values.password}\r\n                                name=\"password\"\r\n                                onBlur={handleBlur}\r\n                                onChange={handleChange}\r\n                                endAdornment={\r\n                                    <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={handleClickShowPassword}\r\n                                            onMouseDown={handleMouseDownPassword}\r\n                                            edge=\"end\"\r\n                                        >\r\n                                            {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                                        </IconButton>\r\n                                    </InputAdornment>\r\n                                }\r\n                                label=\"Password\"\r\n                                inputProps={{\r\n                                    classes: {\r\n                                        notchedOutline: classes.notchedOutline\r\n                                    }\r\n                                }}\r\n                            />\r\n                            {touched.password && errors.password && (\r\n                                <FormHelperText error id=\"standard-weight-helper-text-password-login\">\r\n                                    {' '}\r\n                                    {errors.password}{' '}\r\n                                </FormHelperText>\r\n                            )}\r\n                        </FormControl>\r\n                        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" spacing={1}>\r\n                            <FormControlLabel\r\n                                control={\r\n                                    <Checkbox\r\n                                        checked={checked}\r\n                                        onChange={(event) => setChecked(event.target.checked)}\r\n                                        name=\"checked\"\r\n                                        color=\"primary\"\r\n                                    />\r\n                                }\r\n                                label=\"Remember me\"\r\n                            />\r\n                            <Typography\r\n                                variant=\"subtitle1\"\r\n                                component={Link}\r\n                                to={loginIndex ? `/pages/forgot-password/forgot-password${loginIndex}` : '#'}\r\n                                color=\"secondary\"\r\n                                sx={{ textDecoration: 'none' }}\r\n                            >\r\n                                Forgot Password?\r\n                            </Typography>\r\n                        </Stack>\r\n                        {errors.submit && (\r\n                            <Box\r\n                                sx={{\r\n                                    mt: 3\r\n                                }}\r\n                            >\r\n                                <FormHelperText error>{errors.submit}</FormHelperText>\r\n                            </Box>\r\n                        )}\r\n\r\n                        <Box\r\n                            sx={{\r\n                                mt: 2\r\n                            }}\r\n                        >\r\n                            <AnimateButton>\r\n                                <Button\r\n                                    disableElevation\r\n                                    disabled={isSubmitting}\r\n                                    fullWidth\r\n                                    size=\"large\"\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                >\r\n                                    Sign in\r\n                                </Button>\r\n                            </AnimateButton>\r\n                        </Box>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    );\r\n};\r\n\r\nFirebaseLogin.propTypes = {\r\n    loginIndex: PropTypes.number\r\n};\r\n\r\nexport default FirebaseLogin;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/authentication/login/JWTLogin.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/index.js",["1314","1315","1316","1317","1318","1319"],"import PropTypes from 'prop-types';\nimport React, {useEffect} from 'react';\nimport JWTContext from 'contexts/JWTContext';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {\n    Button,\n    CardActions,\n    CircularProgress,\n    CardContent,\n    Divider,\n    Grid,\n    Tab,\n    Tabs,\n    Typography\n} from '@material-ui/core';\n\n// project imports\nimport ClientCaseLoad from './forms/client-caseload';\nimport ProjectClinicalActivities from './forms/project-clinical-activities';\nimport ProjectActivities from './forms/project-activities';\nimport Details from './forms/details';\n\nimport {useSelector, useDispatch} from \"react-redux\";\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport {gridSpacing} from 'store/constant';\n\n// assets\nimport PersonOutlineTwoToneIcon from '@material-ui/icons/PersonOutlineTwoTone';\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\nimport CreditCardTwoToneIcon from '@material-ui/icons/CreditCardTwoTone';\nimport VpnKeyTwoToneIcon from '@material-ui/icons/VpnKeyTwoTone';\nimport {SNACKBAR_OPEN} from 'store/actionTypes';\n\nimport caseManagerApi from 'store/api-calls/case-manager';\nimport {listReferralsByReviewBoardID} from \"store/actions/reviewBoard/referralActions\";\n\nimport ProgressCircularControlled from 'views/ui/ProgressCircularControlled';\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    profileTab: {\n        '& .MuiTabs-flexContainer': {\n            borderBottom: 'none'\n        },\n        '& button': {\n            color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[600],\n            minHeight: 'auto',\n            minWidth: '100%',\n            padding: '12px 16px',\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n            textAlign: 'left',\n            justifyContent: 'flex-start'\n        },\n        '& button.Mui-selected': {\n            color: theme.palette.primary.main,\n            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50]\n        },\n        '& button > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px',\n            marginTop: '10px',\n            height: '20px',\n            width: '20px'\n        },\n        '& button > div > span': {\n            display: 'block'\n        },\n        '& > div > span': {\n            display: 'none'\n        }\n    },\n    cardPanels: {\n        borderLeft: '1px solid',\n        borderLeftColor: theme.palette.mode === 'dark' ? '#333d5e' : '#eeeeee',\n        height: '100%'\n    }\n}));\n\n// tabs\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <div role='tabpanel' hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && <div>{children}</div>}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n// tabs option\nconst tabsOption = [\n    {\n        label: 'Details',\n        icon: <DescriptionTwoToneIcon/>,\n        caption: 'Caption here'\n    },\n    {\n        label: 'Client Caseload',\n        icon: <DescriptionTwoToneIcon/>,\n        caption: 'Billing Information'\n    },\n    {\n        label: 'Project Related Clinical Activities',\n        icon: <CreditCardTwoToneIcon/>,\n        caption: 'Add & Update Card'\n    },\n    {\n        label: 'Research Related Activities',\n        icon: <VpnKeyTwoToneIcon/>,\n        caption: 'Update Profile Security'\n    }\n];\n\n// ===========================|| PROFILE 2 ||=========================== //\n\nconst DailyWorkload = () => {\n    const classes = useStyles();\n    const customization = useSelector((state) => state.customization);\n    const [value, setValue] = React.useState(0);\n    const [progressLoader, setProgressLoader] = React.useState(false);\n    const dispatch = useDispatch();\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const createDailyWorkload = async () => (caseManagerApi.createDailyWorkload())\n\n    useEffect(() => {\n        setProgressLoader(true);  // Call this to show the loader for the current tab\n\n        dispatch({\n            type: SNACKBAR_OPEN,\n            open: true,\n            message: 'This is default message',\n            variant: 'alert',\n            alertSeverity: 'success', // error , success, warning\n            anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n            transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n            close: false\n        })\n\n        // console.log(createDailyWorkload())\n    }, []);\n\n    const userAuthContext = React.useContext(JWTContext)\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12}>\n                <MainCard title='Daily Workload ' secondary={<ProgressCircularControlled display={progressLoader} />} content={false}>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={12} lg={4}>\n                            <CardContent>\n                                <Tabs\n                                    value={value}\n                                    onChange={handleChange}\n                                    orientation='vertical'\n                                    className={classes.profileTab}\n                                    variant='scrollable'\n                                    sx={{\n                                        '& button': {\n                                            borderRadius: `${customization.borderRadius}px`\n                                        }\n                                    }}\n                                >\n                                    {tabsOption.map((tab, index) => (\n                                        <Tab\n                                            key={index}\n                                            icon={tab.icon}\n                                            label={\n                                                <Grid container direction='column'>\n                                                    <Typography sx={{textTransform: 'capitalize'}} variant='subtitle1'\n                                                                color='inherit'>\n                                                        {tab.label}\n                                                    </Typography>\n                                                    <Typography component='div' variant='caption'\n                                                                sx={{textTransform: 'capitalize'}}>\n                                                        {tab.caption}\n                                                    </Typography>\n                                                </Grid>\n                                            }\n                                            {...a11yProps(index)}\n                                        />\n                                    ))}\n                                </Tabs>\n                            </CardContent>\n                        </Grid>\n                        <Grid item xs={12} lg={8}>\n                            <CardContent className={classes.cardPanels}>\n                                <TabPanel value={value} index={0}>\n                                    <Details/>\n                                </TabPanel>\n                                <TabPanel value={value} index={1}>\n                                    <ClientCaseLoad/>\n                                </TabPanel>\n                                <TabPanel value={value} index={2}>\n                                    <ProjectClinicalActivities/>\n                                </TabPanel>\n                                <TabPanel value={value} index={3}>\n                                    <ProjectActivities/>\n                                </TabPanel>\n                            </CardContent>\n                        </Grid>\n                    </Grid>\n                    <Divider/>\n                    <CardActions>\n                        <Grid container justifyContent='space-between' spacing={0}>\n                            <Grid item>\n                                <Grid container justifyContent='space-between' spacing={1}>\n                                    <Grid item>\n                                        {value < 3 && (\n                                            <AnimateButton>\n                                                <Button variant='contained' size='large'\n                                                        onClick={(e) => handleChange(e, 1 + parseInt(value, 10))}>\n                                                    Continue\n                                                </Button>\n                                            </AnimateButton>\n                                        )}\n                                    </Grid>\n\n                                    <Grid item>\n                                        {value > 0 && (\n                                            <AnimateButton>\n                                                <Button variant='outlined' size='large'\n                                                        onClick={(e) => handleChange(e, parseInt(value, 10) - 1)}>\n                                                    Back\n                                                </Button>\n                                            </AnimateButton>\n                                        )}\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n\n                            <Grid item alignContent='end'>\n                                {value > 2 && (\n                                    <AnimateButton>\n                                        <Button color='secondary' variant='contained' size='large'\n                                                onClick={(e) => handleChange(e, 1 + parseInt(value, 10))}>\n                                            Submit\n                                        </Button>\n                                    </AnimateButton>\n                                )}\n                            </Grid>\n\n                        </Grid>\n                    </CardActions>\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default DailyWorkload;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/Logo.js",["1320","1321"],"import React from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@material-ui/styles';\r\n\r\n/**\r\n * if you want to use image instead of <svg> uncomment following.\r\n *\r\n * import logoDark from 'assets/images/logo-dark.svg';\r\n * import logo from 'assets/images/logo.svg';\r\n *\r\n */\r\n\r\n// ===========================|| LOGO SVG ||=========================== //\r\n\r\nconst Logo = () => {\r\n    const theme = useTheme();\r\n\r\n    return true;\r\n};\r\n\r\nexport default Logo;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/cards/AuthSlider.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/cards/BackgroundPattern2.js",["1322","1323"],"import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@material-ui/styles';\r\nimport { Box } from '@material-ui/core';\r\n\r\n// assets\r\nimport AuthPattern from 'assets/images/auth/img-a2-grid.svg';\r\nimport AuthPatternDark from 'assets/images/auth/img-a2-grid-dark.svg';\r\n\r\n// ===========================|| BACKGROUND GRID PATTERN 2 ||=========================== //\r\n\r\nconst BackgroundPattern2 = ({ children }) => {\r\n    const theme = useTheme();\r\n    return (\r\n        <Box\r\n            component=\"span\"\r\n            sx={{\r\n                display: 'flex',\r\n                minHeight: '100%',\r\n                height: '100vh',\r\n                bgcolor: theme.palette.mode === 'dark' ? theme.palette.dark.dark : '#fff',\r\n                // backgroundImage: theme.palette.mode === 'dark' ? `url(${AuthPatternDark})` : `url(${AuthPattern})`,\r\n                position: 'absolute',\r\n                backgroundPosition: 'bottom left',\r\n                backgroundRepeat: 'no-repeat',\r\n                // backgroundSize: 'cover',\r\n                overflow: 'hidden',\r\n                m: '0 0 0 auto',\r\n                p: '100px 0',\r\n                top: 0,\r\n                left: 0,\r\n                right: 0,\r\n                bottom: 0,\r\n                '& > *': {\r\n                    position: 'relative',\r\n                    zIndex: 5\r\n                },\r\n                '&:after': {\r\n                    content: '\"\"',\r\n                    position: 'absolute',\r\n                    top: 0,\r\n                    left: 0,\r\n                    right: 0,\r\n                    zIndex: 1,\r\n                    bottom: 0,\r\n                    bgcolor: theme.palette.mode === 'dark' ? theme.palette.dark.dark : theme.palette.primary.light,\r\n                    opacity: theme.palette.mode === 'dark' ? 0.85 : 0.9\r\n                }\r\n            }}\r\n        >\r\n            {children}\r\n        </Box>\r\n    );\r\n};\r\n\r\nBackgroundPattern2.propTypes = {\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default BackgroundPattern2;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/cards/AuthFooter.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/review-board/referral/forms/referral-forms.js",["1324","1325","1326","1327","1328","1329","1330"],"import React from 'react';\n\n// material-ui\nimport {CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport MaskedInput from 'react-text-mask';\nimport FileInput from '../../../common/file-input';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    setEmpReferralRequestForm,\n    setFamiliarFacesSnatForm,\n    setFamiliarFacesSdhForm,\n    setCasePresentationForm\n} from \"store/actions/reviewBoard/referralActions\";\n\nconst ReferralForms = () => {\n    const dispatch = useDispatch();\n    useSelector(state => state.reviewBoard.referrals.add.referralForms)\n\n    return (<SubCard title='Referral Forms'>\n        <CardContent>\n            <Grid container spacing={gridSpacing}>\n                <Grid item xs={12} sm={12} lg={12} md={12}>\n                    <Grid container spacing={gridSpacing}>\n                        <FileInput title='EMP Referral Request' setDocumentUUID={setEmpReferralRequestForm}\n                                   fileType='TYPE_REVIEW_BOARD_REFERRAL'/>\n\n                        <FileInput title='Familiar Faces - Social Needs Assessment Tool' setDocumentUUID={setFamiliarFacesSnatForm}\n                                   fileType='TYPE_REVIEW_BOARD_REFERRAL'/>\n\n                        <FileInput title='Familiar Faces - Screening Tool: Social Determinants of Health'\n                                   fileType='TYPE_REVIEW_BOARD_REFERRAL'\n                                   setDocumentUUID={setFamiliarFacesSdhForm}\n                        />\n                    </Grid>\n\n                </Grid>\n            </Grid>\n        </CardContent>\n    </SubCard>)\n};\n\nexport default ReferralForms;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/review-board/referral/forms/client-detail.js",["1331","1332","1333","1334","1335","1336","1337"],"import React from 'react';\n\n\n// material-ui\nimport {Button, CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport MaskedInput from 'react-text-mask';\n\nimport {useFormik, withFormik} from 'formik';\nimport * as Yup from 'yup';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {setReferralDetails} from 'store/actions/reviewBoard/referralActions';\nimport commonApi from 'store/api-calls/common';\nimport ProgressCircularControlled from \"../../../../ui/ProgressCircularControlled\";\nimport {SNACKBAR_OPEN} from \"store/actionTypes\";\n\nconst ClientDetail = () => {\n    const referralData = useSelector(state => state.reviewBoard.referrals.add.referralData)\n    const dispatch = useDispatch()\n    const [progressLoader, setProgressLoader] = React.useState(false);\n\n    const formik = useFormik({\n        initialValues: {\n            client_first_name: referralData.client_first_name,\n            client_last_name: referralData.client_last_name,\n            client_email: referralData.client_email,\n        },\n        validate: values => {\n            const valuesData = {\n                ...referralData,\n                ...values\n            }\n            dispatch(setReferralDetails(valuesData));\n        }\n    });\n\n    const checkIfClientEmailExists = async (e) => {\n        setProgressLoader(true);\n        const email = e.target.value\n\n        if (email && email.length) {\n            const clients = await commonApi.searchClientByEmail(email)\n\n            if(clients.length > 0){\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Client already exists with that email address',\n                    variant: 'alert',\n                    alertSeverity: 'error', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                })\n            }\n        }\n        setProgressLoader(false);\n    }\n\n    return (<Grid container spacing={gridSpacing}>\n        <Grid item xs={12} sm={12} lg={12} md={12}>\n            <SubCard title='Client Details' secondary={<ProgressCircularControlled display={progressLoader}/>}>\n                <CardContent>\n                    <form onSubmit={formik.handleSubmit} noValidate>\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item xs={8} sm={10} lg={10} md={10}>\n                                <Grid container spacing={gridSpacing}>\n                                    <Grid item xs={6} sm={8} lg={6} md={8}>\n                                        <TextField name='client_first_name' id='client_first_name'\n                                                   fullWidth label='First Name'\n                                                   value={formik.values.client_first_name}\n                                                   onChange={formik.handleChange}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={6} sm={8} lg={6} md={8}>\n                                        <TextField name='client_last_name' id='client_last_name'\n                                                   fullWidth label='Last Name'\n                                                   value={formik.values.client_last_name}\n                                                   onChange={formik.handleChange}\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n\n                            <Grid item xs={8} sm={8} lg={8} md={8}>\n                                <Grid container spacing={gridSpacing}>\n                                    <Grid item xs={12} sm={12} lg={8} md={8}>\n                                        <TextField name='client_email' id='client_email' fullWidth\n                                                   label='Email'\n                                                   value={formik.values.client_email}\n                                                   onChange={formik.handleChange}\n                                                   onBlur={checkIfClientEmailExists}\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n\n                        </Grid>\n                    </form>\n                </CardContent>\n            </SubCard>\n        </Grid>\n    </Grid>);\n};\n\nexport default ClientDetail;\n\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/review-board/referral/forms/case-presentation-form.js",["1338","1339","1340","1341","1342"],"import React from 'react';\n\n// material-ui\nimport {CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport MaskedInput from 'react-text-mask';\n\nimport {\n    setCasePresentationForm\n} from \"store/actions/reviewBoard/referralActions\";\n\nimport FileInput from '../../../common/file-input';\n\nconst CasePresentationForm = () => (\n    <SubCard title='Case Presentation Form'>\n        <CardContent>\n            <Grid container spacing={gridSpacing}>\n                <FileInput title='Case Management Presentation Sheet'\n                           fileType='TYPE_REVIEW_BOARD_REFERRAL'\n                           setDocumentUUID={setCasePresentationForm}\n                />\n            </Grid>\n        </CardContent>\n    </SubCard>\n);\n\nexport default CasePresentationForm;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/hooks/useAuth.js",["1343"],"import { useContext } from 'react';\r\n\r\n// auth provider\r\nimport FirebaseContext from 'contexts/FirebaseContext';\r\n// import Auth0Context from 'contexts/Auth0Context';\r\nimport JWTContext from 'contexts/JWTContext';\r\n\r\n// ===========================|| AUTH HOOKS ||=========================== //\r\n\r\nconst useAuth = () => useContext(JWTContext);\r\n\r\nexport default useAuth;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/constant.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/cards/MainCard.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/extended/AnimateButton.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/common/file-input.js",["1344","1345","1346","1347","1348","1349","1350","1351","1352","1353","1354","1355"],"import React from 'react';\n\n// material-ui\nimport {\n    CardContent,\n    Button,\n    Checkbox,\n    FormControlLabel,\n    Grid,\n    MenuItem,\n    TextField,\n    List,\n    ListItemIcon,\n    ListItemText\n} from '@material-ui/core';\n\n\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport MaskedInput from 'react-text-mask';\nimport LayersTwoToneIcon from '@material-ui/icons/LayersTwoTone';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport commonApi from \"store/api-calls/common\";\nimport ProgressCircularControlled from \"../../ui/ProgressCircularControlled\";\nimport {SNACKBAR_OPEN} from \"store/actionTypes\";\nimport ListItemButton from \"@material-ui/core/ListItemButton\";\n\n// Upload Document using Document API and set the document UUID using dispatch\n\nconst FileInput = ({title, setDocumentUUID, fileType}) => {\n    /*\n    * setDocumentUUID is a generic function.\n    * It is passed as parameter by the parent component.\n    * fileType - Type of the File to add a Document Object ( Document Add API )\n    * */\n    const [progressLoader, setProgressLoader] = React.useState(false);\n    const [uploadedDocumentData, setUploadedDocumentData] = React.useState({});\n    const [uploadedDocumentDisplayHidden, setUploadedDocumentDisplayHidden] = React.useState(true);\n\n    const dispatch = useDispatch();\n    // const uploadedDocuments = useSelector(store => store.caseManager.clientAssessment.add.assessment.uploaded_documents)\n\n    /*\n     * 1. Generic Upload function to create document object in Database\n     * 2. Document object returns UUID of the instance and stored to reducer.\n     * 3. UUID is added to reducer using dispatch Action sent as a prop to this component.\n     * @param event\n     * @returns {Promise<void>}\n     */\n    const uploadFile = async event => {\n        try {\n            setProgressLoader(true)\n            const file = event.currentTarget.files[0];\n            const response = await commonApi.uploadDocument(file, fileType);\n\n            if (response.status === 200) {\n                const {document_id: documentUUID, name: documentName, uploaded_at: uploadTime} = response.data\n                dispatch(setDocumentUUID(documentUUID))\n                setUploadedDocumentData(response.data)\n                setUploadedDocumentDisplayHidden(false)\n\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'File successfully uploaded.',\n                    variant: 'alert',\n                    alertSeverity: 'success', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: false\n                })\n            }\n        } catch (e) {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'File could not be uploaded. Please try again',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: false\n            })\n        }\n        setProgressLoader(false)\n    }\n\n    return (<Grid item xs={12} sm={12} lg={4} md={8}>\n        <SubCard title={title} secondary={<ProgressCircularControlled display={progressLoader}/>}>\n            <CardContent>\n                <Button\n                    variant='contained'\n                    component='label'\n                    startIcon={<LayersTwoToneIcon/>}\n                >\n                    Upload File\n                    <input\n                        type='file'\n                        onChange={event => uploadFile(event)}\n                        hidden\n                    />\n                </Button>\n\n                <List hidden={uploadedDocumentDisplayHidden}>\n                    <ListItemButton>\n                        <ListItemIcon>\n                            <DescriptionTwoToneIcon sx={{ fontSize: '1.3rem' }} />\n                        </ListItemIcon>\n                        <ListItemText primary={uploadedDocumentData.name} secondary={uploadedDocumentData.uploaded_at} />\n                    </ListItemButton>\n                </List>\n            </CardContent>\n        </SubCard>\n    </Grid>)\n};\n\nexport default FileInput;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/cards/SubCard.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/reviewBoard/referralActions.js",["1356"],"import * as actionTypes from 'store/actionTypes';\n\nexport const listReferralsByReviewBoardID = (responseData) => function (dispatch) {\n    dispatch(\n        {\n            type: actionTypes.REVIEW_BOARD_REFERRAL_LIST_CLIENT_REFERRALS,\n            data: {\n                ...responseData\n            }\n        }\n    )\n}\n\nexport const setReferralDetails = (values) => ({\n    type: actionTypes.REVIEW_BOARD_REFERRAL_SET_CLIENT_DETAIL,\n    data: {\n        ...values\n    }\n});\n\n\n/**\n * ===========================================\n * Referral Form upload actions\n * Currently consists of 4 types of forms.\n * ===========================================\n */\nexport const setEmpReferralRequestForm = (documentUUID) => ({\n    type: actionTypes.REVIEW_BOARD_REFERRAL_SET_FORM_FILE_EMP_REFERRAL_REQUEST,\n    data: documentUUID\n});\n\nexport const setFamiliarFacesSnatForm = (documentUUID) => ({\n    type: actionTypes.REVIEW_BOARD_REFERRAL_SET_FORM_FILE_FAMILIAR_FACES_SNAT,\n    data: documentUUID\n});\n\nexport const setFamiliarFacesSdhForm = (documentUUID) => ({\n    type: actionTypes.REVIEW_BOARD_REFERRAL_SET_FORM_FILE_FAMILIAR_FACES_FACES_SDH,\n    data: documentUUID\n});\n\nexport const setCasePresentationForm = (documentUUID) => ({\n    type: actionTypes.REVIEW_BOARD_REFERRAL_SET_FORM_FILE_CASE_PRESENTATION,\n    data: documentUUID\n});\n\n\n\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/forms/project-activities.js",[],["1357","1358","1359","1360","1361","1362"],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/forms/details.js",["1363","1364","1365","1366","1367"],"import React, {useEffect, useState} from 'react';\n\n// material-ui\nimport {CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport MaskedInput from 'react-text-mask';\n\nimport caseManagerApi from 'store/api-calls/case-manager';\nimport {setDailyWorkLoadDetails} from \"store/actions/caseManager/dailyWorkloadActions\";\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nconst Details = ({retrieveMode}) => {\n    const dailyWorkloadData = useSelector(state => state.caseManager.dailyWorkload.add)\n    const dispatch = useDispatch()\n    const [isRetrieveMode, setIsRetrieveMode] = useState(false);\n\n    useEffect(() => {\n        // Switch to retrieve mode if set in the props\n        if (retrieveMode) {\n            setIsRetrieveMode(true)\n        }\n    }, [retrieveMode])\n\n    const formik = useFormik({\n        initialValues: {\n            daily_workload_date: dailyWorkloadData.daily_workload_date,\n            service_recipient_travel: dailyWorkloadData.service_recipient_travel,\n            functional_center: dailyWorkloadData.functional_center,\n        },\n        validate: values => {\n            const valuesData = {\n                ...values\n            }\n\n            if (!retrieveMode) {\n                dispatch(setDailyWorkLoadDetails(valuesData));\n            }\n        }\n    });\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} sm={12} lg={6} md={6}>\n                <MaskedInput\n                    mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                    className=\"form-control\"\n                    label=\"Date\"\n                    guide={false}\n                    placeholder=\"YYYY-MM-DD\"\n                    onChange={formik.handleChange}\n                    disabled={isRetrieveMode}\n                    name='daily_workload_date'\n                    id=\"daily_workload_date\"\n                    value={formik.values.daily_workload_date}\n                    render={(ref, props) => <TextField\n                        fullWidth inputRef={ref} {...props}\n                        defaultValue=\"\"\n                    />}\n                />\n            </Grid>\n\n            <Grid item xs={8} sm={8} lg={8} md={8}>\n                <SubCard title='Time Spent'>\n                    <CardContent>\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item xs={8} sm={8} lg={8} md={8}>\n                                <MaskedInput\n                                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                                    className=\"form-control\"\n                                    label=\"Service Recipient Travel\"\n                                    guide={false}\n                                    id=\"service_recipient_travel\"\n                                    onChange={formik.handleChange}\n                                    name='service_recipient_travel'\n                                    disabled={isRetrieveMode}\n                                    value={formik.values.service_recipient_travel}\n                                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                       defaultValue=\"\"/>}\n                                />\n\n                            </Grid>\n                            <Grid item xs={8} sm={8} lg={8} md={8}>\n                                <MaskedInput\n                                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                                    className=\"form-control\"\n                                    label=\"Functional Center\"\n                                    guide={false}\n                                    id=\"functional_center\"\n                                    onChange={formik.handleChange}\n                                    disabled={isRetrieveMode}\n                                    name='functional_center'\n                                    value={formik.values.functional_center}\n                                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                       defaultValue=\"\"/>}\n                                />\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </SubCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default Details;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/forms/project-clinical-activities.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/forms/client-caseload.js",["1368","1369","1370"],"import React from 'react';\n\n// material-ui\nimport {CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport MaskedInput from 'react-text-mask';\n\n// redux\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setDailyWorkLoadDetails} from \"store/actions/caseManager/dailyWorkloadActions\";\nimport {useFormik} from \"formik\";\n\nconst ClientCaseload = () => {\n    const dailyWorkloadData = useSelector(state => state.caseManager.dailyWorkload.add)\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            client_caseload_casemanagement_number_clients: dailyWorkloadData.client_caseload_casemanagement_number_clients,\n            client_caseload_casemanagement_total_time: dailyWorkloadData.client_caseload_casemanagement_total_time,\n            client_caseload_regular_number_clients: dailyWorkloadData.client_caseload_regular_number_clients,\n            client_caseload_regular_total_time: dailyWorkloadData.client_caseload_regular_total_time\n        },\n        validate: values => {\n            const valuesData = {\n                ...values\n            }\n            dispatch(setDailyWorkLoadDetails(valuesData));\n        }\n    });\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} sm={8}>\n                <SubCard title='Case Management Clients'>\n                    <CardContent>\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item xs={12} sm={8}>\n                                <TextField type='number'\n                                           fullWidth\n                                           label='Number of Case Management Clients'\n                                           defaultValue={formik.values.client_caseload_casemanagement_number_clients}\n                                           onChange={formik.handleChange}\n                                           name='client_caseload_casemanagement_number_clients'\n                                           id=\"client_caseload_casemanagement_number_clients\"\n                                           value={formik.values.client_caseload_casemanagement_number_clients}\n                                />\n                            </Grid>\n\n                            <Grid item xs={12} sm={8}>\n                                <MaskedInput\n                                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                                    className=\"form-control\"\n                                    label=\"Total time spent\"\n                                    guide={false}\n                                    defaultValue={formik.values.client_caseload_casemanagement_total_time}\n                                    onChange={formik.handleChange}\n                                    name='client_caseload_casemanagement_total_time'\n                                    id=\"client_caseload_casemanagement_total_time\"\n                                    value={formik.values.client_caseload_casemanagement_total_time}\n                                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                       defaultValue=\"\"/>}\n                                />\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </SubCard>\n            </Grid>\n\n            <Grid item xs={12} sm={8}>\n                <SubCard title='Regular Clients'>\n                    <CardContent>\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item xs={12} sm={8}>\n                                <TextField type='number'\n                                           fullWidth\n                                           label='Number of Regular Clients'\n                                           defaultValue={formik.values.client_caseload_regular_number_clients}\n                                           onChange={formik.handleChange}\n                                           name='client_caseload_regular_number_clients'\n                                           id=\"client_caseload_regular_number_clients\"\n                                           value={formik.values.client_caseload_regular_number_clients}\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={8}>\n                                <MaskedInput\n                                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                                    className=\"form-control\"\n                                    label=\"Total time spent\"\n                                    guide={false}\n                                    defaultValue={formik.values.client_caseload_regular_total_time}\n                                    onChange={formik.handleChange}\n                                    name='client_caseload_regular_total_time'\n                                    id=\"client_caseload_regular_total_time\"\n                                    value={formik.values.client_caseload_regular_total_time}\n                                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                       defaultValue=\"\"/>}\n                                />\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </SubCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ClientCaseload;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/review-board/referral/forms/decision.js",["1371","1372","1373","1374","1375","1376","1377"],"import React from 'react';\n\n// material-ui\nimport {\n    CardContent,\n    FormControl,\n    FormControlLabel,\n    Grid,\n    Card,\n    Radio,\n    RadioGroup,\n    TextField,\n    Button\n} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport MaskedInput from 'react-text-mask';\nimport {useFormik, withFormik} from 'formik';\nimport * as Yup from 'yup';\nimport {makeStyles} from '@material-ui/styles';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {setReferralDetails} from \"store/actions/reviewBoard/referralActions\";\nimport reviewBoardApi from 'store/api-calls/review-board';\nimport JWTContext from \"contexts/JWTContext\";\nimport {SNACKBAR_OPEN} from \"../../../../../store/actionTypes\";\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        backgroundColor: theme.palette.mode === 'dark' ? theme.palette.dark[800] : theme.palette.primary.light,\n        marginBottom: '16px',\n        marginTop: '16px'\n    }\n}));\n\nconst CaseManagementDecision = ({setProgressLoader}) => {\n    const classes = useStyles();\n\n    const referralData = useSelector(state => state.reviewBoard.referrals.add.referralData)\n    const referralForms = useSelector(state => state.reviewBoard.referrals.add.referralForms)\n    const dispatch = useDispatch()\n    const jwtContext = React.useContext(JWTContext);\n    const {user} = jwtContext;\n\n\n    const formik = useFormik({\n        initialValues: {\n            decision: referralData.decision,\n            decision_detail: referralData.decision_detail\n        },\n        validate: (values) => {\n            const valuesData = {\n                ...referralData,\n                ...values\n            }\n            dispatch(setReferralDetails(valuesData))\n        },\n    });\n\n    const submitReferral = async event => {\n        setProgressLoader(true)\n        // eslint-disable-next-line camelcase\n        const {user_type_pk} = user;\n        const response = await reviewBoardApi.createReferral(referralData, referralForms, user_type_pk)\n\n        if (response && 'result' in response) {\n            if (response.result === true) {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Successfully created client referral',\n                    variant: 'alert',\n                    alertSeverity: 'success', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                })\n            }\n        } else {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Failed to create client referral. Please try again',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n            })\n        }\n\n        setProgressLoader(false)\n    }\n\n    const saveAndContinueReferral = event => {\n        console.log(event)\n    }\n\n    return (\n        <Card className={classes.card} title='Client Case Management Decision'>\n            <CardContent>\n                <form noValidate>\n                    <Grid container spacing={3} direction='column'>\n                        <Grid item>\n                            <FormControl>\n                                <RadioGroup\n                                    row\n                                    aria-label='case-management-decision-radio'\n                                    value={formik.values.decision}\n                                    name='decision'\n                                    id='decision'\n                                    onChange={(event) => {\n                                        formik.setFieldValue('decision', event.currentTarget.value)\n                                    }}\n                                >\n                                    <FormControlLabel value='ACTIVE_CLIENT' control={<Radio/>}\n                                                      label='Client is accepted in the Case Management Program'/>\n                                    <FormControlLabel value='DISCHARGED_CLIENT' control={<Radio/>}\n                                                      label='Client is refused for the Case Management Program'/>\n                                </RadioGroup>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <TextField\n                                fullWidth\n                                id='decision_detail'\n                                name='decision_detail'\n                                label='Reason for Client Refusal'\n                                placeholder='Enter reason here'\n                                multiline\n                                value={formik.values.decision_detail}\n                                onChange={formik.handleChange}\n                            />\n                        </Grid>\n\n                        <Grid item>\n                            <Grid container spacing={12}>\n                                <Grid item>\n                                    <Button color='primary' variant='contained' type='button' onClick={submitReferral}>\n                                        Submit\n                                    </Button>\n                                </Grid>\n\n                                <Grid item justifyContent='end'>\n                                    <Button color='primary' variant='contained' type='button'\n                                            onClick={saveAndContinueReferral}>\n                                        Save & Continue Later\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n\n                    </Grid>\n                </form>\n            </CardContent>\n        </Card>\n    );\n};\n\nexport default CaseManagementDecision;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/review-board/referral/forms/referral-details.js",["1378","1379","1380","1381","1382","1383","1384","1385","1386","1387","1388"],"import React from 'react';\n\n// material-ui\nimport {\n    Autocomplete,\n    Button,\n    CardContent,\n    Checkbox,\n    FormControlLabel,\n    Grid,\n    MenuItem,\n    TextField\n} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport MaskedInput from 'react-text-mask';\n\nimport CasePresentationForm from './case-presentation-form';\nimport OrganizationResponsible from './organization-responsible';\nimport {setReferralDetails} from \"store/actions/reviewBoard/referralActions\";\nimport {connect, useDispatch, useSelector} from \"react-redux\";\nimport {useFormik} from \"formik\";\n\n\nconst organizationResponsible = [\n    {label: 'Ability NB', id: 1},\n    {label: 'Addic', id: 2},\n    {label: 'Ambulance New Brunswick (ANB)', id: 3},\n    {label: 'Community Health Centers', id: 4},\n    {label: 'Specify: Nurse Practitioner or Family Physician', id: 5},\n    {label: 'Department of Veteran Affairs', id: 6},\n    {label: 'Emergency Department', id: 7},\n    {label: 'Extra-Mural Program', id: 8},\n    {label: 'Family Physician (Outside Community Health Centers)', id: 9},\n    {label: 'First Nations', id: 10},\n    {label: 'Homecare Agency', id: 11},\n    {label: 'Hospital (Inpatient)', id: 12},\n    {label: 'Nursing Home', id: 13},\n    {label: 'Public Health Services', id: 14},\n    {label: 'Residential Facility', id: 15},\n    {label: 'Self-referral or Referral by Family Member', id: 16},\n    {label: 'Social Development - Home Adaptations for Seniors Independence Program', id: 17},\n    {label: 'Social Development - Homeowner Repair Program', id: 18},\n    {label: 'Social Development - Housing Program', id: 19},\n    {label: 'Social Development - Long-Term Care Program', id: 20},\n    {label: 'Social Development - Mobility and Adaptive Equipment Loan Program', id: 21},\n    {label: 'Social Development - Social Assistance Program', id: 21},\n    {label: 'Volunteer Organizations', id: 22},\n    {label: 'Other', id: 23}\n];\n\nconst referralSourcesList = [\n    {label: 'Ability NB', id: 'referral_source_ability_nb'},\n    {label: 'Ambulatory Clinic (Outpatient)', id: 'referral_source_ambulatory_clinic_outpatient'},\n    {label: 'Ambulance New Brunswick (ANB)', id: 'referral_source_anb'},\n    {label: 'Community Health Centers', id: 'referral_source_community_health_centers'},\n    {\n        label: 'Specify: Nurse Practitioner or Family Physician',\n        id: 'referral_source_nurse_practitioner_family_physician'\n    },\n    {label: 'Department of Veteran Affairs', id: 'referral_source_department_of_veteran_affairs'},\n    {label: 'Emergency Department', id: 'referral_source_emergency_department'},\n    {label: 'Extra-Mural Program', id: 'referral_source_extra_mural_program'},\n    {label: 'Family Physician (Outside Community Health Centers)', id: 'referral_source_family_physician_outside'},\n    {label: 'First Nations', id: 'referral_source_first_nations'},\n    {label: 'Homecare Agency', id: 'referral_source_homecare_agency'},\n    {label: 'Hospital (Inpatient)', id: 'referral_source_hospital_inpatient'},\n    {label: 'Nursing Home', id: 'referral_source_nursing_home'},\n    {label: 'Public Health Services', id: 'referral_source_public_health_services'},\n    {label: 'Residential Facility', id: 'referral_source_residential_facility'},\n    {label: 'Self-referral or Referral by Family Member', id: 'referral_source_self_referral'},\n    {\n        label: 'Social Development - Home Adaptations for Seniors Independence Program',\n        id: 'referral_source_social_home_adaptations'\n    },\n    {label: 'Social Development - Homeowner Repair Program', id: 'referral_source_social_homeowner_repair'},\n    {label: 'Social Development - Housing Program', id: 'referral_source_social_housing_program'},\n    {label: 'Social Development - Long-Term Care Program', id: 'referral_source_social_long_term_care'},\n    {\n        label: 'Social Development - Mobility and Adaptive Equipment Loan Program',\n        id: 'referral_source_social_mobility_loan'\n    },\n    {label: 'Social Development - Social Assistance Program', id: 'referral_source_social_assistance'},\n    {label: 'Volunteer Organizations', id: 'referral_source_volunter_organizations'},\n    {label: 'Other', id: 'referral_source_other'}\n];\n\nconst referralOrganizationsList = [\n    {label: 'Ability NB', id: 1},\n    {label: 'Ambulatory Clinic (Outpatient)', id: 2},\n    {label: 'Ambulance New Brunswick (ANB)', id: 3},\n    {label: 'Community Health Centers', id: 4},\n    {label: 'Specify: Nurse Practitioner or Family Physician', id: 5},\n    {label: 'Department of Veteran Affairs', id: 6},\n    {label: 'Emergency Department', id: 7},\n    {label: 'Extra-Mural Program', id: 8},\n    {label: 'Family Physician (Outside Community Health Centers)', id: 9},\n    {label: 'First Nations', id: 10},\n    {label: 'Homecare Agency', id: 11},\n    {label: 'Hospital (Inpatient)', id: 12},\n    {label: 'Nursing Home', id: 13},\n    {label: 'Public Health Services', id: 14},\n    {label: 'Residential Facility', id: 15},\n    {label: 'Self-referral or Referral by Family Member', id: 16},\n    {label: 'Social Development - Home Adaptations for Seniors Independence Program', id: 17},\n    {label: 'Social Development - Homeowner Repair Program', id: 18},\n    {label: 'Social Development - Housing Program', id: 19},\n    {label: 'Social Development - Long-Term Care Program', id: 20},\n    {label: 'Social Development - Mobility and Adaptive Equipment Loan Program', id: 21},\n    {label: 'Social Development - Social Assistance Program', id: 21},\n    {label: 'Volunteer Organizations', id: 22},\n    {label: 'Other', id: 23}\n];\n\nconst caseDiscussionMembersPresentList = [\n    {label: 'Ability NB', id: 'case_discussion_ability_nb'},\n    {label: 'Addiction and Mental Health', id: 'case_discussion_addiction_mental_health'},\n    {label: 'Ambulance NB', id: 'case_discussion_ambulance_nb'},\n    {label: 'CCC Liaison Nurse', id: 'case_discussion_ccc_liaison_nurse'},\n    {label: 'Community Pharmacist', id: 'case_discussion_community_pharmacist'},\n    {label: 'Extra-Mural Program - Lead Nurse Case Manager', id: 'case_discussion_emp_lead_nurse_case_manager'},\n    {label: 'Extra-Mural Program - Nutritionist', id: 'case_discussion_emp_nutritionist'},\n    {label: 'Extra-Mural Program - Occupational Therapist', id: 'case_discussion_emp_occupational_therapist'},\n    {label: 'Extra-Mural Program - Physical Therapist', id: 'case_discussion_emp_physical_therapist'},\n    {label: 'Extra-Mural Program - Registered Nurse', id: 'case_discussion_emp_registered_nurse'},\n    {label: 'Extra-Mural Program - Respiratory Therapist', id: 'case_discussion_emp_respiratory_therapist'},\n    {label: 'Extra-Mural Program - Social Worker', id: 'case_discussion_emp_social_worker'},\n    {label: 'Extra-Mural Program - Speech & Language Therapist', id: 'case_discussion_emp_speech_language_therapist'},\n    {label: 'Extra-Mural Program - Other', id: 'case_discussion_emp_other'},\n    {label: 'Family physician', id: 'case_discussion_family_physician'},\n    {label: 'First Nations - First Nations Case Manager', id: 'case'},\n    {label: 'Horizon Health Network', id: 17},\n    {label: 'Nurse Practitioner', id: 18},\n    {label: 'Social Development - Home Adaptations for Seniors Independence Program', id: 19},\n    {label: 'Social Development - Homeowner Repair Program', id: 20},\n    {label: 'Social Development - Housing Program', id: 21},\n    {label: 'Social Development - Long-Term Care Program', id: 22},\n    {label: 'Social Development - Mobility and Adaptive Equipment Loan Program', id: 23},\n    {label: 'Social Development - Social Assistance Program', id: 24},\n    {label: 'Social Development - Other', id: 25},\n    {label: 'Others', id: 26}\n];\n\nconst ReviewReferralDetails = ({referralDetails, setReferralDetail}) => {\n    const referralData = useSelector(state => state.reviewBoard.referrals.add.referralData)\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            referral_date: referralData.referral_date,\n            date_of_case_discussion: referralData.date_of_case_discussion,\n\n            referral_source: referralData.referral_source,\n            referral_source_detail: referralData.referral_source_detail,\n\n            organizations_upon_referral: referralData.organizations_upon_referral,\n            organizations_upon_referral_detail: referralData.organizations_upon_referral_detail,\n\n            members_present_case_discussion: referralData.members_present_case_discussion,\n            members_present_case_discussion_detail: referralData.members_present_case_discussion_detail,\n\n            case_management_organization_responsible: referralData.case_management_organization_responsible,\n            case_management_organization_person_responsible: referralData.case_management_organization_person_responsible,\n        },\n        validate: values => {\n            const valuesData = {\n                ...referralData,\n                ...values\n            }\n            dispatch(setReferralDetails(valuesData));\n        }\n    });\n\n    return (\n        <form onSubmit={formik.handleSubmit} noValidate>\n            <Grid container spacing={gridSpacing}>\n                <Grid item xs={12} md={8} lg={4}>\n                    <MaskedInput\n                        mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                        className='form-control'\n                        label='Date of Referral'\n                        guide={false}\n                        value={formik.values.referral_date}\n                        id='referral_date'\n                        name='referral_date'\n                        onChange={formik.handleChange}\n                        render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}/>}\n                    />\n                </Grid>\n\n                <Grid item xs={12} md={8} lg={4}>\n                    <MaskedInput\n                        mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                        className='form-control'\n                        label='Date of Case Discussion'\n                        guide={false}\n                        value={formik.values.date_of_case_discussion}\n                        id='date_of_case_discussion'\n                        name='date_of_case_discussion'\n                        onChange={formik.handleChange}\n                        render={(ref, props) => <TextField fullWidth inputRef={ref} {...props} />}\n                    />\n                </Grid>\n\n                <Grid item xs={12} md={10} lg={6}>\n                    <SubCard title='Referral Source'>\n                        <CardContent>\n                            <Grid container spacing={gridSpacing}>\n                                <Grid item xs={12} sm={12} lg={12} md={12}>\n                                    <Autocomplete\n                                        disablePortal\n                                        options={referralSourcesList}\n                                        name='referral_source'\n                                        id='referral_source'\n                                        value={formik.values.referral_source}\n                                        onChange={(e, value) => {\n                                            formik.setFieldValue('referral_source', value)\n                                        }}\n                                        renderInput={(params) => <TextField {...params} label='Referral Source'/>}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </CardContent>\n                    </SubCard>\n                </Grid>\n\n                <Grid item xs={12} sm={10} lg={6}>\n                    <SubCard title='Organizations Involved Upon Referral'>\n                        <CardContent>\n                            <Grid container spacing={gridSpacing}>\n                                <Grid item xs={12} sm={12} lg={12} md={12}>\n                                    <Autocomplete\n                                        multiple\n                                        options={referralOrganizationsList}\n                                        value={formik.values.organizations_upon_referral}\n                                        getOptionLabel={(option) => option.label}\n                                        onChange={(e, value) => {\n                                            formik.setFieldValue('organizations_upon_referral', value)\n                                        }}\n                                        renderInput={(params) => <TextField {...params} label='Organizations Involved Upon Referral'/>}\n                                        name='organizations_upon_referral'\n                                        id='organizations_upon_referral'\n                                        sx={{\n                                            '& .MuiOutlinedInput-root': {\n                                                pr: '30px !important'\n                                            }\n                                        }}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </CardContent>\n                    </SubCard>\n                </Grid>\n\n                <Grid item xs={12} sm={10} lg={6}>\n                    <SubCard title='Members Present for Case Discussion'>\n                        <CardContent>\n                            <Grid container spacing={gridSpacing}>\n                                <Grid item xs={12} sm={12} lg={12} md={12}>\n                                    <Autocomplete\n                                        multiple\n                                        options={caseDiscussionMembersPresentList}\n                                        getOptionLabel={(option) => option.label}\n                                        value={formik.values.members_present_case_discussion}\n                                        name='members_present_case_discussion'\n                                        id='members_present_case_discussion'\n                                        renderInput={(params) => <TextField {...params} label='Members Present for Case Discussion' />}\n                                        onChange={(e, value) => {\n                                            formik.setFieldValue('members_present_case_discussion', value)\n                                        }}\n                                        sx={{\n                                            '& .MuiOutlinedInput-root': {\n                                                pr: '30px !important'\n                                            }\n                                        }}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </CardContent>\n                    </SubCard>\n                </Grid>\n\n\n                <Grid item xs={12} sm={10} lg={6}>\n                    <SubCard title='Organization responsible for Client Case Management'>\n                        <CardContent>\n                            <Grid container spacing={gridSpacing}>\n                                <Grid item xs={12} sm={12} lg={12} md={12}>\n                                    <Autocomplete\n                                        disablePortal\n                                        options={organizationResponsible}\n                                        name='case_management_organization_responsible'\n                                        value={formik.values.case_management_organization_responsible}\n                                        id='case_management_organization_responsible'\n                                        onChange={(e, value) => {\n                                            formik.setFieldValue('case_management_organization_responsible', value)\n                                        }}\n                                        renderInput={(params) => <TextField {...params} label=\"Organization\"/>}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </CardContent>\n                    </SubCard>\n                </Grid>\n\n            </Grid>\n        </form>\n    );\n};\n\nexport default ReviewReferralDetails;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/extended/Breadcrumbs.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Sidebar/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Header/index.js",["1389"],"import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// material-ui\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { Avatar, Box, ButtonBase } from '@material-ui/core';\r\n\r\n// project imports\r\nimport LogoSection from '../LogoSection';\r\nimport SearchSection from './SearchSection';\r\nimport LocalizationSection from './LocalizationSection';\r\nimport MobileSection from './MobileSection';\r\nimport ProfileSection from './ProfileSection';\r\nimport NotificationSection from './NotificationSection';\r\n\r\n// assets\r\nimport { IconMenu2 } from '@tabler/icons';\r\n\r\n// style constant\r\nconst useStyles = makeStyles((theme) => ({\r\n    grow: {\r\n        flexGrow: 1\r\n    },\r\n    headerAvatar: {\r\n        ...theme.typography.commonAvatar,\r\n        ...theme.typography.mediumAvatar,\r\n        transition: 'all .2s ease-in-out',\r\n        background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.secondary.light,\r\n        color: theme.palette.mode === 'dark' ? theme.palette.secondary.main : theme.palette.secondary.dark,\r\n        '&:hover': {\r\n            background: theme.palette.mode === 'dark' ? theme.palette.secondary.main : theme.palette.secondary.dark,\r\n            color: theme.palette.mode === 'dark' ? theme.palette.secondary.light : theme.palette.secondary.light\r\n        }\r\n    },\r\n    boxContainer: {\r\n        width: '228px',\r\n        display: 'flex',\r\n        [theme.breakpoints.down('md')]: {\r\n            width: 'auto'\r\n        }\r\n    }\r\n}));\r\n\r\n// ===========================|| MAIN NAVBAR / HEADER ||=========================== //\r\n\r\nconst Header = ({ handleLeftDrawerToggle }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <>\r\n            {/* logo & toggler button */}\r\n            <div className={classes.boxContainer}>\r\n                <Box component=\"span\" sx={{ display: { xs: 'none', md: 'block' }, flexGrow: 1 }}>\r\n                    <LogoSection />\r\n                </Box>\r\n                <ButtonBase sx={{ borderRadius: '12px', overflow: 'hidden' }}>\r\n                    <Avatar variant=\"rounded\" className={classes.headerAvatar} onClick={handleLeftDrawerToggle} color=\"inherit\">\r\n                        <IconMenu2 stroke={1.5} size=\"1.3rem\" />\r\n                    </Avatar>\r\n                </ButtonBase>\r\n            </div>\r\n\r\n            {/* header search */}\r\n            <SearchSection theme=\"light\" />\r\n            <div className={classes.grow} />\r\n            <div className={classes.grow} />\r\n\r\n            {/* live customization & localization\r\n            <Box sx={{ display: { xs: 'none', sm: 'block' } }}>\r\n                <LocalizationSection />\r\n            </Box>\r\n             */}\r\n\r\n            {/* notification & profile */}\r\n            <NotificationSection />\r\n            <ProfileSection />\r\n\r\n            {/* mobile header */}\r\n            <Box sx={{ display: { xs: 'block', sm: 'none' } }}>\r\n                <MobileSection />\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nHeader.propTypes = {\r\n    handleLeftDrawerToggle: PropTypes.func\r\n};\r\n\r\nexport default Header;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/hooks/useScriptRef.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/common/provider-specific-forms.js",["1390","1391","1392","1393","1394","1395"],"import React from 'react';\n\n// material-ui\nimport {CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport ProviderGenericForm from './provider-specific-forms/generic-form';\nimport FileInput from \"./file-input\";\n\n\n\nconst ProviderSpecificForms = ({providerSpecificFormAction, documentType}) => {\n\n    // TODO : Get PROVIDER_TYPE value from user profile\n    const PROVIDER_TYPE = 'PROVIDER_TYPE_NUTRITIONIST'\n\n    const getProviderTypeComponent = providerType => {\n        const providerSpecificForms = {\n            'PROVIDER_TYPE_NUTRITIONIST':\n                <ProviderGenericForm>\n                    <FileInput title='Clinical Nutrition Assessment'\n                               setDocumentUUID={providerSpecificFormAction}\n                               fileType={documentType}/>\n                </ProviderGenericForm>,\n            'PROVIDER_TYPE_OCCUPATIONAL_THERAPIST':\n                <ProviderGenericForm>\n                    <FileInput title='Occupational Therapy Assessment'\n                               setDocumentUUID={providerSpecificFormAction}\n                               fileType={documentType}/>\n                </ProviderGenericForm>,\n            'PROVIDER_TYPE_PHYSICAL_THERAPIST':\n                <ProviderGenericForm>\n                    <FileInput title='Physiotherapy Assessment'\n                               setDocumentUUID={providerSpecificFormAction}\n                               fileType={documentType}/>\n                </ProviderGenericForm>,\n            'PROVIDER_TYPE_REGISTERED_NURSE': false,\n            'PROVIDER_TYPE_RESPIRATORY_THERAPIST':\n                <ProviderGenericForm>\n                    <FileInput title='Respiratory Assessment'\n                               setDocumentUUID={providerSpecificFormAction}\n                               fileType={documentType}/>\n                </ProviderGenericForm>,\n            'PROVIDER_TYPE_SOCIAL_WORKER': false,\n            'PROVIDER_TYPE_SPEECH_LANGUAGE_THERAPIST':\n                <ProviderGenericForm>\n                    <FileInput title='Speech-Language Pathology Adult Assessment'\n                               setDocumentUUID={providerSpecificFormAction}\n                               fileType={documentType}/>\n                </ProviderGenericForm>\n        }\n\n        return providerSpecificForms[providerType];\n    }\n\n    return (<Grid container spacing={gridSpacing}>\n        <Grid item xs={12} sm={12} lg={12} md={12}>\n            <SubCard title='Provider Specific Assessment Forms'>\n                <CardContent>\n                    <div>\n                        {getProviderTypeComponent(PROVIDER_TYPE)}\n                    </div>\n                </CardContent>\n            </SubCard>\n        </Grid>\n    </Grid>)\n};\n\nexport default ProviderSpecificForms;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/common/assessment-forms.js",["1396","1397","1398","1399","1400","1401"],"import React from 'react';\n\n// material-ui\nimport {CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport FileInput from \"./file-input\";\n\nconst AssessmentForms = ({generalAssessmentFormAction, documentType}) => (\n    <Grid container spacing={gridSpacing}>\n        <Grid item xs={12} sm={12} lg={12} md={12}>\n            <SubCard title='Assessment Forms'>\n                <CardContent>\n                    <Grid container spacing={gridSpacing}>\n                        <FileInput title='EMP Progress Notes' setDocumentUUID={generalAssessmentFormAction}\n                                   fileType={documentType}/>\n                        <FileInput title='EMP Intake' setDocumentUUID={generalAssessmentFormAction}\n                                   fileType={documentType}/>\n                        <FileInput title='Safe Workplace Agreement' setDocumentUUID={generalAssessmentFormAction}\n                                   fileType={documentType}/>\n                        <FileInput title='Braden Scale' setDocumentUUID={generalAssessmentFormAction}\n                                   fileType={documentType}/>\n                        <FileInput title='Risk of Falls Assessment' setDocumentUUID={generalAssessmentFormAction}\n                                   fileType={documentType}/>\n                        <FileInput title='EMP Medication Profile' setDocumentUUID={generalAssessmentFormAction}\n                                   fileType={documentType}/>\n                        <FileInput title='Safe Use of Home Oxygen Patient Agreement'\n                                   setDocumentUUID={generalAssessmentFormAction} fileType={documentType}/>\n                        <FileInput title='Smoking Cessation Assessment' setDocumentUUID={generalAssessmentFormAction}\n                                   fileType={documentType}/>\n                        <FileInput title='Team Communication' setDocumentUUID={generalAssessmentFormAction}\n                                   fileType={documentType}/>\n                    </Grid>\n                </CardContent>\n            </SubCard>\n        </Grid>\n    </Grid>\n);\n\nexport default AssessmentForms;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/review-board/referral/forms/organization-responsible.js",["1402","1403","1404","1405","1406","1407","1408","1409","1410","1411","1412","1413"],"import React from 'react';\n\n// material-ui\nimport {  Autocomplete, Paper, InputAdornment, CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField } from '@material-ui/core';\n\n// project imports\nimport { gridSpacing } from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport MaskedInput from 'react-text-mask';\n\n// assets\nimport EmailTwoToneIcon from '@material-ui/icons/EmailTwoTone';\n\nconst referralSourcesList = [\n    { label: 'Ability NB', id: 1 },\n    { label: 'Addic', id: 2 },\n    { label: 'Ambulance New Brunswick (ANB)', id: 3 },\n    { label: 'Community Health Centers', id: 4 },\n    { label: 'Specify: Nurse Practitioner or Family Physician', id: 5 },\n    { label: 'Department of Veteran Affairs', id: 6 },\n    { label: 'Emergency Department', id: 7 },\n    { label: 'Extra-Mural Program', id: 8 },\n    { label: 'Family Physician (Outside Community Health Centers)', id: 9 },\n    { label: 'First Nations', id: 10 },\n    { label: 'Homecare Agency', id: 11 },\n    { label: 'Hospital (Inpatient)', id: 12 },\n    { label: 'Nursing Home', id: 13 },\n    { label: 'Public Health Services', id: 14 },\n    { label: 'Residential Facility', id: 15 },\n    { label: 'Self-referral or Referral by Family Member', id: 16 },\n    { label: 'Social Development - Home Adaptations for Seniors Independence Program', id: 17 },\n    { label: 'Social Development - Homeowner Repair Program', id: 18 },\n    { label: 'Social Development - Housing Program', id: 19 },\n    { label: 'Social Development - Long-Term Care Program', id: 20 },\n    { label: 'Social Development - Mobility and Adaptive Equipment Loan Program', id: 21 },\n    { label: 'Social Development - Social Assistance Program', id: 21 },\n    { label: 'Volunteer Organizations', id: 22 },\n    { label: 'Other', id: 23 }\n];\n\nconst OrganizationResponsible = ({name, id, formik}) => {\n    const handleChange = (e, value) => {\n        const {id, label} = value;\n        formik.setFieldValue(name, id)\n    }\n\n    return <SubCard title='Organization responsible for Client Case Management'>\n        <CardContent>\n            <Grid container spacing={gridSpacing}>\n                <Grid item xs={12} sm={12} lg={12} md={12}>\n                    <Autocomplete\n                        disablePortal\n                        options={referralSourcesList}\n                        defaultValue={referralSourcesList[0]}\n                        name={name}\n                        id={id}\n                        onChange={handleChange}\n                        renderInput={(params) => <TextField {...params} label=\"Organization\"/>}\n                    />\n                </Grid>\n            </Grid>\n        </CardContent>\n    </SubCard>\n};\n\nexport default OrganizationResponsible;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/review-board/referral/forms/referral-source.js",["1414","1415","1416","1417","1418","1419","1420","1421","1422","1423","1424","1425"],"import React from 'react';\n\n// material-ui\nimport {\n    Autocomplete,\n    Paper,\n    InputAdornment,\n    CardContent,\n    Checkbox,\n    FormControlLabel,\n    Grid,\n    MenuItem,\n    TextField\n} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport MaskedInput from 'react-text-mask';\n\n// assets\nimport EmailTwoToneIcon from '@material-ui/icons/EmailTwoTone';\n\nconst referralSourcesList = [\n    {label: 'Ability NB', id: 'referral_source_ability_nb'},\n    {label: 'Ambulatory Clinic (Outpatient)', id: 'referral_source_ambulatory_clinic_outpatient'},\n    {label: 'Ambulance New Brunswick (ANB)', id: 'referral_source_anb'},\n    {label: 'Community Health Centers', id: 'referral_source_community_health_centers'},\n    {label: 'Specify: Nurse Practitioner or Family Physician', id: 'referral_source_nurse_practitioner_family_physician'},\n    {label: 'Department of Veteran Affairs', id: 'referral_source_department_of_veteran_affairs'},\n    {label: 'Emergency Department', id: 'referral_source_emergency_department'},\n    {label: 'Extra-Mural Program', id: 'referral_source_extra_mural_program'},\n    {label: 'Family Physician (Outside Community Health Centers)', id: 'referral_source_family_physician_outside'},\n    {label: 'First Nations', id: 'referral_source_first_nations'},\n    {label: 'Homecare Agency', id: 'referral_source_homecare_agency'},\n    {label: 'Hospital (Inpatient)', id: 'referral_source_hospital_inpatient'},\n    {label: 'Nursing Home', id: 'referral_source_nursing_home'},\n    {label: 'Public Health Services', id: 'referral_source_public_health_services'},\n    {label: 'Residential Facility', id: 'referral_source_residential_facility'},\n    {label: 'Self-referral or Referral by Family Member', id: 'referral_source_self_referral'},\n    {label: 'Social Development - Home Adaptations for Seniors Independence Program', id: 'referral_source_social_home_adaptations'},\n    {label: 'Social Development - Homeowner Repair Program', id: 'referral_source_social_homeowner_repair'},\n    {label: 'Social Development - Housing Program', id: 'referral_source_social_housing_program'},\n    {label: 'Social Development - Long-Term Care Program', id: 'referral_source_social_long_term_care'},\n    {label: 'Social Development - Mobility and Adaptive Equipment Loan Program', id: 'referral_source_social_mobility_loan'},\n    {label: 'Social Development - Social Assistance Program', id: 'referral_source_social_assistance'},\n    {label: 'Volunteer Organizations', id: 'referral_source_volunter_organizations'},\n    {label: 'Other', id: 'referral_source_other'}\n];\n\nconst ReferralSource = ({name, id, formik}) => {\n    const handleChange = (e, value) => {\n        const {id, label} = value;\n        formik.setFieldValue(\"referralSource\", id)\n    }\n\n    return <SubCard title='Source of Referral'>\n        <CardContent>\n            <Grid container spacing={gridSpacing}>\n                <Grid item xs={12} sm={12} lg={12} md={12}>\n                    <Autocomplete\n                        disablePortal\n                        options={referralSourcesList}\n                        defaultValue={referralSourcesList[0]}\n                        name={name}\n                        id={id}\n                        onChange={handleChange}\n                        renderInput={(params) => <TextField {...params} label=\"Referral Source\"/>}\n                    />\n                </Grid>\n            </Grid>\n        </CardContent>\n    </SubCard>\n};\n\nexport default ReferralSource;\n",["1426","1427","1428","1429","1430","1431"],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Header/NotificationSection/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Header/ProfileSection/index.js",["1432","1433","1434","1435","1436","1437"],"import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n// material-ui\r\nimport { makeStyles, useTheme } from '@material-ui/styles';\r\nimport {\r\n    Avatar,\r\n    Card,\r\n    CardContent,\r\n    Chip,\r\n    ClickAwayListener,\r\n    Divider,\r\n    Grid,\r\n    InputAdornment,\r\n    List,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    OutlinedInput,\r\n    Paper,\r\n    Popper,\r\n    Switch,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport ListItemButton from '@material-ui/core/ListItemButton';\r\n\r\n// third-party\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport Transitions from 'ui-component/extended/Transitions';\r\nimport UpgradePlanCard from './UpgradePlanCard';\r\nimport useAuth from 'hooks/useAuth';\r\n\r\n// assets\r\nimport { IconLogout, IconSearch, IconSettings } from '@tabler/icons';\r\nimport User1 from 'assets/images/users/user-round.svg';\r\nimport JWTContext from \"contexts/JWTContext\";\r\nimport {lightGreen} from \"@material-ui/core/colors\";\r\n\r\n// style const\r\nconst useStyles = makeStyles((theme) => ({\r\n    navContainer: {\r\n        width: '100%',\r\n        maxWidth: '350px',\r\n        minWidth: '300px',\r\n        backgroundColor: theme.palette.background.paper,\r\n        borderRadius: '10px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            minWidth: '100%'\r\n        }\r\n    },\r\n    headerAvatar: {\r\n        cursor: 'pointer',\r\n        ...theme.typography.mediumAvatar,\r\n        margin: '8px 0 8px 8px !important'\r\n    },\r\n    profileChip: {\r\n        height: '48px',\r\n        alignItems: 'center',\r\n        borderRadius: '27px',\r\n        transition: 'all .2s ease-in-out',\r\n        borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light,\r\n        backgroundColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light,\r\n        '&[aria-controls=\"menu-list-grow\"], &:hover': {\r\n            borderColor: theme.palette.primary.main,\r\n            background: `${theme.palette.primary.main} !important`,\r\n            color: theme.palette.primary.light,\r\n            '& svg': {\r\n                stroke: theme.palette.primary.light\r\n            }\r\n        }\r\n    },\r\n    profileLabel: {\r\n        lineHeight: 0,\r\n        padding: '12px'\r\n    },\r\n    listItem: {\r\n        marginTop: '5px'\r\n    },\r\n    cardContent: {\r\n        padding: '16px !important'\r\n    },\r\n    card: {\r\n        backgroundColor: theme.palette.mode === 'dark' ? theme.palette.dark[800] : theme.palette.primary.light,\r\n        marginBottom: '16px',\r\n        marginTop: '16px'\r\n    },\r\n    searchControl: {\r\n        width: '100%',\r\n        paddingRight: '8px',\r\n        paddingLeft: '16px',\r\n        marginBottom: '16px',\r\n        marginTop: '16px'\r\n    },\r\n    startAdornment: {\r\n        fontSize: '1rem',\r\n        color: theme.palette.grey[500]\r\n    },\r\n    flex: {\r\n        display: 'flex'\r\n    },\r\n    name: {\r\n        marginLeft: '2px',\r\n        fontWeight: 400\r\n    },\r\n    ScrollHeight: {\r\n        height: '100%',\r\n        maxHeight: 'calc(100vh - 250px)',\r\n        overflowX: 'hidden'\r\n    },\r\n    badgeWarning: {\r\n        backgroundColor: theme.palette.mode === 'dark' ? theme.palette.dark.dark : theme.palette.warning.dark,\r\n        color: '#fff'\r\n    }\r\n}));\r\n\r\n// ===========================|| PROFILE MENU ||=========================== //\r\n\r\nconst USER_TYPES_MAP = {\r\n    'TYPE_CLIENT': 'Client',\r\n    'TYPE_CASE_MANAGER': 'Case Manager',\r\n    'TYPE_REVIEW_BOARD': 'Review Board',\r\n    'TYPE_COMMUNITY_PARAMEDIC': 'Community Paramedic',\r\n    'TYPE_CLINICIAN': 'Clinician',\r\n}\r\n\r\nconst ProfileSection = () => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const customization = useSelector((state) => state.customization);\r\n    const jwtContext = React.useContext(JWTContext);\r\n    // const {user: {fullname, user_type}} = jwtContext\r\n    // const user_type_map_value = USER_TYPES_MAP[user_type]\r\n    const fullname = 'User'\r\n    const user_type_map_value = '';\r\n\r\n\r\n    const [sdm, setSdm] = React.useState(true);\r\n    const [value, setValue] = React.useState('');\r\n    const [notification, setNotification] = React.useState(false);\r\n    const [selectedIndex] = React.useState(1);\r\n    const { logout } = useAuth();\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef(null);\r\n    const handleLogout = async () => {\r\n        try {\r\n            await logout();\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n    };\r\n\r\n    const handleToggle = () => setOpen((prevOpen) => !prevOpen);\r\n    const handleClose = (event) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n    const prevOpen = React.useRef(open);\r\n    React.useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current.focus();\r\n        }\r\n\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n    return (\r\n        <>\r\n            <Chip\r\n                classes={{ label: classes.profileLabel }}\r\n                className={classes.profileChip}\r\n                label={<IconSettings stroke={1.5} size=\"1.5rem\" color={theme.palette.primary.main} />}\r\n                variant=\"outlined\"\r\n                ref={anchorRef}\r\n                aria-controls={open ? 'menu-list-grow' : undefined}\r\n                aria-haspopup=\"true\"\r\n                onClick={handleToggle}\r\n                color=\"primary\"\r\n            />\r\n            <Popper\r\n                placement=\"bottom-end\"\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                popperOptions={{\r\n                    modifiers: [\r\n                        {\r\n                            name: 'offset',\r\n                            options: {\r\n                                offset: [0, 14]\r\n                            }\r\n                        }\r\n                    ]\r\n                }}\r\n            >\r\n                {({ TransitionProps }) => (\r\n                    <Transitions position=\"top-right\" in={open} {...TransitionProps}>\r\n                        <Paper>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>\r\n                                    <CardContent className={classes.cardContent}>\r\n                                        <Grid container direction=\"column\" spacing={0}>\r\n                                            <Grid item className={classes.flex}>\r\n                                                <Typography variant=\"h4\">Hello,</Typography>\r\n                                                <Typography component=\"span\" variant=\"h4\" className={classes.name}>\r\n                                                    {fullname}\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid item>\r\n                                                <Typography variant=\"subtitle2\">\r\n                                                    {user_type_map_value}\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <OutlinedInput\r\n                                            className={classes.searchControl}\r\n                                            id=\"input-search-profile\"\r\n                                            value={value}\r\n                                            onChange={(e) => setValue(e.target.value)}\r\n                                            placeholder=\"Search profile options\"\r\n                                            startAdornment={\r\n                                                <InputAdornment position=\"start\">\r\n                                                    <IconSearch stroke={1.5} size=\"1.3rem\" className={classes.startAdornment} />\r\n                                                </InputAdornment>\r\n                                            }\r\n                                            aria-describedby=\"search-helper-text\"\r\n                                            inputProps={{\r\n                                                'aria-label': 'weight'\r\n                                            }}\r\n                                        />\r\n                                        <Divider />\r\n                                        <PerfectScrollbar className={classes.ScrollHeight}>\r\n                                            <Divider />\r\n                                            <Card className={classes.card}>\r\n                                                <CardContent>\r\n                                                    <Grid container spacing={3} direction=\"column\">\r\n                                                        <Grid item>\r\n                                                            <Grid item container alignItems=\"center\" justifyContent=\"space-between\">\r\n                                                                <Grid item>\r\n                                                                    <Typography variant=\"subtitle1\">Start DND Mode</Typography>\r\n                                                                </Grid>\r\n                                                                <Grid item>\r\n                                                                    <Switch\r\n                                                                        color=\"primary\"\r\n                                                                        checked={sdm}\r\n                                                                        onChange={(e) => setSdm(e.target.checked)}\r\n                                                                        name=\"sdm\"\r\n                                                                        size=\"small\"\r\n                                                                    />\r\n                                                                </Grid>\r\n                                                            </Grid>\r\n                                                        </Grid>\r\n                                                        <Grid item>\r\n                                                            <Grid item container alignItems=\"center\" justifyContent=\"space-between\">\r\n                                                                <Grid item>\r\n                                                                    <Typography variant=\"subtitle1\">Allow Notifications</Typography>\r\n                                                                </Grid>\r\n                                                                <Grid item>\r\n                                                                    <Switch\r\n                                                                        checked={notification}\r\n                                                                        onChange={(e) => setNotification(e.target.checked)}\r\n                                                                        name=\"sdm\"\r\n                                                                        size=\"small\"\r\n                                                                    />\r\n                                                                </Grid>\r\n                                                            </Grid>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </CardContent>\r\n                                            </Card>\r\n                                            <Divider />\r\n                                            <List component=\"nav\" className={classes.navContainer}>\r\n                                                <ListItemButton\r\n                                                    className={classes.listItem}\r\n                                                    sx={{ borderRadius: `${customization.borderRadius}px` }}\r\n                                                    selected={selectedIndex === 4}\r\n                                                    onClick={handleLogout}\r\n                                                >\r\n                                                    <ListItemIcon>\r\n                                                        <IconLogout stroke={1.5} size=\"1.3rem\" />\r\n                                                    </ListItemIcon>\r\n                                                    <ListItemText primary={<Typography variant=\"body2\">Logout</Typography>} />\r\n                                                </ListItemButton>\r\n                                            </List>\r\n                                        </PerfectScrollbar>\r\n                                    </CardContent>\r\n                                </MainCard>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Transitions>\r\n                )}\r\n            </Popper>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProfileSection;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Header/MobileSection/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Header/SearchSection/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Header/LocalizationSection/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/LogoSection/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Sidebar/MenuList/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Header/NotificationSection/NotificationList.js",["1438","1439","1440","1441","1442","1443","1444"],"import React from 'react';\r\n\r\n// material-ui\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport {\r\n    Avatar,\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    Chip,\r\n    Divider,\r\n    Grid,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemSecondaryAction,\r\n    ListItemText,\r\n    Stack,\r\n    Typography\r\n} from '@material-ui/core';\r\n\r\n// assets\r\nimport { IconBrandTelegram, IconBuildingStore, IconMailbox, IconPhoto } from '@tabler/icons';\r\nimport User1 from 'assets/images/users/user-round.svg';\r\n\r\n// style constant\r\nconst useStyles = makeStyles((theme) => ({\r\n    navContainer: {\r\n        width: '100%',\r\n        maxWidth: '330px',\r\n        paddingTop: 0,\r\n        paddingBottom: 0,\r\n        borderRadius: '10px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            maxWidth: '300px'\r\n        }\r\n    },\r\n    listAction: {\r\n        top: '22px'\r\n    },\r\n    actionColor: {\r\n        color: theme.palette.grey[500]\r\n    },\r\n\r\n    listItem: {\r\n        padding: 0\r\n    },\r\n    sendIcon: {\r\n        marginLeft: '8px',\r\n        marginTop: '-3px'\r\n    },\r\n    listDivider: {\r\n        marginTop: 0,\r\n        marginBottom: 0\r\n    },\r\n    listChipError: {\r\n        color: theme.palette.orange.dark,\r\n        backgroundColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.orange.light,\r\n        height: '24px',\r\n        padding: '0 6px',\r\n        marginRight: '5px'\r\n    },\r\n    listChipWarning: {\r\n        color: theme.palette.warning.dark,\r\n        backgroundColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.warning.light,\r\n        height: '24px',\r\n        padding: '0 6px'\r\n    },\r\n    listChipSuccess: {\r\n        color: theme.palette.success.dark,\r\n        backgroundColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.success.light,\r\n        height: '24px',\r\n        padding: '0 6px'\r\n    },\r\n    listAvatarSuccess: {\r\n        color: theme.palette.success.dark,\r\n        backgroundColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.success.light,\r\n        border: theme.palette.mode === 'dark' ? '1px solid' : 'none',\r\n        borderColor: theme.palette.success.main\r\n    },\r\n    listAvatarPrimary: {\r\n        color: theme.palette.primary.dark,\r\n        backgroundColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light,\r\n        border: theme.palette.mode === 'dark' ? '1px solid' : 'none',\r\n        borderColor: theme.palette.primary.main\r\n    },\r\n    listContainer: {\r\n        paddingLeft: '56px'\r\n    },\r\n    uploadCard: {\r\n        backgroundColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.secondary.light\r\n    },\r\n    paddingBottom: {\r\n        paddingBottom: '16px'\r\n    },\r\n    itemAction: {\r\n        cursor: 'pointer',\r\n        padding: '16px',\r\n        '&:hover': {\r\n            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light\r\n        }\r\n    }\r\n}));\r\n\r\n// ===========================|| NOTIFICATION LIST ITEM ||=========================== //\r\n\r\nconst NotificationList = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <List className={classes.navContainer}>\r\n            <div className={classes.itemAction}>\r\n                <ListItem alignItems=\"center\" className={classes.listItem}>\r\n                    <ListItemAvatar>\r\n                        <Avatar alt=\"John Doe\" src={User1} />\r\n                    </ListItemAvatar>\r\n                    <ListItemText primary={<Typography variant=\"subtitle1\">John Doe</Typography>} />\r\n                    <ListItemSecondaryAction className={classes.listAction}>\r\n                        <Grid container justifyContent=\"flex-end\">\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"caption\" display=\"block\" gutterBottom className={classes.actionColor}>\r\n                                    2 min ago\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </ListItemSecondaryAction>\r\n                </ListItem>\r\n                <Grid container direction=\"column\" className={classes.listContainer}>\r\n                    <Grid item xs={12} className={classes.paddingBottom}>\r\n                        <Typography variant=\"subtitle2\">It is a long established fact that a reader will be distracted</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container>\r\n                            <Grid item>\r\n                                <Chip label=\"Unread\" className={classes.listChipError} />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Chip label=\"New\" className={classes.listChipWarning} />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n            <Divider className={classes.listDivider} />\r\n            <div className={classes.itemAction}>\r\n                <ListItem alignItems=\"center\" className={classes.listItem}>\r\n                    <ListItemAvatar>\r\n                        <Avatar className={classes.listAvatarSuccess}>\r\n                            <IconBuildingStore stroke={1.5} size=\"1.3rem\" />\r\n                        </Avatar>\r\n                    </ListItemAvatar>\r\n                    <ListItemText primary={<Typography variant=\"subtitle1\">Store Verification Done</Typography>} />\r\n                    <ListItemSecondaryAction className={classes.listAction}>\r\n                        <Grid container justifyContent=\"flex-end\">\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"caption\" display=\"block\" gutterBottom className={classes.actionColor}>\r\n                                    2 min ago\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </ListItemSecondaryAction>\r\n                </ListItem>\r\n                <Grid container direction=\"column\" className={classes.listContainer}>\r\n                    <Grid item xs={12} className={classes.paddingBottom}>\r\n                        <Typography variant=\"subtitle2\">We have successfully received your request.</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container>\r\n                            <Grid item>\r\n                                <Chip label=\"Unread\" className={classes.listChipError} />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default NotificationList;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Header/ProfileSection/UpgradePlanCard.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/utils/route-guard/GuestGuard.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/extended/Transitions.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Sidebar/MenuList/NavGroup/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MinimalLayout/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Sidebar/MenuList/NavCollapse/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/MainLayout/Sidebar/MenuList/NavItem/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/case-manager/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/case-manager/prepare-menu-items.js",["1445"],"import React from 'react';\r\nimport menuUtils from \"../common/utils\";\r\nimport menuData from './json/menu-items.json';\r\n\r\nexport default menuData.roles['case-manager'].map(menuUtils.makeMenuItems);\r\n\r\n\r\n\r\n\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/common/common-menu-items.js",["1446"],"import React from 'react';\n\nimport menuData from './json/menu-items.json';\nimport menuUtils from \"./utils\";\n\nexport default menuData.roles.common.map(menuUtils.makeMenuItems);\n\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/review-board/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/review-board/prepare-menu-items.js",["1447"],"import React from 'react';\r\n\r\nimport menuData from './json/menu-items.json';\r\nimport menuUtils from \"../common/utils\";\r\n\r\nconst reviewBoardMenuItems = menuData.roles['review-board'].map(menuUtils.makeMenuItems);\r\nexport default reviewBoardMenuItems;\r\n\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-calls/review-board.js",["1448"],"import axios from './axios-client';\n\n/*\n* API Method Naming Convention:\n* 1. List API - listMethodName()\n* 2. Detail API - retrieveMethodName()\n* 3. Update - updateMethodName()\n* */\nconst urls = {\n    'listReferralsByReviewBoardID': 'review-board/referral'\n}\n\nexport default {\n    async createReferral(referralData, referralForms, reviewBoardUser) {\n        try {\n            // Standardize organizations\n            const organizationValues = referralData.organizations_upon_referral.map(organization => organization.label)\n            referralData.organizations_upon_referral = organizationValues\n\n            // Standardize members\n            const membersValues = referralData.members_present_case_discussion.map(members => members.label)\n            referralData.members_present_case_discussion = membersValues\n\n            // Standardize referral source\n            referralData.referral_source = referralData.referral_source.label\n            referralData.case_management_organization_responsible = referralData.case_management_organization_responsible.label\n            referralData.review_board_user = reviewBoardUser\n\n            const formData = {\n                \"data\": {\n                    ...referralData\n                },\n                \"referral_forms\": {\n                    ...referralForms\n                }\n            }\n\n            const response = await axios.post('review-board/referral-create', formData);\n            return response.data;\n        } catch (error) {\n            return error.response;\n        }\n    },\n\n    async listReferralsByReviewBoardID(reviewBoardID) {\n        try {\n            const response = await axios.get(`review-board/${reviewBoardID}/referral`);\n            return response.data.data.results;\n        } catch (error) {\n            return error.response;\n        }\n    },\n\n    async listReferrals() {\n        try {\n            const response = await axios.get('review-board/referral');\n            return response.data;\n        } catch (error) {\n            return error.response;\n        }\n    },\n\n    async retrieveReferral(referralID) {\n        try {\n            referralID = '383f252a-5216-4aa2-b2fc-def96faae629';\n            const response = await axios.get(`review-board/referral/${referralID}`);\n            return response.data;\n        } catch (error) {\n            return error.response;\n        }\n    },\n\n    async updateReferral(referralID, formData) {\n        formData = {\n            \"client_first_name\": \"Referral\",\n            \"client_last_name\": \"Test\",\n            \"client_email\": \"referral.test@ccc.com\",\n\n            \"review_board_user\": \"9ac96e2c-2694-487e-9bab-d87f3bc21bcf\",\n            \"referral_date\": \"2021-10-05\",\n\n            \"referral_source\": \"Ability Updated\",\n            \"referral_source_detail\": \"\",\n\n            \"organizations_upon_referral\": [\"Ability NB\", \"Ambulatory Clinic\"],\n            \"organizations_upon_referral_detail\": \"\",\n\n            \"date_of_case_discussion\": \"2021-10-05\",\n\n            \"members_present_case_discussion\": [\"Ability NB\", \"Ambulatory Clinic\"],\n            \"members_present_case_discussion_detail\": \"\",\n\n            \"case_management_organization_responsible\": \"Ability NB\",\n            \"case_management_organization_person_responsible\": \"Manager Ability NB\",\n\n            \"decision\": \"POTENTIAL_CLIENT\",\n            \"decision_detail\": \"Client not accepted yet.\",\n            \"referral_forms\": {\n                \"emp_referral_request\": [\"20ddfbf8-35ae-48eb-8e0b-32c586355d2c\"],\n                \"familiar_faces_snat\": [\"20ddfbf8-35ae-48eb-8e0b-32c586355d2c\"],\n                \"familiar_faces_sdh\": [\"20ddfbf8-35ae-48eb-8e0b-32c586355d2c\"]\n            }\n        }\n\n        try {\n            referralID = '383f252a-5216-4aa2-b2fc-def96faae629';\n            const response = await axios.put(`review-board/referral/${referralID}`, formData);\n            return response.data;\n        } catch (error) {\n            return error.response;\n        }\n    }\n}\n\n\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-calls/axios-client.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/review-board/referral/add-referral.js",["1449","1450","1451","1452","1453","1454","1455","1456"],"import PropTypes from 'prop-types';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\n\n// material-ui\nimport { makeStyles } from '@material-ui/styles';\nimport { Button, CardActions, CardContent, Divider, Grid, Tab, Tabs, Typography } from '@material-ui/core';\n\n// project imports\nimport ReviewReferralDetails from './forms/referral-details';\nimport CaseManagementDecision from './forms/decision';\nimport ClientDetail from './forms/client-detail';\nimport ReferralForms from './forms/referral-forms';\nimport CasePresentationForm from './forms/case-presentation-form';\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport { gridSpacing } from 'store/constant';\n\nimport { Form, Field, ErrorMessage, useFormik } from 'formik';\nimport * as Yup from 'yup';\n\n\n// assets\nimport PersonOutlineTwoToneIcon from '@material-ui/icons/PersonOutlineTwoTone';\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\nimport CreditCardTwoToneIcon from '@material-ui/icons/CreditCardTwoTone';\nimport VpnKeyTwoToneIcon from '@material-ui/icons/VpnKeyTwoTone';\nimport ProgressCircularControlled from \"../../../ui/ProgressCircularControlled\";\n\n\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    profileTab: {\n        '& .MuiTabs-flexContainer': {\n            borderBottom: 'none'\n        },\n        '& button': {\n            color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[600],\n            minHeight: 'auto',\n            minWidth: '100%',\n            padding: '12px 16px',\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n            textAlign: 'left',\n            justifyContent: 'flex-start'\n        },\n        '& button.Mui-selected': {\n            color: theme.palette.primary.main,\n            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50]\n        },\n        '& button > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px',\n            marginTop: '10px',\n            height: '20px',\n            width: '20px'\n        },\n        '& button > div > span': {\n            display: 'block'\n        },\n        '& > div > span': {\n            display: 'none'\n        }\n    },\n    cardPanels: {\n        borderLeft: '1px solid',\n        borderLeftColor: theme.palette.mode === 'dark' ? '#333d5e' : '#eeeeee',\n        height: '100%'\n    }\n}));\n\n// tabs\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div role='tabpanel' hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && <div>{children}</div>}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n// tabs option\nconst tabsOption = [\n    {\n        label: 'Client',\n        icon: <DescriptionTwoToneIcon />,\n        caption: 'Enter Client Details'\n    },\n    {\n        label: 'Referral Details',\n        icon: <DescriptionTwoToneIcon />,\n        caption: 'Add Referral Details'\n    },\n    {\n        label: 'Referral Forms',\n        icon: <DescriptionTwoToneIcon />,\n        caption: 'Upload Referral Forms'\n    },\n    {\n        label: 'Case Presentation Form',\n        icon: <DescriptionTwoToneIcon />,\n        caption: 'Upload the Presentation Form'\n    },\n    {\n        label: 'Decision',\n        icon: <DescriptionTwoToneIcon />,\n        caption: 'Choose Client Referral Decision'\n    }\n];\n\n// ===========================|| PROFILE 2 ||=========================== //\n\nconst ReviewBoardReferralCreate = () => {\n    const classes = useStyles();\n    const customization = useSelector((state) => state.customization);\n    const [value, setValue] = React.useState(0);\n    const [progressLoader, setProgressLoader] = React.useState(false);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12}>\n                <MainCard title='Client Referral' content={false} secondary={<ProgressCircularControlled display={progressLoader}/>}>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={12} lg={3}>\n                            <CardContent>\n                                <Tabs\n                                    value={value}\n                                    onChange={handleChange}\n                                    orientation='vertical'\n                                    className={classes.profileTab}\n                                    variant='scrollable'\n                                    sx={{\n                                        '& button': {\n                                            borderRadius: `${customization.borderRadius}px`\n                                        }\n                                    }}\n                                >\n                                    {tabsOption.map((tab, index) => (\n                                        <Tab\n                                            key={index}\n                                            icon={tab.icon}\n                                            label={\n                                                <Grid container direction='column'>\n                                                    <Typography sx={{ textTransform: 'capitalize' }} variant='subtitle1'\n                                                                color='inherit'>\n                                                        {tab.label}\n                                                    </Typography>\n                                                    <Typography component='div' variant='caption'\n                                                                sx={{ textTransform: 'capitalize' }}>\n                                                        {tab.caption}\n                                                    </Typography>\n                                                </Grid>\n                                            }\n                                            {...a11yProps(index)}\n                                        />\n                                    ))}\n                                </Tabs>\n                            </CardContent>\n                        </Grid>\n                        <Grid item xs={12} lg={9}>\n                            <CardContent className={classes.cardPanels}>\n                                <TabPanel value={value} index={0}>\n                                    <ClientDetail/>\n                                </TabPanel>\n                                <TabPanel value={value} index={1}>\n                                    <ReviewReferralDetails />\n                                </TabPanel>\n                                <TabPanel value={value} index={2}>\n                                    <ReferralForms />\n                                </TabPanel>\n                                <TabPanel value={value} index={3}>\n                                    <CasePresentationForm />\n                                </TabPanel>\n                                <TabPanel value={value} index={4}>\n                                    <CaseManagementDecision setProgressLoader={setProgressLoader} />\n                                </TabPanel>\n                            </CardContent>\n                        </Grid>\n                    </Grid>\n                    <Divider />\n                    <CardActions>\n                        <Grid container justifyContent='space-between' spacing={0}>\n                            <Grid item>\n                                {value > 0 && (\n                                    <AnimateButton>\n                                        <Button variant='outlined' size='large'\n                                                onClick={(e) => handleChange(e, parseInt(value, 10) - 1)}>\n                                            Back\n                                        </Button>\n                                    </AnimateButton>\n                                )}\n                            </Grid>\n                            <Grid item>\n                                {value < 2 && (\n                                    <AnimateButton>\n                                        <Button variant='contained' size='large'\n                                                onClick={(e) => handleChange(e, 1 + parseInt(value, 10))}>\n                                            Continue\n                                        </Button>\n                                    </AnimateButton>\n                                )}\n                            </Grid>\n                        </Grid>\n                    </CardActions>\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ReviewBoardReferralCreate;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-calls/common.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/chat/index.js",["1457","1458","1459","1460","1461","1462","1463","1464"],"import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\n\r\nimport JWTContext from \"contexts/JWTContext\";\r\n\r\n\r\n// material-ui\r\nimport {makeStyles, styled, useTheme} from '@material-ui/styles';\r\nimport {\r\n    Box,\r\n    CardContent,\r\n    ClickAwayListener,\r\n    Divider,\r\n    Grid,\r\n    IconButton,\r\n    Menu,\r\n    MenuItem,\r\n    Popper,\r\n    TextField,\r\n    Typography,\r\n    useMediaQuery\r\n} from '@material-ui/core';\r\n\r\n// third-party\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Picker, {SKIN_TONE_MEDIUM_DARK} from 'emoji-picker-react';\r\n\r\n// project imports\r\nimport UserDetails from './UserDetails';\r\nimport ChatDrawer from './ChatDrawer';\r\nimport ChatHistory from './ChatHistory';\r\nimport AvatarStatus from './AvatarStatus';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport Avatar from 'ui-component/extended/Avatar';\r\nimport axios from 'utils/axios';\r\nimport {SET_MENU} from 'store/actionTypes';\r\nimport {appDrawerWidth as drawerWidth, gridSpacing} from 'store/constant';\r\n\r\n// assets\r\nimport AttachmentTwoToneIcon from '@material-ui/icons/AttachmentTwoTone';\r\nimport MenuRoundedIcon from '@material-ui/icons/MenuRounded';\r\nimport MoreHorizTwoToneIcon from '@material-ui/icons/MoreHorizTwoTone';\r\nimport ErrorTwoToneIcon from '@material-ui/icons/ErrorTwoTone';\r\nimport VideoCallTwoToneIcon from '@material-ui/icons/VideoCallTwoTone';\r\nimport CallTwoToneIcon from '@material-ui/icons/CallTwoTone';\r\nimport SendTwoToneIcon from '@material-ui/icons/SendTwoTone';\r\nimport MoodTwoToneIcon from '@material-ui/icons/MoodTwoTone';\r\nimport HighlightOffTwoToneIcon from '@material-ui/icons/HighlightOffTwoTone';\r\nimport {w3cwebsocket as W3CWebSocket} from \"websocket\";\r\n\r\n// redux\r\nimport {setNewMessageSend} from 'store/actions/messagingActions';\r\n\r\nconst avatarImage = require.context('assets/images/users', true);\r\n\r\n// style constant\r\nconst useStyles = makeStyles((theme) => ({\r\n    ScrollHeight: {\r\n        width: '100%',\r\n        height: 'calc(100vh - 440px)',\r\n        overflowX: 'hidden',\r\n        minHeight: '525px'\r\n    },\r\n    smallDrawer: {\r\n        [theme.breakpoints.down('sm')]: {\r\n            margin: '0 auto'\r\n        }\r\n    }\r\n}));\r\n\r\n// drawer content element\r\nconst Main = styled('main', {shouldForwardProp: (prop) => prop !== 'open'})(({theme, open}) => ({\r\n    flexGrow: 1,\r\n    paddingLeft: open ? theme.spacing(3) : 0,\r\n    transition: theme.transitions.create('margin', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen\r\n    }),\r\n    marginLeft: `-${drawerWidth}px`,\r\n    [theme.breakpoints.down('md')]: {\r\n        paddingLeft: 0,\r\n        marginLeft: 0\r\n    },\r\n    ...(open && {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen\r\n        }),\r\n        marginLeft: 0\r\n    })\r\n}));\r\n\r\n// ===========================|| APPLICATION CHAT ||=========================== //\r\n\r\n/**\r\n * CURRENT USER UUID = currentUserUUID\r\n * Use the currentUserUUID to send and receive messages\r\n * @returns {JSX.Element|string}\r\n * @constructor\r\n */\r\nconst ChatMainPage = () => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n\r\n    const jwtContext = React.useContext(JWTContext);\r\n    const {user: currentUser, ws: socketChatClient} = jwtContext;\r\n    const {user_type_pk: currentUserUUID, username: currentUsername, token: currentUserToken} = currentUser\r\n\r\n    const selectedRecipient = useSelector(store => store.messaging.selectedRecipient)\r\n    const matchDownSM = useMediaQuery(theme.breakpoints.down('md'));\r\n\r\n    // set chat details page open when user is selected from sidebar\r\n    const [emailDetails, setEmailDetails] = React.useState(false);\r\n    const handleUserChange = () => {\r\n        setEmailDetails((prev) => !prev);\r\n    };\r\n\r\n    // toggle sidebar\r\n    const [openChatDrawer, setOpenChatDrawer] = React.useState(true);\r\n    const handleDrawerOpen = () => {\r\n        setOpenChatDrawer((prevState) => !prevState);\r\n    };\r\n\r\n    // close sidebar when widow size below 'md' breakpoint\r\n    React.useEffect(() => {\r\n        setOpenChatDrawer(!matchDownSM);\r\n    }, [matchDownSM]);\r\n\r\n    const [activeRecipient, setActiveRecipient] = useState({});\r\n    const getUserData = async () => {\r\n        const response = await axios.post('/api/chat/users/id', {id: 1});\r\n        setActiveRecipient(response.data);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        // hide left drawer when email app opens\r\n        dispatch({type: SET_MENU, opened: false});\r\n        getUserData();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    // fetch chat history for selected user\r\n    React.useEffect(() => {\r\n        // Message received from websocket\r\n        socketChatClient.onmessage = (e) => {\r\n            const newMessageData = JSON.parse(e.data)\r\n            if (newMessageData.message) {\r\n                if(newMessageData.recipient === currentUsername){\r\n                    const d = new Date();\r\n                    const newMessage = {\r\n                        sender: newMessageData.sender,\r\n                        recipient: newMessageData.recipient,\r\n                        message: newMessageData.message,\r\n                        message_type: newMessageData.message_type,\r\n                        sent_at: newMessageData.sent_at,\r\n                    };\r\n                    dispatch(setNewMessageSend(newMessage, newMessageData.sender))\r\n                }\r\n            }\r\n        }\r\n\r\n        // getData(user); // Fetch messages for the selected recipient as API response\r\n    }, [activeRecipient]);\r\n\r\n    // handle new message form\r\n    const [message, setMessage] = useState('');\r\n    const handleOnSend = () => {\r\n        if(!message && message.length < 1){\r\n            return false;\r\n        }\r\n\r\n        const {username: recipientUsername} = selectedRecipient;\r\n        const d = new Date();\r\n        const messageSendTime = d.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit'})\r\n\r\n        /**\r\n         * Send Message to WebSocket API\r\n         */\r\n        setMessage('');\r\n        const newMessageToSend = {\r\n            'message': message,\r\n            'message_type': 'text',  // [model_instance,text]\r\n            'sender': currentUsername,\r\n            'recipient': recipientUsername,\r\n            'sent_at': messageSendTime\r\n        }\r\n        socketChatClient.send(JSON.stringify(newMessageToSend))\r\n\r\n        // TODO : Do this\r\n        // TODO : dispatch action to add to selectedRecipientHistory in reducer\r\n        dispatch(setNewMessageSend(newMessageToSend, recipientUsername))\r\n\r\n        return true;\r\n    };\r\n\r\n    const handleEnter = (event) => {\r\n        if (event.key !== 'Enter') {\r\n            return;\r\n        }\r\n        handleOnSend();\r\n    };\r\n\r\n    // handle emoji\r\n    const onEmojiClick = (event, emojiObject) => {\r\n        setMessage(message + emojiObject.emoji);\r\n    };\r\n\r\n    const [anchorElEmoji, setAnchorElEmoji] = React.useState(null);\r\n    const handleOnEmojiButtonClick = (event) => {\r\n        setAnchorElEmoji(anchorElEmoji ? null : event.currentTarget);\r\n    };\r\n    const emojiOpen = Boolean(anchorElEmoji);\r\n    const emojiId = emojiOpen ? 'simple-popper' : undefined;\r\n    const handleCloseEmoji = () => {\r\n        setAnchorElEmoji(null);\r\n    };\r\n\r\n    if (!currentUser) return 'Loading...';\r\n\r\n    return (\r\n        <Box sx={{display: 'flex'}}>\r\n            <ChatDrawer openChatDrawer={openChatDrawer} handleDrawerOpen={handleDrawerOpen}\r\n                        setActiveRecipient={setActiveRecipient}/>\r\n\r\n\r\n            <Main open={openChatDrawer}>\r\n                <Grid container spacing={gridSpacing}>\r\n                    <Grid item lg={12} xs={12}>\r\n                        <MainCard\r\n                            sx={{\r\n                                bgcolor: theme.palette.mode === 'dark' ? 'dark.main' : theme.palette.grey[50]\r\n                            }}\r\n                        >\r\n                            <Grid container spacing={gridSpacing}>\r\n                                <Grid item xs={12}>\r\n                                    <Grid container alignItems=\"\" spacing={0.5}>\r\n                                        <Grid item>\r\n                                            <IconButton onClick={handleDrawerOpen}>\r\n                                                <MenuRoundedIcon/>\r\n                                            </IconButton>\r\n                                        </Grid>\r\n\r\n                                        <Grid item>\r\n                                            <Grid container spacing={2} alignItems=\"center\" sx={{flexWrap: 'nowrap'}}>\r\n                                                <Grid item>\r\n                                                    <Avatar alt={activeRecipient.fullname}\r\n                                                            src={activeRecipient.avatar && avatarImage(`./${activeRecipient.avatar}`).default}/>\r\n                                                </Grid>\r\n                                                <Grid item sm zeroMinWidth>\r\n                                                    <Grid container spacing={0} alignItems=\"center\">\r\n                                                        <Grid item xs={12}>\r\n                                                            <Typography variant=\"h4\" component=\"div\">\r\n                                                                {activeRecipient.fullname} <AvatarStatus\r\n                                                                status={activeRecipient.online_status}/>\r\n                                                            </Typography>\r\n                                                        </Grid>\r\n                                                        <Grid item xs={12}>\r\n                                                            <Typography variant=\"subtitle2\">Last\r\n                                                                seen {activeRecipient.lastMessage}</Typography>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item sm zeroMinWidth/>\r\n                                        <Grid item>\r\n                                            <IconButton>\r\n                                                <CallTwoToneIcon/>\r\n                                            </IconButton>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <IconButton>\r\n                                                <VideoCallTwoToneIcon/>\r\n                                            </IconButton>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <IconButton onClick={handleUserChange}>\r\n                                                <ErrorTwoToneIcon/>\r\n                                            </IconButton>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Divider sx={{mt: theme.spacing(2)}}/>\r\n                                </Grid>\r\n\r\n                                {\r\n                                    /**\r\n                                     * User Chat History Messages Component\r\n                                     */\r\n                                }\r\n                                <PerfectScrollbar className={classes.ScrollHeight}>\r\n                                    <CardContent>\r\n                                        <ChatHistory\r\n                                            theme={theme}\r\n                                            user={activeRecipient}\r\n                                        />\r\n                                    </CardContent>\r\n                                </PerfectScrollbar>\r\n\r\n                                <Grid item xs={12}>\r\n                                    <Grid container spacing={1} alignItems=\"center\">\r\n                                        <Grid item>\r\n                                            <IconButton ref={anchorElEmoji} aria-describedby={emojiId}\r\n                                                        onClick={handleOnEmojiButtonClick}>\r\n                                                <MoodTwoToneIcon/>\r\n                                            </IconButton>\r\n                                            <Popper\r\n                                                id={emojiId}\r\n                                                open={emojiOpen}\r\n                                                anchorEl={anchorElEmoji}\r\n                                                disablePortal\r\n                                                popperOptions={{\r\n                                                    modifiers: [\r\n                                                        {\r\n                                                            name: 'offset',\r\n                                                            options: {\r\n                                                                offset: [-20, 20]\r\n                                                            }\r\n                                                        }\r\n                                                    ]\r\n                                                }}\r\n                                            >\r\n                                                <ClickAwayListener onClickAway={handleCloseEmoji}>\r\n                                                    <MainCard elevation={8} content={false}>\r\n                                                        <Picker\r\n                                                            onEmojiClick={onEmojiClick}\r\n                                                            skinTone={SKIN_TONE_MEDIUM_DARK}\r\n                                                            disableAutoFocus\r\n                                                        />\r\n                                                    </MainCard>\r\n                                                </ClickAwayListener>\r\n                                            </Popper>\r\n                                        </Grid>\r\n                                        <Grid item xs zeroMinWidth>\r\n                                            <TextField\r\n                                                fullWidth\r\n                                                label=\"Type a Message\"\r\n                                                value={message}\r\n                                                onChange={(e) => setMessage(e.target.value)}\r\n                                                onKeyPress={handleEnter}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <IconButton>\r\n                                                <AttachmentTwoToneIcon/>\r\n                                            </IconButton>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <IconButton color=\"primary\" onClick={handleOnSend}>\r\n                                                <SendTwoToneIcon/>\r\n                                            </IconButton>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </MainCard>\r\n                    </Grid>\r\n\r\n                    {emailDetails ? (\r\n                        <Grid item className={classes.smallDrawer}>\r\n                            <Box sx={{display: {xs: 'block', sm: 'none'}}}>\r\n                                <IconButton onClick={handleUserChange} sx={{mb: '-80px'}}>\r\n                                    <HighlightOffTwoToneIcon/>\r\n                                </IconButton>\r\n                            </Box>\r\n                            <UserDetails user={activeRecipient}/>\r\n                        </Grid>\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                </Grid>\r\n            </Main>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default ChatMainPage;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/chat/AvatarStatus.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/chat/UserDetails.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/chat/ChatDrawer.js",["1465"],"import * as PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n// material-ui\r\nimport { makeStyles, useTheme } from '@material-ui/styles';\r\nimport {\r\n    Button,\r\n    Drawer,\r\n    Grid,\r\n    IconButton,\r\n    InputAdornment,\r\n    Menu,\r\n    MenuItem,\r\n    OutlinedInput,\r\n    Typography,\r\n    useMediaQuery\r\n} from '@material-ui/core';\r\n\r\n// third-party\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\n\r\n\r\n// project imports\r\nimport UserList from './UserList';\r\nimport AvatarStatus from './AvatarStatus';\r\nimport UserAvatar from './UserAvatar';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { appDrawerWidth as drawerWidth, gridSpacing } from 'store/constant';\r\n\r\n// assets\r\nimport SearchTwoToneIcon from '@material-ui/icons/SearchTwoTone';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport LayersTwoToneIcon from \"@material-ui/icons/LayersTwoTone\";\r\nimport PersonAddAlt from '@material-ui/icons/PersonAddAlt';\r\nimport UsersSearchList from \"./UsersSearchList\";\r\n\r\n// style constant\r\nconst useStyles = makeStyles((theme) => ({\r\n    ScrollHeight: {\r\n        height: 'calc(100vh - 445px)',\r\n        overflowX: 'hidden',\r\n        minHeight: '520px',\r\n        [theme.breakpoints.down('md')]: {\r\n            height: 'calc(100vh - 190px)',\r\n            minHeight: 0\r\n        }\r\n    }\r\n}));\r\n\r\n// ===========================|| CHAT DRAWER ||=========================== //\r\n\r\nconst ChatDrawer = ({ handleDrawerOpen, openChatDrawer, setActiveRecipient }) => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const customization = useSelector((state) => state.customization);\r\n    const matchDownSM = useMediaQuery(theme.breakpoints.down('md'));\r\n\r\n    // Users Search List Dialog\r\n    const [userssearchlistopen, setUserssearchlistopen] = React.useState(false);\r\n    const handleClickOpenDialog = () => {\r\n        setUserssearchlistopen(true);\r\n    };\r\n    const handleCloseDialog = () => {\r\n        setUserssearchlistopen(false);\r\n    };\r\n\r\n    // show menu to set current user status\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const handleClickRightMenu = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleCloseRightMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    // set user status on status menu click\r\n    const [status, setStatus] = React.useState('available');\r\n    const handleRightMenuItemClick = (statusData) => () => {\r\n        setStatus(statusData);\r\n        handleCloseRightMenu();\r\n    };\r\n\r\n    return (\r\n        <Drawer\r\n            sx={{\r\n                width: drawerWidth,\r\n                flexShrink: 0,\r\n                zIndex: { xs: 1100, md: 0 },\r\n                '& .MuiDrawer-paper': {\r\n                    height: 'auto',\r\n                    width: drawerWidth,\r\n                    boxSizing: 'border-box',\r\n                    position: 'relative',\r\n                    border: 'none',\r\n                    borderRadius: `${customization.borderRadius}px`,\r\n                    [theme.breakpoints.down('md')]: {\r\n                        borderRadius: '0px'\r\n                    }\r\n                }\r\n            }}\r\n            variant={matchDownSM ? 'temporary' : 'persistent'}\r\n            anchor=\"left\"\r\n            open={openChatDrawer}\r\n            ModalProps={{ keepMounted: true }}\r\n            onClose={handleDrawerOpen}\r\n        >\r\n            <MainCard\r\n                sx={{\r\n                    bgcolor: theme.palette.mode === 'dark' ? 'dark.main' : theme.palette.grey[50]\r\n                }}\r\n            >\r\n                <Grid container spacing={gridSpacing}>\r\n                    <Grid item xs={12}>\r\n                        <Grid container spacing={2} alignItems=\"center\" sx={{ flexWrap: 'nowrap' }}>\r\n                            <Grid item>\r\n                                <UserAvatar user={{ online_status: status, avatar: 'avatar-5.png', name: 'User 1' }} />\r\n                            </Grid>\r\n                            <Grid item xs zeroMinWidth>\r\n                                <Typography align=\"left\" variant=\"h4\">\r\n                                    Test User\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <IconButton onClick={handleClickRightMenu}>\r\n                                    <ExpandMoreIcon />\r\n                                </IconButton>\r\n                                <Menu\r\n                                    id=\"simple-menu\"\r\n                                    anchorEl={anchorEl}\r\n                                    keepMounted\r\n                                    open={Boolean(anchorEl)}\r\n                                    onClose={handleCloseRightMenu}\r\n                                    anchorOrigin={{\r\n                                        vertical: 'bottom',\r\n                                        horizontal: 'right'\r\n                                    }}\r\n                                    transformOrigin={{\r\n                                        vertical: 'top',\r\n                                        horizontal: 'right'\r\n                                    }}\r\n                                >\r\n                                    <MenuItem onClick={handleRightMenuItemClick('available')}>\r\n                                        <AvatarStatus status=\"available\" mr={1} />\r\n                                        Available\r\n                                    </MenuItem>\r\n                                    <MenuItem onClick={handleRightMenuItemClick('do_not_disturb')}>\r\n                                        <AvatarStatus status=\"do_not_disturb\" mr={1} />\r\n                                        Do not disturb\r\n                                    </MenuItem>\r\n                                    <MenuItem onClick={handleRightMenuItemClick('offline')}>\r\n                                        <AvatarStatus status=\"offline\" mr={1} />\r\n                                        Offline\r\n                                    </MenuItem>\r\n                                </Menu>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <Button fullWidth variant=\"outlined\" onClick={handleClickOpenDialog} endIcon={<PersonAddAlt />}>\r\n                            Start Conversation\r\n                        </Button>\r\n\r\n                        <UsersSearchList open={userssearchlistopen} handleCloseDialog={handleCloseDialog} />\r\n                    </Grid>\r\n\r\n\r\n                    <Grid item xs={12}>\r\n                        <OutlinedInput\r\n                            fullWidth\r\n                            id=\"input-search-header\"\r\n                            placeholder=\"Search Messages\"\r\n                            startAdornment={\r\n                                <InputAdornment position=\"start\">\r\n                                    <SearchTwoToneIcon fontSize=\"small\" />\r\n                                </InputAdornment>\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <PerfectScrollbar className={classes.ScrollHeight}>\r\n                            <UserList setActiveRecipient={setActiveRecipient} />\r\n                        </PerfectScrollbar>\r\n                    </Grid>\r\n                </Grid>\r\n            </MainCard>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nChatDrawer.propTypes = {\r\n    handleDrawerOpen: PropTypes.func,\r\n    openChatDrawer: PropTypes.bool,\r\n    setActiveRecipient: PropTypes.func\r\n};\r\n\r\nexport default ChatDrawer;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/extended/Avatar.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/chat/UserList.js",["1466","1467","1468","1469","1470","1471","1472"],"import * as PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// material-ui\r\nimport {Chip, Divider, Grid, List, ListItemAvatar, ListItemText, Typography} from '@material-ui/core';\r\nimport ListItemButton from '@material-ui/core/ListItemButton';\r\n\r\n// project imports\r\nimport UserAvatar from './UserAvatar';\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport messagingApi from \"store/api-calls/messaging\";\r\nimport JWTContext from \"../../contexts/JWTContext\";\r\nimport {setActiveRecipientUser, setUserActiveMessagesList} from \"../../store/actions/messagingActions\";\r\n\r\n// ===========================|| CHAT USER LIST ||=========================== //\r\n\r\nconst UserList = ({setActiveRecipient}) => {\r\n    const [data, setData] = React.useState([]);\r\n    const activeChats = useSelector(store => store.messaging.activeChats)\r\n    const jwtContext = React.useContext(JWTContext);\r\n    const {user: currentUser} = jwtContext;\r\n    const {username: currentUsername} = currentUser;\r\n    const dispatch = useDispatch();\r\n\r\n    const getUserActiveRecipientsList = async () => {\r\n        const response = await messagingApi.getUserActiveRecipientsList(currentUsername)\r\n        return response;\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        const activeRecipientsList = getUserActiveRecipientsList();\r\n\r\n        // dispatch\r\n        // dispatch(setUserActiveMessagesList(response))\r\n    }, []);\r\n\r\n    const handleRecipientSelect = (e, recipient) => {\r\n        setActiveRecipient(recipient);\r\n        dispatch(setActiveRecipientUser(recipient));\r\n    }\r\n\r\n    const renderRecipientsList = () => {\r\n        if (Object.keys(activeChats).length < 0) {\r\n            return <></>\r\n        }\r\n\r\n        return Object.keys(activeChats).map((activeRecipientUsername, index) => {\r\n            const recipient = activeChats[activeRecipientUsername].user;\r\n            const {user_type_pk, fullname} = recipient;\r\n\r\n            return (\r\n                <React.Fragment key={user_type_pk}>\r\n                    <ListItemButton\r\n                        onClick={(e) => handleRecipientSelect(e, recipient)}\r\n                    >\r\n                        <ListItemAvatar>\r\n                            <UserAvatar user={recipient}/>\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                            primary={\r\n                                <Grid container alignItems=\"center\" spacing={1} component=\"span\">\r\n                                    <Grid item xs zeroMinWidth component=\"span\">\r\n                                        <Typography\r\n                                            variant=\"h5\"\r\n                                            color=\"inherit\"\r\n                                            component=\"span\"\r\n                                            sx={{\r\n                                                overflow: 'hidden',\r\n                                                textOverflow: 'ellipsis',\r\n                                                whiteSpace: 'nowrap',\r\n                                                display: 'block'\r\n                                            }}\r\n                                        >\r\n                                            {fullname}\r\n                                        </Typography>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            }\r\n                        />\r\n                    </ListItemButton>\r\n                    <Divider/>\r\n                </React.Fragment>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <List component=\"nav\">\r\n            {renderRecipientsList()}\r\n        </List>\r\n    );\r\n};\r\n\r\nUserList.propTypes = {\r\n    setActiveRecipient: PropTypes.func\r\n};\r\n\r\nexport default UserList;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/chat/UserAvatar.js",["1473"],"import * as PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// material-ui\r\nimport { Avatar, Badge } from '@material-ui/core';\r\n\r\n// project imports\r\nimport AvatarStatus from './AvatarStatus';\r\n\r\n// assets\r\nconst avatarImage = require.context('assets/images/users', true);\r\n\r\n// ===========================|| CHAT USER AVATAR WITH STATUS ICON ||=========================== //\r\n\r\nconst UserAvatar = ({ user }) => (\r\n    <Badge\r\n        overlap=\"circular\"\r\n        badgeContent={<AvatarStatus status={user.online_status} />}\r\n        anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'right'\r\n        }}\r\n    >\r\n        <Avatar alt={user.fullname} src={user.avatar}/>\r\n    </Badge>\r\n);\r\n\r\nUserAvatar.propTypes = {\r\n    user: PropTypes.object\r\n};\r\n\r\nexport default UserAvatar;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/routes/common-routes/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/common/utils.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/caseManager/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/caseManager/dailyWorkload.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-calls/case-manager.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/caseManager/dailyWorkloadActions.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/ui/ProgressCircularControlled.js",["1474"],"import * as React from 'react';\nimport {CircularProgress} from \"@material-ui/core\";\n\nconst ProgressCircularControlled = ({display}) => {\n    if (display) {\n        return <CircularProgress/>\n    }\n    return <fragment/>\n};\n\nexport default ProgressCircularControlled;","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/caseManager/clientAssessment.js",["1475"],"import * as actionTypes from 'store/actionTypes';\nimport {CASE_MANAGER_SET_RETRIEVED_CLIENT_ASSESSMENT_DATA} from \"store/actionTypes\";\n\nexport const initialState = {\n    list: {},\n    add: {\n        assessment: {\n            assessment_status: false,\n            casemanager: \"\",\n            client: \"\"\n        },\n        assessment_type_data: {\n            date: \"\",  // [OPTION 3]\n            total_time: \"\", // [OPTION 3]\n            mode_of_assessment: \"\", // [OPTION 3]\n\n            existing_assessment: {  // [OPTION 1 - only this]  [OPTION 2]\n                data: {\n                    date: \"\"\n                }\n            },\n            reassessment: { // [OPTION 4 - only this]  [OPTION 2]\n                data: {\n                    date: \"\",\n                    reason: \"\",\n                    total_time: \"\",\n                    mode_of_assessment: \"\"\n                }\n            }\n        },\n        assessment_type_forms: {\n            provider_specific_forms: [],\n            assessment_forms: [],\n\n            existing_assessment: {\n                provider_specific_forms: [],\n                assessment_forms: [],\n            },\n            reassessment: {\n                provider_specific_forms: [],\n                assessment_forms: [],\n            }\n        },\n    },\n    update: {},\n    retrieve: {}\n}\n\n\nconst clientAssessmentReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.CASE_MANAGER_SET_CLIENT_ASSESSMENT_CLIENT_STATUS: {\n            const clientAssessmentStatus = action.data\n\n            return {\n                ...state,\n                add: {\n                    ...state.add,\n                    assessment: {\n                        ...state.add.assessment,\n                        assessment_status: clientAssessmentStatus\n                    }\n                }\n            };\n        }\n\n        case actionTypes.CASE_MANAGER_SET_CLIENT_ASSESSMENT_CLIENT_DETAIL: {\n            const clientUUID = action.data\n\n            return {\n                ...state,\n                add: {\n                    ...state.add,\n                    assessment: {\n                        ...state.add.assessment,\n                        client: clientUUID\n                    }\n                }\n            };\n        }\n\n        case actionTypes.CASE_MANAGER_SET_CLIENT_ASSESSMENT_CASEMANAGER_DETAIL: {\n            const caseManagerUUID = action.data\n\n            return {\n                ...state,\n                add: {\n                    ...state.add,\n                    assessment: {\n                        ...state.add.assessment,\n                        casemanager: caseManagerUUID\n                    }\n                }\n            };\n        }\n\n        case actionTypes.CASE_MANAGER_SET_CLIENT_ASSESSMENT_NON_TYPE_DATA: {\n            const assessmentNonTypeData = action.data\n\n            return {\n                ...state,\n                add: {\n                    ...state.add,\n                    assessment: {\n                        ...state.add.assessment,\n                        ...assessmentNonTypeData\n                    }\n                }\n            };\n        }\n\n        case actionTypes.CASE_MANAGER_SET_CLIENT_ASSESSMENT_REASSESSMENT_DETAILS: {\n            const reAssessmentData = action.data;\n\n            return {\n                ...state,\n                add: {\n                    ...state.add,\n                    assessment_type_data: {\n                        ...state.add.assessment_type_data,\n                        reassessment: {\n                            data: {\n                                ...state.add.assessment_type_data.reassessment.data,\n                                ...reAssessmentData\n                            }\n                        }\n                    }\n                }\n            };\n        }\n\n        case actionTypes.CASE_MANAGER_SET_CLIENT_ASSESSMENT_NEWEM_ASSESSMENT_DETAILS: {\n            const newEmAssessmentData = action.data;\n\n            return {\n                ...state,\n                add: {\n                    ...state.add,\n                    assessment_type_data: {\n                        ...state.add.assessment_type_data,\n                        ...newEmAssessmentData\n                    }\n                }\n            };\n        }\n\n        case actionTypes.CASE_MANAGER_SET_CLIENT_ASSESSMENT_EXISTINGEM_ASSESSMENT_DETAILS: {\n            const existingEMAssessmentData = action.data;\n\n            return {\n                ...state,\n                add: {\n                    ...state.add,\n                    assessment_type_data: {\n                        ...state.add.assessment_type_data,\n                        existing_assessment: {\n                            data: {\n                                ...existingEMAssessmentData\n                            }\n                        }\n                    }\n                }\n            };\n        }\n\n        case actionTypes.CASE_MANAGER_SET_CLIENT_ASSESSMENT_SET_NEWEM_PROVIDER_SPECIFIC_FORM_UUID: {\n            const providerSpecificFormUUID = action.data\n\n            return {\n                ...state,\n                add: {\n                    ...state.add,\n                    assessment_type_forms: {\n                        ...state.add.assessment_type_forms,\n                        provider_specific_forms: [providerSpecificFormUUID]\n                    }\n                }\n            }\n        }\n\n        case actionTypes.CASE_MANAGER_SET_CLIENT_ASSESSMENT_SET_NEWEM_GENERAL_ASSESSMENT_FORM_UUID: {\n            const generalAssessmentFormUUID = action.data\n\n            return {\n                ...state,\n                add: {\n                    ...state.add,\n                    assessment_type_forms: {\n                        ...state.add.assessment_type_forms,\n                        assessment_forms: [...state.add.assessment_type_forms.assessment_forms, generalAssessmentFormUUID]\n                    }\n                }\n            }\n        }\n\n        case actionTypes.CASE_MANAGER_SET_CLIENT_ASSESSMENT_SET_EXISTINGEM_PROVIDER_SPECIFIC_FORM_UUID: {\n            const providerSpecificFormUUID = action.data\n\n            return {\n                ...state,\n                add: {\n                    ...state.add,\n                    assessment_type_forms: {\n                        ...state.add.assessment_type_forms,\n                        existing_assessment: {\n                            ...state.add.assessment_type_forms.existing_assessment,\n                            provider_specific_forms: [\n                                providerSpecificFormUUID\n                            ]\n                        }\n                    }\n                }\n            }\n        }\n\n        case actionTypes.CASE_MANAGER_SET_CLIENT_ASSESSMENT_SET_EXISTINGEM_GENERAL_ASSESSMENT_FORM_UUID: {\n            const generalAssessmentFormUUID = action.data\n\n            return {\n                ...state,\n                add: {\n                    ...state.add,\n                    assessment_type_forms: {\n                        ...state.add.assessment_type_forms,\n                        existing_assessment: {\n                            ...state.add.assessment_type_forms.existing_assessment,\n                            assessment_forms: [\n                                ...state.add.assessment_type_forms.existing_assessment.assessment_forms,\n                                generalAssessmentFormUUID\n                            ]\n                        }\n                    }\n                }\n            }\n        }\n\n        case actionTypes.CASE_MANAGER_SET_CLIENT_ASSESSMENT_SET_REASSESSMENT_PROVIDER_SPECIFIC_FORM_UUID: {\n            const providerSpecificFormUUID = action.data\n\n            return {\n                ...state,\n                add: {\n                    ...state.add,\n                    assessment_type_forms: {\n                        ...state.add.assessment_type_forms,\n                        reassessment: {\n                            ...state.add.assessment_type_forms.reassessment,\n                            provider_specific_forms: [\n                                providerSpecificFormUUID\n                            ]\n                        }\n                    }\n                }\n            }\n        }\n\n        case actionTypes.CASE_MANAGER_SET_CLIENT_ASSESSMENT_SET_REASSESSMENT_GENERAL_ASSESSMENT_FORM_UUID: {\n            const generalAssessmentFormUUID = action.data\n\n            return {\n                ...state,\n                add: {\n                    ...state.add,\n                    assessment_type_forms: {\n                        ...state.add.assessment_type_forms,\n                        reassessment: {\n                            ...state.add.assessment_type_forms.reassessment,\n                            assessment_forms: [\n                                ...state.add.assessment_type_forms.reassessment.assessment_forms,\n                                generalAssessmentFormUUID\n                            ]\n                        }\n                    }\n                }\n            }\n        }\n\n        case actionTypes.CASE_MANAGER_LIST_CLIENT_ASSESSMENT_FOR_CASE_MANAGER: {\n            const clientAssessmentlistData = action.data;\n\n            return {\n                ...state,\n                list: {\n                    ...state.list,\n                    ...clientAssessmentlistData\n                }\n            }\n        }\n\n        case actionTypes.CASE_MANAGER_SET_RETRIEVED_CLIENT_ASSESSMENT_DATA: {\n            const {assessmentUUID, retrievedAssessmentData} = action.data\n\n            return {\n                ...state,\n                retrieve: {\n                    ...state.retrieve,\n                    [assessmentUUID]: {\n                        ...retrievedAssessmentData\n                    }\n                }\n            }\n        }\n\n        default: {\n            return {...state};\n        }\n    }\n};\n\nexport default clientAssessmentReducer;\n\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/caseManager/clientAssessmentActions.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/common/provider-specific-forms/generic-form.js",["1476"],"import React from 'react';\n\n\nconst ProviderGenericForm = ({children}) => (\n    children\n);\n\nexport default ProviderGenericForm;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/messagingReducer.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/messagingActions.js",["1477","1478"],"import * as actionTypes from 'store/actionTypes';\nimport {MESSAGING_SET_ACTIVE_RECIPIENT_USER, MESSAGING_SET_SEARCH_USERS_LIST_SELECTED} from \"store/actionTypes\";\n\nexport const setNewMessage = (values) => ({\n    type: actionTypes.MESSAGING_ADD_NEW_MESSAGE,\n    data: {\n        ...values\n    }\n});\n\nexport const setSearchUsersList = (values) => ({\n    type: actionTypes.MESSAGING_SET_SEARCH_USERS_LIST,\n    data: {\n        ...values\n    }\n});\n\nexport const setSearchUsersListSelected = (selectedUser) => ({\n    type: actionTypes.MESSAGING_SET_SEARCH_USERS_LIST_SELECTED,\n    data: selectedUser\n});\n\nexport const setUserActiveMessagesList = (values) => ({\n    type: actionTypes.MESSAGING_SET_ACTIVE_MESSAGES_LIST,\n    data: {\n        ...values\n    }\n});\n\nexport const setActiveRecipientUser = (selectedUser) => ({\n    type: actionTypes.MESSAGING_SET_ACTIVE_RECIPIENT_USER,\n    data: selectedUser\n});\n\nexport const setActiveRecipientMessageHistory = (history, recipientUsername) => ({\n    type: actionTypes.MESSAGING_SET_ACTIVE_RECIPIENT_HISTORY,\n    data: {\n        history,\n        recipientUsername\n    }\n});\n\n\nexport const setNewMessageSend = (message, recipientUsername) => ({\n    type: actionTypes.MESSAGING_ADD_NEW_MESSAGE_SEND,\n    data: {\n        message,\n        recipientUsername\n    }\n});\n\n\n\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/share/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/externalPartner/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/clinician/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/search/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/client/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/dashboard/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/routes/common-routes/home.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/routes/role-based-routes/ClientRoutes.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/routes/role-based-routes/CommunityParamedicRoutes.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/search/applicationUserSearch.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/clinician/clientIntervention.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/externalPartner/clientIntervention.js",["1479"],"import * as actionTypes from 'store/actionTypes';\nimport {EXTERNAL_PARTNER_LIST_CLIENT_INTERVENTION_FOR_EXTERNAL_PARTNER} from \"store/actionTypes\";\n\n\nexport const initialState = {\n    list: {},\n    add: {\n        casemanager: false,\n        client: false,\n        assessment_status: \"\",\n        intervention_date: \"\",\n        internal_comm_assessment_clinical_notes: \"\",\n        internal_comm_followup_clinical_notes: \"\",\n        internal_comm_internal_referral_notes: \"\",\n\n        forms: []\n    },\n    retrieve: {}\n}\n\n\nconst clientInterventionReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.EXTERNAL_PARTNER_LIST_CLIENT_INTERVENTION_FOR_EXTERNAL_PARTNER: {\n            const clientInterventionlistData = action.data;\n\n            return {\n                ...state,\n                list: {\n                    ...state.list,\n                    ...clientInterventionlistData\n                }\n            }\n        }\n        default: {\n            return {...state};\n        }\n    }\n};\n\nexport default clientInterventionReducer;\n\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/client/communicationLog.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/share/externalFollowUp.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/caseManager/clientIntervention.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/dashboard/externalFollowUp.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/dashboard/internalReferrals.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/dashboard/internalFollowUp.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/dashboard/externalReferrals.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/dashboard/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/communication-log/index.js",["1480","1481","1482","1483","1484","1485","1486"],"import PropTypes from 'prop-types';\nimport React, {useEffect} from 'react';\nimport JWTContext from 'contexts/JWTContext';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {\n    Autocomplete,\n    Button,\n    CardActions,\n    CardContent,\n    Divider,\n    Grid, TextField,\n} from '@material-ui/core';\n\nimport {useSelector, useDispatch} from \"react-redux\";\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport {gridSpacing} from 'store/constant';\n\n// assets\nimport {SNACKBAR_OPEN} from 'store/actionTypes';\n\nimport caseManagerApi from 'store/api-calls/case-manager';\nimport {useFormik} from \"formik\";\n\nimport ProgressCircularControlled from 'views/ui/ProgressCircularControlled';\nimport setVisitorLogDetail from \"store/actions/client/visitorLogActions\";\nimport MaskedInput from 'react-text-mask';\nimport setCommunicationLogDetail from \"../../../../store/actions/client/communicationLogActions\";\nimport clientApi from \"../../../../store/api-calls/client\";\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    profileTab: {\n        '& .MuiTabs-flexContainer': {\n            borderBottom: 'none'\n        },\n        '& button': {\n            color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[600],\n            minHeight: 'auto',\n            minWidth: '100%',\n            padding: '12px 16px',\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n            textAlign: 'left',\n            justifyContent: 'flex-start'\n        },\n        '& button.Mui-selected': {\n            color: theme.palette.primary.main,\n            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50]\n        },\n        '& button > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px',\n            marginTop: '10px',\n            height: '20px',\n            width: '20px'\n        },\n        '& button > div > span': {\n            display: 'block'\n        },\n        '& > div > span': {\n            display: 'none'\n        }\n    },\n    cardPanels: {\n        borderLeft: '1px solid',\n        borderLeftColor: theme.palette.mode === 'dark' ? '#333d5e' : '#eeeeee',\n        height: '100%'\n    }\n}));\n\n// tabs\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <div role='tabpanel' hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && <div>{children}</div>}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\n\nconst personCompletingList = [\n    {label: 'Client', id: 'client'},\n    {label: 'Spouse / Partner', id: 'client'},\n    {label: 'Family Member', id: 'client'},\n    {label: 'Neighbor / Friend', id: 'client'},\n    {label: 'Volunteer', id: 'client'},\n    {label: 'Home Health Aide', id: 'client'},\n    {label: 'Other', id: 'other'},\n];\n\nconst CommunicationLog = () => {\n    const classes = useStyles();\n    const customization = useSelector((state) => state.customization);\n    const [value, setValue] = React.useState(0);\n    const [progressLoader, setProgressLoader] = React.useState(false);\n\n    const dispatch = useDispatch()\n    const communicationLogData = useSelector(store => store.client.communicationLogs.add)\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const userAuthContext = React.useContext(JWTContext)\n    const {\n        user: {\n            user_type_pk: clientUUID\n        }\n    } = userAuthContext;\n\n    const formik = useFormik({\n        initialValues: {\n            date: communicationLogData.date,\n            person_completing: communicationLogData.person_completing,\n            person_completing_detail: communicationLogData.person_completing_detail,\n            comments: communicationLogData.comments,\n            client: clientUUID\n        },\n        validate: values => {\n            dispatch(setCommunicationLogDetail(values))\n        }\n    });\n\n    const submitCommunicationLog = async (e) => {\n        setProgressLoader(true);\n        communicationLogData.person_completing = communicationLogData.person_completing.id\n        const response = await clientApi.createCommunicationLog(communicationLogData);\n\n        if (response && 'status' in response) {\n            if (response.status === true) {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Communication Log successfully created',\n                    variant: 'alert',\n                    alertSeverity: 'success', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                })\n            }\n        } else {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Communication Log could not be created. Please try again',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n            })\n        }\n        setProgressLoader(false);\n    }\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={8} md={8} sm={12}>\n                <MainCard title='Communication Log' secondary={<ProgressCircularControlled display={progressLoader}/>}\n                          content={false}>\n\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={12} lg={8} md={8}>\n\n                            <CardContent className={classes.cardPanels}>\n                                <Grid container spacing={gridSpacing}>\n                                    <Grid item xs={8} sm={8}>\n                                        <MaskedInput\n                                            mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                                            className=\"form-control\"\n                                            label=\"Date\"\n                                            guide={false}\n                                            render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                               defaultValue=\"\"/>}\n\n                                            defaultValue={formik.values.date}\n                                            onChange={formik.handleChange}\n                                            name='date'\n                                            id='date'\n                                            value={formik.values.date}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={8} sm={8}>\n                                        <Autocomplete\n                                            disablePortal\n                                            options={personCompletingList}\n                                            name='person_completing'\n                                            value={formik.values.person_completing}\n                                            id='person_completing'\n                                            onChange={(e, value) => {\n                                                formik.setFieldValue('person_completing', value)\n                                            }}\n                                            renderInput={(params) => <TextField {...params} label=\"Person Completing\"/>}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} lg={12} sm={12}>\n                                        <TextField\n                                            fullWidth\n                                            multiline\n                                            maxRows={20}\n                                            name='person_completing_detail'\n                                            id='person_completing_detail'\n                                            label='Person Completing - Other'\n                                            value={formik.values.person_completing_detail}\n                                            onChange={formik.handleChange}\n                                        />\n                                    </Grid>\n\n\n                                    <Grid item xs={12} lg={12} sm={12}>\n                                        <TextField\n                                            fullWidth\n                                            maxRows={20}\n                                            multiline\n                                            name='comments'\n                                            id='comments'\n                                            label='Comments: Provider details about your communication'\n                                            value={formik.values.comments}\n                                            onChange={formik.handleChange}\n                                        />\n                                    </Grid>\n\n                                </Grid>\n                            </CardContent>\n                        </Grid>\n                    </Grid>\n\n                    <Divider/>\n\n                    <CardActions>\n                        <Grid container justifyContent='space-between' spacing={0}>\n                            <Grid item alignContent='end'>\n                                <AnimateButton>\n                                    <Button color='secondary' variant='contained' size='large'\n                                            onClick={submitCommunicationLog}>\n                                        Submit\n                                    </Button>\n                                </AnimateButton>\n                            </Grid>\n                        </Grid>\n                    </CardActions>\n\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default CommunicationLog;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/daily-workload/edit/index.js",["1487","1488","1489","1490","1491","1492"],"import PropTypes from 'prop-types';\nimport React, {useEffect} from 'react';\nimport JWTContext from 'contexts/JWTContext';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {\n    Button,\n    CardActions,\n    CircularProgress,\n    CardContent,\n    Divider,\n    Grid,\n    Tab,\n    Tabs,\n    Typography, IconButton\n} from '@material-ui/core';\n\n// project imports\nimport ClientCaseLoad from '../add/forms/client-caseload';\nimport Details from '../add/forms/details';\n\nimport {useSelector, useDispatch} from \"react-redux\";\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport {gridSpacing} from 'store/constant';\n\n// assets\nimport PersonOutlineTwoToneIcon from '@material-ui/icons/PersonOutlineTwoTone';\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\nimport CreditCardTwoToneIcon from '@material-ui/icons/CreditCardTwoTone';\nimport VpnKeyTwoToneIcon from '@material-ui/icons/VpnKeyTwoTone';\nimport {SNACKBAR_OPEN} from 'store/actionTypes';\n\nimport caseManagerApi from 'store/api-calls/case-manager';\n\nimport ProgressCircularControlled from 'views/ui/ProgressCircularControlled';\nimport {\n    setDailyWorkLoadDetails,\n    resetDailyWorkLoad,\n    retrieveDailyWorkload,\n    setRetrievedDailyWorkLoadDetailsUpdate\n} from \"store/actions/caseManager/dailyWorkloadActions\";\nimport {useNavigate, useParams} from \"react-router-dom\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport InfoTwoTone from \"@material-ui/icons/InfoTwoTone\";\n\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    profileTab: {\n        '& .MuiTabs-flexContainer': {\n            borderBottom: 'none'\n        },\n        '& button': {\n            color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[600],\n            minHeight: 'auto',\n            minWidth: '100%',\n            padding: '12px 16px',\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n            textAlign: 'left',\n            justifyContent: 'flex-start'\n        },\n        '& button.Mui-selected': {\n            color: theme.palette.primary.main,\n            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50]\n        },\n        '& button > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px',\n            marginTop: '10px',\n            height: '20px',\n            width: '20px'\n        },\n        '& button > div > span': {\n            display: 'block'\n        },\n        '& > div > span': {\n            display: 'none'\n        }\n    },\n    cardPanels: {\n        borderLeft: '1px solid',\n        borderLeftColor: theme.palette.mode === 'dark' ? '#333d5e' : '#eeeeee',\n        height: '100%'\n    }\n}));\n\n// tabs\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <div role='tabpanel' hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && <div>{children}</div>}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n// tabs option\nconst tabsOption = [\n    {\n        label: 'Details',\n        icon: <DescriptionTwoToneIcon/>,\n        caption: 'Caption here'\n    },\n    {\n        label: 'Client Caseload',\n        icon: <DescriptionTwoToneIcon/>,\n        caption: 'Billing Information'\n    },\n    {\n        label: 'Project Related Clinical Activities',\n        icon: <CreditCardTwoToneIcon/>,\n        caption: 'Add & Update Card'\n    },\n    {\n        label: 'Research Related Activities',\n        icon: <VpnKeyTwoToneIcon/>,\n        caption: 'Update Profile Security'\n    }\n];\n\n// ===========================|| PROFILE 2 ||=========================== //\n\nconst DailyWorkloadEdit = () => {\n    const classes = useStyles();\n    const navigate = useNavigate();\n    const customization = useSelector((state) => state.customization);\n    const dispatch = useDispatch();\n\n    const [value, setValue] = React.useState(0);\n    const [progressLoader, setProgressLoader] = React.useState(true);\n\n    const userAuthContext = React.useContext(JWTContext)\n    const {\n        user: {\n            user_type_pk: caseManagerUUID\n        }\n    } = userAuthContext;\n\n    const {workload_id} = useParams();\n    const dailyWorkloadDataEdit = useSelector(state => state.caseManager.dailyWorkload.add)\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const navigateWorkloadDetail = () => {\n        navigate(`/workload/${workload_id}`)\n    }\n\n    useEffect(async () => {\n        setProgressLoader(true);\n        const response = await caseManagerApi.retrieveDailyWorkload(workload_id);\n\n        if ('result' in response && response.result === true && 'data' in response) {\n            dispatch(setRetrievedDailyWorkLoadDetailsUpdate(response.data))\n            setProgressLoader(false);\n        }\n    }, []);\n\n    const handleWorkloadUpdate = async (e) => {\n        setProgressLoader(true);  // Call this to show the loader for the current tab\n        dispatch(setDailyWorkLoadDetails({\n            casemanager: caseManagerUUID\n        }))\n        const response = await caseManagerApi.updateDailyWorkload(workload_id, dailyWorkloadDataEdit);\n        setProgressLoader(false);\n\n        if ('result' in response === true) {\n            if (response.result === true) {\n                navigate(`/workload/${workload_id}`)\n\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Your Daily Workload entry has been updated.',\n                    variant: 'alert',\n                    alertSeverity: 'success', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n                dispatch(resetDailyWorkLoad())\n            } else {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Your Daily workload could not be updated. Please try again',\n                    variant: 'alert',\n                    alertSeverity: 'error', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            }\n        }\n\n        if ('errors' in response === true) {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Please provide all the fields with valid values and try submit again.',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n\n        if ('status' in response === true && response.status > 200) {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Please provide all the fields with valid values and try submit again.',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n    }\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12}>\n                <MainCard title={\n                    <>\n                        <>Edit Daily Workload</>\n                        <ProgressCircularControlled display={progressLoader}/>\n                    </>\n                } secondary={\n                    <>\n                        <Tooltip title=\"View Workload Detail\" onClick={navigateWorkloadDetail}>\n                            <IconButton color=\"secondary\">\n                                <InfoTwoTone sx={{fontSize: '1.5rem'}}/>\n                            </IconButton>\n                        </Tooltip>\n                    </>\n                }\n                          content={false}>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={12} lg={4}>\n                            <CardContent>\n                                <Tabs\n                                    value={value}\n                                    onChange={handleChange}\n                                    orientation='vertical'\n                                    className={classes.profileTab}\n                                    variant='scrollable'\n                                    sx={{\n                                        '& button': {\n                                            borderRadius: `${customization.borderRadius}px`\n                                        }\n                                    }}\n                                >\n                                    {tabsOption.map((tab, index) => (\n                                        <Tab\n                                            key={index}\n                                            icon={tab.icon}\n                                            label={\n                                                <Grid container direction='column'>\n                                                    <Typography sx={{textTransform: 'capitalize'}} variant='subtitle1'\n                                                                color='inherit'>\n                                                        {tab.label}\n                                                    </Typography>\n                                                    <Typography component='div' variant='caption'\n                                                                sx={{textTransform: 'capitalize'}}>\n                                                        {tab.caption}\n                                                    </Typography>\n                                                </Grid>\n                                            }\n                                            {...a11yProps(index)}\n                                        />\n                                    ))}\n                                </Tabs>\n                            </CardContent>\n                        </Grid>\n                        <Grid item xs={12} lg={8}>\n                            <CardContent className={classes.cardPanels}>\n                                <TabPanel value={value} index={0}>\n                                    <Details editMode/>\n                                </TabPanel>\n                                <TabPanel value={value} index={1}>\n                                    <ClientCaseLoad editMode/>\n                                </TabPanel>\n                            </CardContent>\n                        </Grid>\n                    </Grid>\n                    <Divider/>\n                    <CardActions>\n                        <Grid container justifyContent='space-between' spacing={0}>\n                            <Grid item>\n                                <Grid container justifyContent='space-between' spacing={1}>\n                                    <Grid item>\n                                        {value < 1 && (\n                                            <AnimateButton>\n                                                <Button variant='contained' size='large'\n                                                        onClick={(e) => handleChange(e, 1 + parseInt(value, 10))}>\n                                                    Continue\n                                                </Button>\n                                            </AnimateButton>\n                                        )}\n                                    </Grid>\n\n                                    <Grid item>\n                                        {value > 0 && (\n                                            <AnimateButton>\n                                                <Button variant='outlined' size='large'\n                                                        onClick={(e) => handleChange(e, parseInt(value, 10) - 1)}>\n                                                    Back\n                                                </Button>\n                                            </AnimateButton>\n                                        )}\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n\n                            <Grid item alignContent='end'>\n                                {value > 0 && (\n                                    <AnimateButton>\n                                        <Button color='secondary' variant='contained' size='large'\n                                                onClick={handleWorkloadUpdate}>\n                                            Update <ProgressCircularControlled display={progressLoader}/>\n                                        </Button>\n                                    </AnimateButton>\n                                )}\n                            </Grid>\n\n                        </Grid>\n                    </CardActions>\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default DailyWorkloadEdit;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-calls/client.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/client/communicationLogActions.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/dashboard/casemanager/index.js",["1493","1494","1495","1496","1497","1498","1499","1500","1501","1502"],"import React from 'react';\r\n\r\n// material-ui\r\nimport {useTheme, makeStyles} from '@material-ui/styles';\r\nimport {Grid, Typography, useMediaQuery} from '@material-ui/core';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport {gridSpacing} from 'store/constant';\r\nimport IconNumberCard from 'ui-component/cards/IconNumberCard';\r\n\r\n\r\n// project imports\r\nimport NewClients from '../common/NewClients';\r\nimport Notifications from '../common/Notifications';\r\nimport InternalReferrals from '../common/InternalReferrals';\r\nimport ExternalReferrals from '../common/ExternalReferrals';\r\nimport ClientReferrals from '../common/ClientReferrals';\r\nimport InternalFollowUp from \"../common/InternalFollowUp\";\r\n\r\n// assets\r\nimport {IconShare, IconAccessPoint, IconCircles, IconCreditCard} from '@tabler/icons';\r\nimport MonetizationOnTwoToneIcon from '@material-ui/icons/MonetizationOnTwoTone';\r\nimport AccountCircleTwoTone from '@material-ui/icons/AccountCircleTwoTone';\r\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\r\nimport ExternalFollowUp from \"../common/ExternalFollowUp\";\r\n\r\n\r\n// style constant\r\nconst useStyles = makeStyles((theme) => ({\r\n    flatCardBody: {\r\n        '& >div': {\r\n            padding: '0px !important'\r\n        },\r\n        '& svg': {\r\n            width: '50px',\r\n            height: '50px',\r\n            color: theme.palette.secondary.main,\r\n            borderRadius: '14px',\r\n            padding: '10px',\r\n            backgroundColor: theme.palette.mode === 'dark' ? theme.palette.background.default : theme.palette.primary.light\r\n        }\r\n    },\r\n    flatCardBlock: {\r\n        padding: '20px',\r\n        borderLeft: '1px solid ',\r\n        borderBottom: '1px solid ',\r\n        borderLeftColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[200],\r\n        borderBottomColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[200]\r\n    }\r\n}));\r\n\r\n// ===========================|| ANALYTICS DASHBOARD ||=========================== //\r\n\r\nconst Analytics = () => {\r\n    const theme = useTheme();\r\n    const classes = useStyles();\r\n    const matchDownXs = useMediaQuery(theme.breakpoints.down('xs'));\r\n\r\n    return (\r\n        <Grid container spacing={gridSpacing}>\r\n            <Grid item xs={12} lg={12} md={12}>\r\n                <Grid container spacing={gridSpacing}>\r\n\r\n                    <Grid item xs={12} lg={6}>\r\n                        <IconNumberCard title=\"Clients Added\" primary=\"12\" color={theme.palette.primary.dark}\r\n                                        iconPrimary={AccountCircleTwoTone}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} lg={6}>\r\n                        <IconNumberCard title=\"Files Uploaded\" primary=\"120\" color={theme.palette.primary.dark}\r\n                                        iconPrimary={DescriptionTwoToneIcon}/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} lg={6} md={6}>\r\n                        <Notifications/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} lg={6} md={6}>\r\n                        <ClientReferrals/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} lg={6} md={6}>\r\n                        <InternalReferrals/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} lg={6} md={6}>\r\n                        <ExternalReferrals/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} lg={6} md={6}>\r\n                        <InternalFollowUp/>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} lg={6} md={6}>\r\n                        <ExternalFollowUp/>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Analytics;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/dashboard/client/index.js",["1503","1504","1505","1506","1507","1508","1509","1510","1511","1512","1513","1514","1515","1516","1517","1518"],"import React from 'react';\r\n\r\n// material-ui\r\nimport { useTheme, makeStyles } from '@material-ui/styles';\r\nimport { Grid, Typography, useMediaQuery } from '@material-ui/core';\r\n\r\n// project imports\r\nimport NewClients from '../common/NewClients';\r\nimport Notifications from '../common/Notifications';\r\nimport InternalReferrals from '../common/InternalReferrals';\r\nimport ExternalReferrals from '../common/ExternalReferrals';\r\nimport ClientReferrals from '../common/ClientReferrals';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { gridSpacing } from 'store/constant';\r\nimport IconNumberCard from 'ui-component/cards/IconNumberCard';\r\n\r\n// assets\r\nimport { IconShare, IconAccessPoint, IconCircles, IconCreditCard } from '@tabler/icons';\r\nimport MonetizationOnTwoToneIcon from '@material-ui/icons/MonetizationOnTwoTone';\r\nimport AccountCircleTwoTone from '@material-ui/icons/AccountCircleTwoTone';\r\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\r\n\r\n// style constant\r\nconst useStyles = makeStyles((theme) => ({\r\n    flatCardBody: {\r\n        '& >div': {\r\n            padding: '0px !important'\r\n        },\r\n        '& svg': {\r\n            width: '50px',\r\n            height: '50px',\r\n            color: theme.palette.secondary.main,\r\n            borderRadius: '14px',\r\n            padding: '10px',\r\n            backgroundColor: theme.palette.mode === 'dark' ? theme.palette.background.default : theme.palette.primary.light\r\n        }\r\n    },\r\n    flatCardBlock: {\r\n        padding: '20px',\r\n        borderLeft: '1px solid ',\r\n        borderBottom: '1px solid ',\r\n        borderLeftColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[200],\r\n        borderBottomColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[200]\r\n    }\r\n}));\r\n\r\n// ===========================|| ANALYTICS DASHBOARD ||=========================== //\r\n\r\nconst Analytics = () => {\r\n    const theme = useTheme();\r\n    const classes = useStyles();\r\n    const matchDownXs = useMediaQuery(theme.breakpoints.down('xs'));\r\n\r\n    return (\r\n        <Grid container spacing={gridSpacing}>\r\n            <Grid item xs={12} lg={12} md={6}>\r\n                <Grid container spacing={gridSpacing}>\r\n                    <Grid item xs={12}>\r\n                        <Notifications />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Analytics;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/client/visitorLogActions.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/common/common-menu-items-top.js",["1519"],"import React from 'react';\n\nimport menuData from './json/menu-items-top.json';\nimport menuUtils from \"./utils\";\n\nexport default menuData.roles.common_top.map(menuUtils.makeMenuItems);\n\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/dashboard/common/ExternalReferrals.js",["1520","1521"],"import React, {useEffect} from 'react';\r\n\r\n// material-ui\r\nimport {\r\n    Avatar, Button, CardActions, CardContent,\r\n    Chip, Divider,\r\n    Grid,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography\r\n} from '@material-ui/core';\r\n\r\n// assets\r\nimport MainCard from 'ui-component/cards/MainCard';\r\n\r\nimport notificationsApi from 'store/api-calls/share';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setExternalReferralData} from \"store/actions/dashboard/dashboardActions\";\r\nimport {convert_backend_datetime_to_ui} from \"utils/helpers/datetime\";\r\n\r\nconst ExternalReferrals = () => {\r\n    const dispatch = useDispatch();\r\n    const internalReferralStore = useSelector(state => state.dashboard.externalReferrals.list)\r\n\r\n    const fetchInternalReferralData = async () => {\r\n        const response = await notificationsApi.listReferralsForCurrentUser('external');\r\n        if ('result' in response && response.result) {\r\n            dispatch(setExternalReferralData(response.data))\r\n        } else {\r\n            dispatch(setExternalReferralData([]))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchInternalReferralData()\r\n    }, []);\r\n\r\n    function getTableHead() {\r\n        return <TableHead>\r\n            <TableRow>\r\n                <TableCell>Sender</TableCell>\r\n                <TableCell sx={{pl: 3}}>Type</TableCell>\r\n                <TableCell>Date</TableCell>\r\n                <TableCell align=\"right\" sx={{pr: 3}}>\r\n                    Action\r\n                </TableCell>\r\n            </TableRow>\r\n        </TableHead>;\r\n    }\r\n\r\n    function getTableBody() {\r\n        return <TableBody>\r\n            {internalReferralStore.slice(0, 3).map((row, index) => (\r\n                <TableRow hover key={index}>\r\n                    <TableCell sx={{pl: 3}}>\r\n                        <Grid container spacing={2} alignItems=\"center\" sx={{flexWrap: 'nowrap'}}>\r\n                            <Grid item xs zeroMinWidth>\r\n                                <Typography component=\"div\" variant=\"subtitle1\">\r\n                                    {row.communication_by.first_name}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </TableCell>\r\n                    <TableCell>{row.content_type}</TableCell>\r\n                    <TableCell>{convert_backend_datetime_to_ui(row.communication_datetime)}</TableCell>\r\n                    <TableCell align=\"right\" sx={{pr: 3}}>\r\n                        <Chip color=\"secondary\" label=\"View\" size=\"small\"/>\r\n                    </TableCell>\r\n                </TableRow>\r\n            ))}\r\n        </TableBody>;\r\n    }\r\n\r\n    return (<MainCard title=\"External Referrals\" content={false}>\r\n        <CardContent sx={{p: 0}}>\r\n            <TableContainer>\r\n                <Table>\r\n                    {getTableHead()}\r\n\r\n                    {getTableBody()}\r\n                </Table>\r\n            </TableContainer>\r\n        </CardContent>\r\n        <Divider/>\r\n        <CardActions sx={{justifyContent: 'flex-end'}}>\r\n            <Button variant=\"text\" size=\"small\">\r\n                View all Referrals\r\n            </Button>\r\n        </CardActions>\r\n    </MainCard>)\r\n};\r\n\r\nexport default ExternalReferrals;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/dashboard/common/NewClients.js",["1522"],"import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// material-ui\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport {Avatar, Button, CardActions, CardContent, Divider, Grid, Typography} from '@material-ui/core';\r\n\r\n// third party\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// assets\r\nimport WatchLaterTwoToneIcon from '@material-ui/icons/WatchLaterTwoTone';\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport AccountCircleTwoTone from '@material-ui/icons/AccountCircleTwoTone';\r\n\r\nimport Avatar1 from 'assets/images/users/avatar-1.png';\r\nimport Avatar2 from 'assets/images/users/avatar-2.png';\r\nimport Avatar3 from 'assets/images/users/avatar-3.png';\r\nimport Avatar4 from 'assets/images/users/avatar-4.png';\r\nimport Avatar5 from 'assets/images/users/avatar-5.png';\r\n\r\n// style constant\r\nconst useStyles = makeStyles((theme) => ({\r\n    textActive: {\r\n        width: '16px',\r\n        height: '16px',\r\n        verticalAlign: 'sub',\r\n        color: theme.palette.success.main\r\n    },\r\n    timeIcon: {\r\n        fontSize: '0.875rem',\r\n        marginRight: '2px',\r\n        verticalAlign: 'sub'\r\n    },\r\n    ScrollHeight: {\r\n        height: '370px'\r\n    }\r\n}));\r\n\r\n// ===========================|| DATA WIDGET - NEW CUSTOMERS CARD ||=========================== //\r\n\r\nconst NewClients = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <MainCard title='New Clients' content={false} iconPrimary={AccountCircleTwoTone}>\r\n            <PerfectScrollbar className={classes.ScrollHeight}>\r\n                <CardContent>\r\n                    <Grid container spacing={gridSpacing} alignItems=\"center\">\r\n                        <Grid item xs={12}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item>\r\n                                    <Avatar alt=\"coverimage\" src={Avatar1} />\r\n                                </Grid>\r\n                                <Grid item xs zeroMinWidth>\r\n                                    <Typography align=\"left\" component=\"div\" variant=\"subtitle1\">\r\n                                        Alex Thompson\r\n                                    </Typography>\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid item xs zeroMinWidth>\r\n                                            <Typography align=\"left\" component=\"div\" variant=\"subtitle2\">\r\n                                                Cheers!\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography align=\"left\" component=\"div\" variant=\"caption\">\r\n                                                <FiberManualRecordIcon className={classes.textActive} />\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item>\r\n                                    <Avatar alt=\"coverimage\" src={Avatar2} />\r\n                                </Grid>\r\n                                <Grid item xs zeroMinWidth>\r\n                                    <Typography align=\"left\" component=\"div\" variant=\"subtitle1\">\r\n                                        John Doue\r\n                                    </Typography>\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid item xs zeroMinWidth>\r\n                                            <Typography align=\"left\" component=\"div\" variant=\"subtitle2\">\r\n                                                stay hungry stay foolish!\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography align=\"left\" variant=\"caption\">\r\n                                                <FiberManualRecordIcon className={classes.textActive} />\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item>\r\n                                    <Avatar alt=\"coverimage\" src={Avatar3} />\r\n                                </Grid>\r\n                                <Grid item xs zeroMinWidth>\r\n                                    <Typography align=\"left\" component=\"div\" variant=\"subtitle1\">\r\n                                        Alex Thompson\r\n                                    </Typography>\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid item xs zeroMinWidth>\r\n                                            <Typography align=\"left\" component=\"div\" variant=\"subtitle2\">\r\n                                                Cheers!\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography align=\"left\" variant=\"caption\">\r\n                                                <WatchLaterTwoToneIcon className={classes.timeIcon} />\r\n                                                30 min ago\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item>\r\n                                    <Avatar alt=\"coverimage\" src={Avatar4} />\r\n                                </Grid>\r\n                                <Grid item xs zeroMinWidth>\r\n                                    <Typography align=\"left\" component=\"div\" variant=\"subtitle1\">\r\n                                        John Doue\r\n                                    </Typography>\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid item xs zeroMinWidth>\r\n                                            <Typography align=\"left\" component=\"div\" variant=\"subtitle2\">\r\n                                                stay hungry stay foolish!\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography align=\"left\" variant=\"caption\">\r\n                                                <WatchLaterTwoToneIcon className={classes.timeIcon} />\r\n                                                10 min ago\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item>\r\n                                    <Avatar alt=\"coverimage\" src={Avatar5} />\r\n                                </Grid>\r\n                                <Grid item xs zeroMinWidth>\r\n                                    <Typography align=\"left\" component=\"div\" variant=\"subtitle1\">\r\n                                        Shirley Hoe\r\n                                    </Typography>\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid item xs zeroMinWidth>\r\n                                            <Typography align=\"left\" component=\"div\" variant=\"subtitle2\">\r\n                                                Cheers!\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography align=\"left\" variant=\"caption\">\r\n                                                <WatchLaterTwoToneIcon className={classes.timeIcon} />\r\n                                                30 min ago\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item>\r\n                                    <Avatar alt=\"coverimage\" src={Avatar1} />\r\n                                </Grid>\r\n                                <Grid item xs zeroMinWidth>\r\n                                    <Typography align=\"left\" component=\"div\" variant=\"subtitle1\">\r\n                                        Alex Thompson\r\n                                    </Typography>\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid item xs zeroMinWidth>\r\n                                            <Typography align=\"left\" component=\"div\" variant=\"subtitle2\">\r\n                                                Cheers!\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography align=\"left\" variant=\"caption\">\r\n                                                <FiberManualRecordIcon className={classes.textActive} />\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item>\r\n                                    <Avatar alt=\"coverimage\" src={Avatar2} />\r\n                                </Grid>\r\n                                <Grid item xs zeroMinWidth>\r\n                                    <Typography align=\"left\" component=\"div\" variant=\"subtitle1\">\r\n                                        John Doue\r\n                                    </Typography>\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid item xs zeroMinWidth>\r\n                                            <Typography align=\"left\" component=\"div\" variant=\"subtitle2\">\r\n                                                stay hungry stay foolish!\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography align=\"left\" variant=\"caption\">\r\n                                                <FiberManualRecordIcon className={classes.textActive} />\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item>\r\n                                    <Avatar alt=\"coverimage\" src={Avatar3} />\r\n                                </Grid>\r\n                                <Grid item xs zeroMinWidth>\r\n                                    <Typography align=\"left\" component=\"div\" variant=\"subtitle1\">\r\n                                        Alex Thompson\r\n                                    </Typography>\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid item xs zeroMinWidth>\r\n                                            <Typography align=\"left\" component=\"div\" variant=\"subtitle2\">\r\n                                                Cheers!\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography align=\"left\" variant=\"caption\">\r\n                                                <WatchLaterTwoToneIcon className={classes.timeIcon} />\r\n                                                30 min ago\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item>\r\n                                    <Avatar alt=\"coverimage\" src={Avatar4} />\r\n                                </Grid>\r\n                                <Grid item xs zeroMinWidth>\r\n                                    <Typography align=\"left\" component=\"div\" variant=\"subtitle1\">\r\n                                        John Doue\r\n                                    </Typography>\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid item xs zeroMinWidth>\r\n                                            <Typography align=\"left\" component=\"div\" variant=\"subtitle2\">\r\n                                                stay hungry stay foolish!\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography align=\"left\" variant=\"caption\">\r\n                                                <WatchLaterTwoToneIcon className={classes.timeIcon} />\r\n                                                10 min ago\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item>\r\n                                    <Avatar alt=\"coverimage\" src={Avatar5} />\r\n                                </Grid>\r\n                                <Grid item xs zeroMinWidth>\r\n                                    <Typography align=\"left\" component=\"div\" variant=\"subtitle1\">\r\n                                        Shirley Hoe\r\n                                    </Typography>\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid item xs zeroMinWidth>\r\n                                            <Typography align=\"left\" component=\"div\" variant=\"subtitle2\">\r\n                                                Cheers!\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Typography align=\"left\" variant=\"caption\">\r\n                                                <WatchLaterTwoToneIcon className={classes.timeIcon} />\r\n                                                30 min ago\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </PerfectScrollbar>\r\n            <Divider />\r\n            <CardActions sx={{ justifyContent: 'flex-end' }}>\r\n                <Button variant=\"text\" size=\"small\">\r\n                    View all New Clients\r\n                </Button>\r\n            </CardActions>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default NewClients;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/dashboard/common/InternalReferrals.js",["1523","1524"],"import React, {useEffect} from 'react';\r\n\r\n// material-ui\r\nimport {\r\n    Avatar, Button, CardActions, CardContent,\r\n    Chip, Divider,\r\n    Grid,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography\r\n} from '@material-ui/core';\r\n\r\n// assets\r\nimport MainCard from 'ui-component/cards/MainCard';\r\n\r\nimport notificationsApi from 'store/api-calls/share';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setInternalReferralData} from \"store/actions/dashboard/dashboardActions\";\r\nimport {convert_backend_datetime_to_ui} from \"utils/helpers/datetime\";\r\n\r\nconst InternalReferrals = () => {\r\n    const dispatch = useDispatch();\r\n    const internalReferralStore = useSelector(state => state.dashboard.internalReferrals.list)\r\n\r\n    const fetchInternalReferralData = async () => {\r\n        const response = await notificationsApi.listReferralsForCurrentUser('internal');\r\n        if ('result' in response && response.result) {\r\n            dispatch(setInternalReferralData(response.data))\r\n        } else {\r\n            dispatch(setInternalReferralData([]))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchInternalReferralData()\r\n    }, []);\r\n\r\n    function getTableHead() {\r\n        return <TableHead>\r\n            <TableRow>\r\n                <TableCell>Sender</TableCell>\r\n                <TableCell sx={{pl: 3}}>Type</TableCell>\r\n                <TableCell>Date</TableCell>\r\n                <TableCell align=\"right\" sx={{pr: 3}}>\r\n                    Action\r\n                </TableCell>\r\n            </TableRow>\r\n        </TableHead>;\r\n    }\r\n\r\n    function getTableBody() {\r\n        return <TableBody>\r\n            {internalReferralStore.slice(0, 3).map((row, index) => (\r\n                <TableRow hover key={index}>\r\n                    <TableCell sx={{pl: 3}}>\r\n                        <Grid container spacing={2} alignItems=\"center\" sx={{flexWrap: 'nowrap'}}>\r\n                            <Grid item xs zeroMinWidth>\r\n                                <Typography component=\"div\" variant=\"subtitle1\">\r\n                                    {row.communication_by.first_name}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </TableCell>\r\n                    <TableCell>{row.content_type}</TableCell>\r\n                    <TableCell>{convert_backend_datetime_to_ui(row.communication_datetime)}</TableCell>\r\n                    <TableCell align=\"right\" sx={{pr: 3}}>\r\n                        <Chip color=\"secondary\" label=\"View\" size=\"small\"/>\r\n                    </TableCell>\r\n                </TableRow>\r\n            ))}\r\n        </TableBody>;\r\n    }\r\n\r\n    return (<MainCard title=\"Internal Referrals\" content={false}>\r\n        <CardContent sx={{p: 0}}>\r\n            <TableContainer>\r\n                <Table>\r\n                    {getTableHead()}\r\n\r\n                    {getTableBody()}\r\n                </Table>\r\n            </TableContainer>\r\n        </CardContent>\r\n        <Divider/>\r\n        <CardActions sx={{justifyContent: 'flex-end'}}>\r\n            <Button variant=\"text\" size=\"small\">\r\n                View all Referrals\r\n            </Button>\r\n        </CardActions>\r\n    </MainCard>)\r\n};\r\n\r\nexport default InternalReferrals;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/dashboard/common/ClientReferrals.js",["1525","1526","1527"],"import React from 'react';\r\n\r\n// material-ui\r\nimport {\r\n    Avatar, Button, CardActions, CardContent,\r\n    Chip, Divider,\r\n    Grid,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography\r\n} from '@material-ui/core';\r\n\r\n// assets\r\nimport Avatar1 from 'assets/images/users/avatar-1.png';\r\nimport Avatar2 from 'assets/images/users/avatar-2.png';\r\nimport Avatar3 from 'assets/images/users/avatar-3.png';\r\nimport Avatar4 from 'assets/images/users/avatar-4.png';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\n\r\n// table data\r\nfunction createData(avtar, name, designation, product, date, badgeText, badgeType) {\r\n    return {avtar, name, designation, product, date, badgeText, badgeType};\r\n}\r\n\r\nconst rows = [\r\n    createData(Avatar1, 'John Deo', '', 'Case Manager', 'Jun, 26', 'View', 'secondary'),\r\n];\r\n\r\n// ===========================|| DATA WIDGET - PROJECT TABLE CARD ||=========================== //\r\n\r\nconst ClientReferrals = () => (\r\n    <MainCard title=\"Review Board Referrals\" content={false}>\r\n        <CardContent sx={{ p: 0 }}>\r\n            <TableContainer>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Name</TableCell>\r\n                            <TableCell sx={{pl: 3}}>Assigned</TableCell>\r\n                            <TableCell>Date</TableCell>\r\n                            <TableCell align=\"right\" sx={{pr: 3}}>\r\n                                Action\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.map((row, index) => (\r\n                            <TableRow hover key={index}>\r\n                                <TableCell sx={{pl: 3}}>\r\n                                    <Grid container spacing={2} alignItems=\"center\" sx={{flexWrap: 'nowrap'}}>\r\n                                        <Grid item>\r\n                                            <Avatar alt=\"User 1\"/>\r\n                                        </Grid>\r\n                                        <Grid item xs zeroMinWidth>\r\n                                            <Typography component=\"div\" align=\"left\" variant=\"subtitle1\">\r\n                                                {row.name}\r\n                                            </Typography>\r\n                                            <Typography component=\"div\" align=\"left\" variant=\"subtitle2\">\r\n                                                {row.designation}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </TableCell>\r\n                                <TableCell>{row.product}</TableCell>\r\n                                <TableCell>{row.date}</TableCell>\r\n                                <TableCell align=\"right\" sx={{pr: 3}}>\r\n                                    <Chip color={row.badgeType} label={row.badgeText} size=\"small\"/>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </CardContent>\r\n        <Divider />\r\n        <CardActions sx={{ justifyContent: 'flex-end' }}>\r\n            <Button variant=\"text\" size=\"small\">\r\n                View all Referrals\r\n            </Button>\r\n        </CardActions>\r\n    </MainCard>\r\n\r\n\r\n);\r\n\r\nexport default ClientReferrals;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/dashboard/common/InternalFollowUp.js",["1528","1529"],"import React, {useEffect} from 'react';\r\n\r\n// material-ui\r\nimport {\r\n    Avatar, Button, CardActions, CardContent,\r\n    Chip, Divider,\r\n    Grid,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography\r\n} from '@material-ui/core';\r\n\r\n// assets\r\nimport MainCard from 'ui-component/cards/MainCard';\r\n\r\nimport notificationsApi from 'store/api-calls/share';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setInternalFollowUpData} from \"store/actions/dashboard/dashboardActions\";\r\nimport {convert_backend_datetime_to_ui} from \"utils/helpers/datetime\";\r\n\r\nconst InternalFollowUp = () => {\r\n    const dispatch = useDispatch();\r\n    const internalFollowUpStore = useSelector(state => state.dashboard.internalFollowUp.list)\r\n\r\n    const fetchInternalFollowUpData = async () => {\r\n        const response = await notificationsApi.listFollowUpsForCurrentUser('internal');\r\n        if ('result' in response && response.result) {\r\n            dispatch(setInternalFollowUpData(response.data))\r\n        } else {\r\n            dispatch(setInternalFollowUpData([]))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchInternalFollowUpData()\r\n    }, []);\r\n\r\n    function getTableHead() {\r\n        return <TableHead>\r\n            <TableRow>\r\n                <TableCell>Sender</TableCell>\r\n                <TableCell sx={{pl: 3}}>Type</TableCell>\r\n                <TableCell>Date</TableCell>\r\n                <TableCell align=\"right\" sx={{pr: 3}}>\r\n                    Action\r\n                </TableCell>\r\n            </TableRow>\r\n        </TableHead>;\r\n    }\r\n\r\n    function getTableBody() {\r\n        return <TableBody>\r\n            {internalFollowUpStore.slice(0, 3).map((row, index) => (\r\n                <TableRow hover key={index}>\r\n                    <TableCell sx={{pl: 3}}>\r\n                        <Grid container spacing={2} alignItems=\"center\" sx={{flexWrap: 'nowrap'}}>\r\n                            <Grid item xs zeroMinWidth>\r\n                                <Typography component=\"div\" variant=\"subtitle1\">\r\n                                    {row.communication_by.first_name}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </TableCell>\r\n                    <TableCell>{row.content_type}</TableCell>\r\n                    <TableCell>{convert_backend_datetime_to_ui(row.communication_datetime)}</TableCell>\r\n                    <TableCell align=\"right\" sx={{pr: 3}}>\r\n                        <Chip color=\"secondary\" label=\"View\" size=\"small\"/>\r\n                    </TableCell>\r\n                </TableRow>\r\n            ))}\r\n        </TableBody>;\r\n    }\r\n\r\n    return (<MainCard title=\"Internal Follow Up Requests\" content={false}>\r\n        <CardContent sx={{p: 0}}>\r\n            <TableContainer>\r\n                <Table>\r\n                    {getTableHead()}\r\n\r\n                    {getTableBody()}\r\n                </Table>\r\n            </TableContainer>\r\n        </CardContent>\r\n        <Divider/>\r\n        <CardActions sx={{justifyContent: 'flex-end'}}>\r\n            <Button variant=\"text\" size=\"small\">\r\n                View all Follow Up Requests\r\n            </Button>\r\n        </CardActions>\r\n    </MainCard>)\r\n};\r\n\r\nexport default InternalFollowUp;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/dashboard/common/ExternalFollowUp.js",["1530","1531"],"import React, {useEffect} from 'react';\r\n\r\n// material-ui\r\nimport {\r\n    Avatar, Button, CardActions, CardContent,\r\n    Chip, Divider,\r\n    Grid,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography\r\n} from '@material-ui/core';\r\n\r\n// assets\r\nimport MainCard from 'ui-component/cards/MainCard';\r\n\r\nimport notificationsApi from 'store/api-calls/share';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setExternalFollowUpData} from \"store/actions/dashboard/dashboardActions\";\r\nimport {convert_backend_datetime_to_ui} from \"utils/helpers/datetime\";\r\n\r\nconst ExternalFollowUp = () => {\r\n    const dispatch = useDispatch();\r\n    const externalFollowUpStore = useSelector(state => state.dashboard.externalFollowUp.list)\r\n\r\n    const fetchExternalFollowUpData = async () => {\r\n        const response = await notificationsApi.listFollowUpsForCurrentUser('external');\r\n        if ('result' in response && response.result) {\r\n            dispatch(setExternalFollowUpData(response.data))\r\n        } else {\r\n            dispatch(setExternalFollowUpData([]))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchExternalFollowUpData();\r\n    }, []);\r\n\r\n    function getTableHead() {\r\n        return <TableHead>\r\n            <TableRow>\r\n                <TableCell>Sender</TableCell>\r\n                <TableCell sx={{pl: 3}}>Type</TableCell>\r\n                <TableCell>Date</TableCell>\r\n                <TableCell align=\"right\" sx={{pr: 3}}>\r\n                    Action\r\n                </TableCell>\r\n            </TableRow>\r\n        </TableHead>;\r\n    }\r\n\r\n    function getTableBody() {\r\n        return <TableBody>\r\n            {externalFollowUpStore.slice(0, 3).map((row, index) => (\r\n                <TableRow hover key={index}>\r\n                    <TableCell sx={{pl: 3}}>\r\n                        <Grid container spacing={2} alignItems=\"center\" sx={{flexWrap: 'nowrap'}}>\r\n                            <Grid item xs zeroMinWidth>\r\n                                <Typography component=\"div\" variant=\"subtitle1\">\r\n                                    {row.communication_by.first_name}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </TableCell>\r\n                    <TableCell>{row.content_type}</TableCell>\r\n                    <TableCell>{convert_backend_datetime_to_ui(row.communication_datetime)}</TableCell>\r\n                    <TableCell align=\"right\" sx={{pr: 3}}>\r\n                        <Chip color=\"secondary\" label=\"View\" size=\"small\"/>\r\n                    </TableCell>\r\n                </TableRow>\r\n            ))}\r\n        </TableBody>;\r\n    }\r\n\r\n    return (<MainCard title=\"External Follow Up Requests\" content={false}>\r\n        <CardContent sx={{p: 0}}>\r\n            <TableContainer>\r\n                <Table>\r\n                    {getTableHead()}\r\n\r\n                    {getTableBody()}\r\n                </Table>\r\n            </TableContainer>\r\n        </CardContent>\r\n        <Divider/>\r\n        <CardActions sx={{justifyContent: 'flex-end'}}>\r\n            <Button variant=\"text\" size=\"small\">\r\n                View all Follow Up Requests\r\n            </Button>\r\n        </CardActions>\r\n    </MainCard>)\r\n};\r\n\r\nexport default ExternalFollowUp;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/dashboard/common/Notifications.js",["1532","1533"],"import PropTypes from 'prop-types';\r\nimport React, {useEffect} from 'react';\r\n\r\n// material-ui\r\nimport {makeStyles} from '@material-ui/styles';\r\nimport {Avatar, Button, CardActions, CardContent, Divider, Grid, Typography} from '@material-ui/core';\r\n\r\n// third party\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport {gridSpacing} from 'store/constant';\r\n\r\n// assets\r\n\r\nimport AccountCircleTwoTone from '@material-ui/icons/AccountCircleTwoTone';\r\nimport WatchLaterTwoToneIcon from '@material-ui/icons/WatchLaterTwoTone';\r\n\r\nimport JWTContext from \"contexts/JWTContext\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport dashboardMessagesHelper from \"utils/helpers/dashboard-messages\";\r\nimport {setNewActivityNotificationForDashboard} from \"store/actions/dashboard/dashboardActions\"\r\nimport notificationsApi from 'store/api-calls/share';\r\n\r\n\r\n// style constant\r\nconst useStyles = makeStyles((theme) => ({\r\n    textActive: {\r\n        width: '16px',\r\n        height: '16px',\r\n        verticalAlign: 'sub',\r\n        color: theme.palette.success.main\r\n    },\r\n    timeIcon: {\r\n        fontSize: '0.875rem',\r\n        marginRight: '2px',\r\n        verticalAlign: 'sub'\r\n    },\r\n\r\n}));\r\n\r\nconst ActivityNotifications = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const dashboard_notifications = useSelector(store => store.dashboard.generalNotifications.list_dashboard)\r\n\r\n    const jwtContext = React.useContext(JWTContext);\r\n    const {ns: notificationServiceClient} = jwtContext;\r\n\r\n    notificationServiceClient.onmessage = (e) => {\r\n        const notificationData = JSON.parse(e.data)\r\n        dashboard_notifications.unshift(notificationData.value)\r\n        dispatch(setNewActivityNotificationForDashboard(dashboard_notifications))\r\n    }\r\n\r\n    const fetchAllNotifications = async () => {\r\n        const response = await notificationsApi.listAllActivityNotifications()\r\n        if ('results' in response && response.count > 0) {\r\n            dispatch(setNewActivityNotificationForDashboard(response.results))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchAllNotifications()\r\n    }, [])\r\n\r\n\r\n    const makeNotificationItem = () => {\r\n        const notificationListForDashboard = dashboard_notifications.slice(0, 5)\r\n        if (notificationListForDashboard.length > 0) {\r\n            return dashboard_notifications.map((notification) => (\r\n                <Grid item xs={12}>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item>\r\n                            <Avatar alt=\"coverimage\"/>\r\n                        </Grid>\r\n                        <Grid item xs zeroMinWidth>\r\n                            <Typography align=\"left\" component=\"div\" variant=\"subtitle1\">\r\n                                {notification.by.user.fullname}\r\n                            </Typography>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs zeroMinWidth>\r\n                                    <Typography align=\"left\" component=\"div\">\r\n                                        {dashboardMessagesHelper.prepareDashboardMessage(notification)}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Typography align=\"left\" variant=\"caption\">\r\n                                        <WatchLaterTwoToneIcon className={classes.timeIcon}/>\r\n                                        {notification.timesince}\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            ))\r\n        }\r\n        return (<Grid item xs={12}>\r\n            No new notifications to show!\r\n        </Grid>)\r\n    }\r\n\r\n    return (\r\n        <MainCard title='Notifications' content={false} iconPrimary={AccountCircleTwoTone}>\r\n            <PerfectScrollbar className={classes.ScrollHeight}>\r\n                <CardContent>\r\n                    <Grid container spacing={gridSpacing} alignItems=\"center\">\r\n                        {makeNotificationItem()}\r\n                    </Grid>\r\n                </CardContent>\r\n            </PerfectScrollbar>\r\n            <Divider/>\r\n            <CardActions sx={{justifyContent: 'flex-end'}}>\r\n                <Button variant=\"text\" size=\"small\">\r\n                    View all Notifications\r\n                </Button>\r\n            </CardActions>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default ActivityNotifications;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/cards/IconNumberCard.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-calls/share.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/utils/helpers/datetime.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/dashboard/dashboardActions.js",["1534"],"import * as actionTypes from 'store/actionTypes';\nimport {DASHBOARD_SET_ACTIVITY_NOTIFICATIONS_DATA} from \"store/actionTypes\";\n\n\nexport const setInternalReferralData = (referralData) => ({\n    type: actionTypes.DASHBOARD_SET_INTERNAL_REFERRAL_DATA,\n    data: referralData\n});\n\nexport const setExternalReferralData = (referralData) => ({\n    type: actionTypes.DASHBOARD_SET_EXTERNAL_REFERRAL_DATA,\n    data: referralData\n});\n\nexport const setInternalFollowUpData = (followUpData) => ({\n    type: actionTypes.DASHBOARD_SET_INTERNAL_FOLLOWUP_DATA,\n    data: followUpData\n});\n\nexport const setExternalFollowUpData = (followUpData) => ({\n    type: actionTypes.DASHBOARD_SET_EXTERNAL_FOLLOWUP_DATA,\n    data: followUpData\n});\n\nexport const setNewActivityNotificationForDashboard = (notificationList) => ({\n    type: actionTypes.DASHBOARD_SET_ACTIVITY_NOTIFICATIONS_DATA,\n    data: notificationList\n});\n\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/utils/helpers/dashboard-messages.js",["1535","1536"],"import {NOTIFICATION_OBJECT_TYPE} from \"store/constant\";\n\nconst messageActionParse = {\n    \"CREATED\": \"has added a new\",\n    \"UPDATED\": \"has updated the\"\n}\n\nexport default {\n    prepareDashboardMessage(data) {\n        const {\n            type: action_type, otype: object_type_display, otype_code: object_type_code, by: {\n                user: {\n                    fullname: notification_sender_name\n                }\n            }\n        } = data;\n\n        const action_parsed = messageActionParse[action_type]\n        return `${notification_sender_name} ${action_parsed} ${object_type_display.toLowerCase().trim()}`\n    }\n}","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/community-paramedic/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/client/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/clinician/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/external-partner/index.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/chat/ChatHistory.js",["1537","1538","1539","1540"],"import * as PropTypes from 'prop-types';\r\nimport React, {useCallback, useEffect, useRef} from 'react';\r\n\r\n// material-ui\r\nimport {Card, CardContent, Grid, Typography} from '@material-ui/core';\r\n\r\n// project imports\r\nimport {gridSpacing} from 'store/constant';\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport messagingApi from \"store/api-calls/messaging\";\r\nimport {setActiveRecipientMessageHistory} from \"store/actions/messagingActions\";\r\n\r\n// ===========================|| CHAT MESSAGE HISTORY ||=========================== //\r\n\r\nconst ChatHistory = ({theme, user}) => {\r\n    const wrapper = useRef(document.createElement('div'));\r\n    const el = wrapper.current;\r\n    const scrollToBottom = useCallback(() => {\r\n        el.scrollIntoView(false);\r\n    }, [el]); // scroll to bottom when new message is sent or received\r\n    const dispatch = useDispatch();\r\n\r\n    const {username: recipientUsername} = user\r\n    const messagesHistory = useSelector(store => store.messaging.activeChats)\r\n    const recipientMessages = messagesHistory?.[recipientUsername]?.messages\r\n\r\n    const getRecipientMessageHistory = async () => {\r\n        const response = await messagingApi.getMessagesHistory()\r\n        // dispatch(setActiveRecipientMessageHistory(response))\r\n    }\r\n\r\n    useEffect(() => {\r\n        // getRecipientMessageHistory();\r\n        scrollToBottom()\r\n    }, [recipientMessages?.length, scrollToBottom]);\r\n\r\n    const renderMessages = () => {\r\n        if (recipientMessages) {\r\n            return recipientMessages.map((message, index) => (\r\n                <React.Fragment key={index}>\r\n                    {message.sender !== user.username ? (\r\n                        <Grid item xs={12}>\r\n                            <Grid container spacing={gridSpacing}>\r\n                                <Grid item xs={2}/>\r\n                                <Grid item xs={10}>\r\n                                    <Card\r\n                                        sx={{\r\n                                            display: 'inline-block',\r\n                                            float: 'right',\r\n                                            bgcolor:\r\n                                                theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.primary.light\r\n                                        }}\r\n                                    >\r\n                                        <CardContent\r\n                                            sx={{p: '16px', pb: '16px !important', width: 'fit-content', ml: 'auto'}}>\r\n                                            <Grid container spacing={1}>\r\n                                                <Grid item xs={12}>\r\n                                                    <Typography variant=\"body2\"\r\n                                                                color={theme.palette.mode === 'dark' ? 'dark.900' : ''}>\r\n                                                        {message.message}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                                <Grid item xs={12}>\r\n                                                    <Typography\r\n                                                        align=\"right\"\r\n                                                        variant=\"subtitle2\"\r\n                                                        color={theme.palette.mode === 'dark' ? 'dark.900' : ''}\r\n                                                    >\r\n                                                        {message.sent_at}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    ) : (\r\n                        <Grid item xs={12}>\r\n                            <Grid container spacing={gridSpacing}>\r\n                                <Grid item xs={12} sm={7}>\r\n                                    <Card\r\n                                        sx={{\r\n                                            display: 'inline-block',\r\n                                            float: 'left',\r\n                                            background:\r\n                                                theme.palette.mode === 'dark' ? theme.palette.dark[900] : theme.palette.secondary.light\r\n                                        }}\r\n                                    >\r\n                                        <CardContent sx={{p: '16px', pb: '16px !important'}}>\r\n                                            <Grid container spacing={1}>\r\n                                                <Grid item xs={12}>\r\n                                                    <Typography variant=\"body2\">{message.message}</Typography>\r\n                                                </Grid>\r\n                                                <Grid item xs={12}>\r\n                                                    <Typography align=\"right\" variant=\"subtitle2\">\r\n                                                        {message.sent_at}\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    )}\r\n                </React.Fragment>\r\n            ));\r\n        }\r\n        return <></>;\r\n    };\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <Grid container spacing={gridSpacing} ref={wrapper}>\r\n                {scrollToBottom()}\r\n                {renderMessages()}\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nChatHistory.propTypes = {\r\n    theme: PropTypes.object,\r\n    user: PropTypes.object\r\n};\r\n\r\nexport default ChatHistory;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/daily-workload/add/forms/details.js",["1541","1542","1543","1544","1545","1546","1547","1548","1549","1550","1551","1552"],"import React, {useEffect, useState, useRef} from 'react';\n\n// material-ui\nimport {CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\nimport DatePicker from '@material-ui/lab/DatePicker';\nimport AdapterDateFns from '@material-ui/lab/AdapterDateFns';\nimport LocalizationProvider from '@material-ui/lab/LocalizationProvider';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport MaskedInput from 'react-text-mask';\n\nimport caseManagerApi from 'store/api-calls/case-manager';\nimport {setDailyWorkLoadDetails, setAddDailyWorkLoadDate} from \"store/actions/caseManager/dailyWorkloadActions\";\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nconst Details = ({editMode}) => {\n    const dispatch = useDispatch()\n    const [isEditMode, setIsEditMode] = useState(false);\n    const dailyWorkloadData = useSelector(state => state.caseManager.dailyWorkload.add)\n    const [valueBasic, setValueBasic] = React.useState(new Date());\n\n    useEffect(() => {\n        if (editMode) {\n            setIsEditMode(true);\n        }\n    }, [editMode])\n\n    const handleWorkloadDateChange = (date) => {\n        dispatch(setAddDailyWorkLoadDate(date))\n    }\n\n    const formik = useFormik({\n        initialValues: {\n            daily_workload_date: dailyWorkloadData.daily_workload_date,\n            service_recipient_travel: dailyWorkloadData.service_recipient_travel,\n            functional_center: dailyWorkloadData.functional_center\n        },\n        enableReinitialize: true,\n        validate: values => {\n            const valuesData = {\n                ...values\n            }\n            dispatch(setDailyWorkLoadDetails(valuesData));\n        }\n    });\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} sm={12} lg={6} md={6}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                    <DatePicker\n                        renderInput={(props) => <TextField fullWidth {...props} />}\n                        label=\"Date & Time\"\n                        value={formik.values.daily_workload_date}\n                        onChange={handleWorkloadDateChange}\n                        name='daily_workload_date'\n                        id=\"daily_workload_date\"\n                        format=\"YYYY-MM-DD\"\n                    />\n                </LocalizationProvider>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default Details;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/daily-workload/add/forms/client-caseload.js",["1553","1554","1555","1556"],"import React, {useEffect, useState} from 'react';\n\n// material-ui\nimport {CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport MaskedInput from 'react-text-mask';\n\n// redux\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setDailyWorkLoadDetails} from \"store/actions/caseManager/dailyWorkloadActions\";\nimport {useFormik} from \"formik\";\n\nconst ClientCaseload = ({retrieveMode}) => {\n    const dailyWorkloadData = useSelector(state => state.caseManager.dailyWorkload.add)\n    const dispatch = useDispatch()\n    const [isRetrieveMode, setIsRetrieveMode] = useState(false);\n\n    useEffect(() => {\n        // Switch to retrieve mode if set in the props\n        if (retrieveMode) {\n            setIsRetrieveMode(true)\n        }\n    }, [retrieveMode])\n\n    const formik = useFormik({\n        initialValues: {\n            client_caseload_casemanagement_number_clients: dailyWorkloadData.client_caseload_casemanagement_number_clients,\n            client_caseload_casemanagement_total_time: dailyWorkloadData.client_caseload_casemanagement_total_time,\n            client_caseload_regular_number_clients: dailyWorkloadData.client_caseload_regular_number_clients,\n            client_caseload_regular_total_time: dailyWorkloadData.client_caseload_regular_total_time\n        },\n        validate: values => {\n            const valuesData = {\n                ...values\n            }\n            if (!retrieveMode) {\n                dispatch(setDailyWorkLoadDetails(valuesData));\n            }\n        }\n    });\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} sm={8}>\n                <SubCard title='Case Management Clients'>\n                    <CardContent>\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item xs={12} sm={8}>\n                                <TextField type='number'\n                                           fullWidth\n                                           label='Number of Case Management Clients'\n                                           defaultValue={formik.values.client_caseload_casemanagement_number_clients}\n                                           onChange={formik.handleChange}\n                                           name='client_caseload_casemanagement_number_clients'\n                                           id=\"client_caseload_casemanagement_number_clients\"\n                                           disabled={isRetrieveMode}\n                                           value={formik.values.client_caseload_casemanagement_number_clients}\n                                />\n                            </Grid>\n\n                            <Grid item xs={12} sm={8}>\n                                <MaskedInput\n                                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                                    className=\"form-control\"\n                                    label=\"Total time spent\"\n                                    guide={false}\n                                    defaultValue={formik.values.client_caseload_casemanagement_total_time}\n                                    onChange={formik.handleChange}\n                                    name='client_caseload_casemanagement_total_time'\n                                    id=\"client_caseload_casemanagement_total_time\"\n                                    disabled={isRetrieveMode}\n                                    value={formik.values.client_caseload_casemanagement_total_time}\n                                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                       defaultValue=\"\"/>}\n                                />\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </SubCard>\n            </Grid>\n\n            <Grid item xs={12} sm={8}>\n                <SubCard title='Regular Clients'>\n                    <CardContent>\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item xs={12} sm={8}>\n                                <TextField type='number'\n                                           fullWidth\n                                           label='Number of Regular Clients'\n                                           defaultValue={formik.values.client_caseload_regular_number_clients}\n                                           onChange={formik.handleChange}\n                                           name='client_caseload_regular_number_clients'\n                                           id=\"client_caseload_regular_number_clients\"\n                                           disabled={isRetrieveMode}\n                                           value={formik.values.client_caseload_regular_number_clients}\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={8}>\n                                <MaskedInput\n                                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                                    className=\"form-control\"\n                                    label=\"Total time spent\"\n                                    guide={false}\n                                    defaultValue={formik.values.client_caseload_regular_total_time}\n                                    onChange={formik.handleChange}\n                                    name='client_caseload_regular_total_time'\n                                    id=\"client_caseload_regular_total_time\"\n                                    value={formik.values.client_caseload_regular_total_time}\n                                    disabled={isRetrieveMode}\n                                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                       defaultValue=\"\"/>}\n                                />\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </SubCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ClientCaseload;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/community-paramedic/prepare-menu-items.js",["1557"],"import React from 'react';\r\nimport menuUtils from \"../common/utils\";\r\nimport menuData from './json/menu-items.json';\r\n\r\nexport default menuData.roles['community-paramedic'].map(menuUtils.makeMenuItems);\r\n\r\n\r\n\r\n\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/clinician/prepare-menu-items.js",["1558"],"import React from 'react';\r\nimport menuUtils from \"../common/utils\";\r\nimport menuData from './json/menu-items.json';\r\n\r\nexport default menuData.roles?.clinician.map(menuUtils.makeMenuItems);\r\n\r\n\r\n\r\n\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/client/prepare-menu-items.js",["1559"],"import React from 'react';\r\nimport menuUtils from \"../common/utils\";\r\nimport menuData from './json/menu-items.json';\r\n\r\nexport default menuData.roles.client.map(menuUtils.makeMenuItems);\r\n\r\n\r\n\r\n\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/menu-items/external-partner/prepare-menu-items.js",["1560"],"import React from 'react';\r\nimport menuUtils from \"../common/utils\";\r\nimport menuData from './json/menu-items.json';\r\n\r\nexport default menuData.roles['external-partner'].map(menuUtils.makeMenuItems);\r\n\r\n\r\n\r\n\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/chat/UsersSearchList.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/dashboard/generalNotifications.js",["1561"],"import * as actionTypes from 'store/actionTypes';\nimport {DASHBOARD_SET_ALL_ACTIVITY_NOTIFICATIONS_DATA} from \"store/actionTypes\";\n\n\nexport const initialState = {\n    list_dashboard: [],\n    list_all: [],\n}\n\n\nconst generalNotificationReducer = (state = initialState, action) => {\n    switch (action.type) {\n        default: {\n            return {...state};\n        }\n\n        case actionTypes.DASHBOARD_SET_ACTIVITY_NOTIFICATIONS_DATA: {\n            const {data} = action\n            return {\n                ...state,\n                list_dashboard: [\n                    ...data\n                ]\n            };\n        }\n\n        case actionTypes.DASHBOARD_SET_ALL_ACTIVITY_NOTIFICATIONS_DATA: {\n            return {...state};\n        }\n    }\n};\n\nexport default generalNotificationReducer;\n\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/dashboard/reviewBoardReferrals.js",["1562"],"import * as actionTypes from 'store/actionTypes';\n\nexport const initialState = {\n    list: {},\n}\n\n\nconst reviewBoardReferralsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        default: {\n            return {...state};\n        }\n    }\n};\n\nexport default reviewBoardReferralsReducer;\n\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-calls/messaging.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/client/personalInformation.js",["1563","1564"],"// action - state management\r\nimport * as actionTypes from 'store/actionTypes';\r\nimport {\r\n    CLIENT_SET_PERSONAL_INFORMATION_DETAIL,\r\n    CLIENT_SET_RETRIEVED_PERSONAL_INFORMATION_DATA\r\n} from \"store/actionTypes\";\r\n\r\nexport const initialState = {\r\n    client: \"\",\r\n    date_of_birth: \"\",\r\n    gender: \"\",\r\n    ethnic_background: \"\",\r\n    ethnic_background_detail: \"\",\r\n    language_proficiency: [],\r\n    language_proficiency_other: \"\",\r\n    marital_status: \"\",\r\n    marital_status_detail: \"\",\r\n    family_situation: \"\",\r\n    family_situation_detail: \"\",\r\n    education: \"\",\r\n    education_detail: \"\",\r\n    employment: \"\",\r\n    employment_detail: \"\",\r\n    household_income: \"\",\r\n    household_income_detail: \"\",\r\n    housing_situation: \"\",\r\n    housing_situation_detail: \"\",\r\n    home_safety_assessment: {}\r\n}\r\n\r\n\r\nconst personalInformationReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.CLIENT_SET_PERSONAL_INFORMATION_DETAIL: {\r\n            const personalInformationData = action.data;\r\n            return {\r\n                ...state,\r\n                ...personalInformationData\r\n            }\r\n        }\r\n        case actionTypes.CLIENT_SET_RETRIEVED_PERSONAL_INFORMATION_DATA: {\r\n            const personalInformationData = action.data;\r\n            return {\r\n                ...state,\r\n                ...personalInformationData\r\n            }\r\n        }\r\n        case actionTypes.CLIENT_SET_HOME_SAFETY_ASSESSMENT_DETAIL: {\r\n            const homeSafetyAssessmentData = action.data;\r\n            return {\r\n                ...state,\r\n                ...homeSafetyAssessmentData\r\n            }\r\n        }\r\n        default: {\r\n            return {...state};\r\n        }\r\n    }\r\n};\r\n\r\nexport default personalInformationReducer;\r\n\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/client/clinicalInformation.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/clinician/dailyWorkload.js",["1565"],"import * as actionTypes from 'store/actionTypes';\nimport {CLINICIAN_SET_DAILY_WORKLOAD_DETAILS} from \"store/actionTypes\";\n\nexport const initialState = {\n    list: {},\n    add: {\n        daily_workload_date: new Date(),\n        service_recipient_travel: \"\",\n        functional_center: \"\",\n\n        client_caseload_casemanagement_number_clients: \"\",\n        client_caseload_casemanagement_total_time: \"\",\n        client_caseload_regular_number_clients: \"\",\n        client_caseload_regular_total_time: \"\",\n\n        clinician: \"\"\n    },\n    retrieve: {}\n}\n\n\nconst dailyWorkloadReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.CLINICIAN_SET_DAILY_WORKLOAD_DETAILS: {\n            const workloadData = action.data\n            return {\n                ...state,\n                add: {\n                    ...state.add,\n                    ...workloadData\n                }\n            };\n        }\n        case actionTypes.CLINICIAN_LIST_DAILY_WORKLOAD: {\n            const workloadList = action.data\n            return {\n                ...state,\n                list: {\n                    ...workloadList\n                }\n            };\n        }\n        case actionTypes.CLINICIAN_RESET_DAILY_WORKLOAD_DETAILS: {\n            return {\n                ...state,\n                add: {\n                    daily_workload_date: new Date(),\n                    service_recipient_travel: \"\",\n                    functional_center: \"\",\n\n                    client_caseload_casemanagement_number_clients: \"\",\n                    client_caseload_casemanagement_total_time: \"\",\n                    client_caseload_regular_number_clients: \"\",\n                    client_caseload_regular_total_time: \"\",\n                }\n            }\n        }\n        case actionTypes.CLINICIAN_RETRIEVE_DAILY_WORKLOAD: {\n            const {workloadID, workloadData} = action.data;\n            return {\n                ...state,\n                retrieve: {\n                    ...state.retrieve,\n                    [workloadID]: {\n                        ...workloadData\n                    }\n                }\n            }\n        }\n        case actionTypes.CLINICIAN_SET_RETRIEVED_DAILY_WORKLOAD_DETAILS_UPDATE: {\n            const workloadData = action.data\n            return {\n                ...state,\n                add: {\n                    ...state.add,\n                    ...workloadData\n                }\n            };\n        }\n        case actionTypes.CLINICIAN_SET_ADD_DAILY_WORKLOAD_DATE: {\n            const workloadDate = action.data;\n            return {\n                ...state,\n                add: {\n                    ...state.add,\n                    daily_workload_date: workloadDate\n                }\n            }\n        }\n        default: {\n            return {...state};\n        }\n    }\n};\n\nexport default dailyWorkloadReducer;\n\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/share/internalFollowUp.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/clinician/clientAssessment.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/share/externalReferral.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/client/visitorLog.js",["1566","1567"],"// action - state management\r\nimport * as actionTypes from 'store/actionTypes';\r\nimport {CLIENT_SET_PERSONAL_INFORMATION_DETAIL, CLIENT_SET_VISITOR_LOG_DETAIL} from \"store/actionTypes\";\r\n\r\nexport const initialState = {\r\n    add: {\r\n        client: \"\",\r\n        date: \"\",\r\n        visit_reason: \"\",\r\n        organization: []\r\n    },\r\n    list: {}\r\n}\r\n\r\n\r\nconst visitorLogReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.CLIENT_SET_VISITOR_LOG_DETAIL: {\r\n            const visitorLogData = action.data;\r\n            return {\r\n                ...state,\r\n                add: {\r\n                    ...state.add,\r\n                    ...visitorLogData\r\n                }\r\n            }\r\n        }\r\n        default: {\r\n            return {...state};\r\n        }\r\n    }\r\n};\r\n\r\nexport default visitorLogReducer;\r\n\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/reducers/share/internalReferral.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/routes/role-based-routes/ClinicianRoutes.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/routes/role-based-routes/ExternalPartnerRoutes.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/daily-workload/add/index.js",["1568","1569","1570","1571","1572","1573"],"import PropTypes from 'prop-types';\nimport React, {useEffect} from 'react';\nimport JWTContext from 'contexts/JWTContext';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {\n    Button,\n    CardActions,\n    CircularProgress,\n    CardContent,\n    Divider,\n    Grid,\n    Tab,\n    Tabs,\n    Typography\n} from '@material-ui/core';\n\n// project imports\nimport ClientCaseLoad from './forms/client-caseload';\nimport Details from './forms/details';\n\nimport {useSelector, useDispatch} from \"react-redux\";\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport {gridSpacing} from 'store/constant';\n\n// assets\nimport PersonOutlineTwoToneIcon from '@material-ui/icons/PersonOutlineTwoTone';\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\nimport CreditCardTwoToneIcon from '@material-ui/icons/CreditCardTwoTone';\nimport VpnKeyTwoToneIcon from '@material-ui/icons/VpnKeyTwoTone';\nimport {SNACKBAR_OPEN} from 'store/actionTypes';\n\nimport caseManagerApi from 'store/api-calls/case-manager';\n\nimport ProgressCircularControlled from 'views/ui/ProgressCircularControlled';\nimport {setDailyWorkLoadDetails, resetDailyWorkLoad} from \"store/actions/caseManager/dailyWorkloadActions\";\nimport {useNavigate} from \"react-router-dom\";\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    profileTab: {\n        '& .MuiTabs-flexContainer': {\n            borderBottom: 'none'\n        },\n        '& button': {\n            color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[600],\n            minHeight: 'auto',\n            minWidth: '100%',\n            padding: '12px 16px',\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n            textAlign: 'left',\n            justifyContent: 'flex-start'\n        },\n        '& button.Mui-selected': {\n            color: theme.palette.primary.main,\n            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50]\n        },\n        '& button > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px',\n            marginTop: '10px',\n            height: '20px',\n            width: '20px'\n        },\n        '& button > div > span': {\n            display: 'block'\n        },\n        '& > div > span': {\n            display: 'none'\n        }\n    },\n    cardPanels: {\n        borderLeft: '1px solid',\n        borderLeftColor: theme.palette.mode === 'dark' ? '#333d5e' : '#eeeeee',\n        height: '100%'\n    }\n}));\n\n// tabs\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <div role='tabpanel' hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && <div>{children}</div>}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n// tabs option\nconst tabsOption = [\n    {\n        label: 'Details',\n        icon: <DescriptionTwoToneIcon/>,\n        caption: 'Workload Date'\n    },\n    {\n        label: 'Client Caseload',\n        icon: <DescriptionTwoToneIcon/>,\n        caption: 'Caseload Details'\n    }\n];\n\n// ===========================|| PROFILE 2 ||=========================== //\n\nconst DailyWorkload = () => {\n    const classes = useStyles();\n    const customization = useSelector((state) => state.customization);\n\n    const [value, setValue] = React.useState(0);\n    const [progressLoader, setProgressLoader] = React.useState(false);\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    const dailyWorkloadData = useSelector(state => state.caseManager.dailyWorkload.add)\n\n    const userAuthContext = React.useContext(JWTContext)\n    const {\n        user: {\n            user_type_pk: caseManagerUUID\n        }\n    } = userAuthContext;\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    useEffect(() => {\n        dispatch(resetDailyWorkLoad())\n        dispatch(setDailyWorkLoadDetails({\n            casemanager: caseManagerUUID\n        }))\n    }, []);\n\n    const handleWorkloadSubmit = async (e) => {\n        setProgressLoader(true);  // Call this to show the loader for the current tab\n        dispatch(setDailyWorkLoadDetails({\n            casemanager: caseManagerUUID\n        }))\n        const response = await caseManagerApi.createDailyWorkload(dailyWorkloadData);\n        setProgressLoader(false);\n\n        if ('result' in response === true) {\n            if (response.result === true) {\n                const createdWorkloadID = response.data.daily_workload_id;\n                navigate(`/workload/${createdWorkloadID}`)\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Your Daily Workload entry has been created.',\n                    variant: 'alert',\n                    alertSeverity: 'success', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n                dispatch(resetDailyWorkLoad())\n            } else {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Your Daily workload could not be added. Please try again',\n                    variant: 'alert',\n                    alertSeverity: 'error', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            }\n        }\n\n        if ('errors' in response === true) {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Please provide all the fields with valid values and try submit again.',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n\n        if ('status' in response === true && response.status > 200) {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Please provide all the fields with valid values and try submit again.',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n    }\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12}>\n                <MainCard title='Daily Workload ' secondary={<ProgressCircularControlled display={progressLoader}/>}\n                          content={false}>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={12} lg={4}>\n                            <CardContent>\n                                <Tabs\n                                    value={value}\n                                    onChange={handleChange}\n                                    orientation='vertical'\n                                    className={classes.profileTab}\n                                    variant='scrollable'\n                                    sx={{\n                                        '& button': {\n                                            borderRadius: `${customization.borderRadius}px`\n                                        }\n                                    }}\n                                >\n                                    {tabsOption.map((tab, index) => (\n                                        <Tab\n                                            key={index}\n                                            icon={tab.icon}\n                                            label={\n                                                <Grid container direction='column'>\n                                                    <Typography sx={{textTransform: 'capitalize'}} variant='subtitle1'\n                                                                color='inherit'>\n                                                        {tab.label}\n                                                    </Typography>\n                                                    <Typography component='div' variant='caption'\n                                                                sx={{textTransform: 'capitalize'}}>\n                                                        {tab.caption}\n                                                    </Typography>\n                                                </Grid>\n                                            }\n                                            {...a11yProps(index)}\n                                        />\n                                    ))}\n                                </Tabs>\n                            </CardContent>\n                        </Grid>\n                        <Grid item xs={12} lg={8}>\n                            <CardContent className={classes.cardPanels}>\n                                <TabPanel value={value} index={0}>\n                                    <Details/>\n                                </TabPanel>\n                                <TabPanel value={value} index={1}>\n                                    <ClientCaseLoad/>\n                                </TabPanel>\n                            </CardContent>\n                        </Grid>\n                    </Grid>\n                    <Divider/>\n                    <CardActions>\n                        <Grid container justifyContent='space-between' spacing={0}>\n                            <Grid item>\n                                <Grid container justifyContent='space-between' spacing={1}>\n                                    <Grid item>\n                                        {value < 1 && (\n                                            <AnimateButton>\n                                                <Button variant='contained' size='large'\n                                                        onClick={(e) => handleChange(e, 1 + parseInt(value, 10))}>\n                                                    Continue\n                                                </Button>\n                                            </AnimateButton>\n                                        )}\n                                    </Grid>\n\n                                    <Grid item>\n                                        {value > 0 && (\n                                            <AnimateButton>\n                                                <Button variant='outlined' size='large'\n                                                        onClick={(e) => handleChange(e, parseInt(value, 10) - 1)}>\n                                                    Back\n                                                </Button>\n                                            </AnimateButton>\n                                        )}\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n\n                            <Grid item alignContent='end'>\n                                {value > 0 && (\n                                    <AnimateButton>\n                                        <Button color='secondary' variant='contained' size='large'\n                                                onClick={handleWorkloadSubmit}>\n                                            Submit <ProgressCircularControlled display={progressLoader}/>\n                                        </Button>\n                                    </AnimateButton>\n                                )}\n                            </Grid>\n\n                        </Grid>\n                    </CardActions>\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default DailyWorkload;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/daily-workload/detail/index.js",["1574","1575","1576","1577","1578","1579","1580","1581","1582","1583","1584","1585","1586","1587","1588","1589","1590","1591","1592","1593","1594","1595","1596"],"import PropTypes from 'prop-types';\nimport React, {useEffect} from 'react';\nimport JWTContext from 'contexts/JWTContext';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {\n    Button,\n    CardActions,\n    CircularProgress,\n    CardContent,\n    Divider,\n    Grid,\n    Tab,\n    Tabs,\n    Typography, IconButton, List, ListItemIcon, ListItemText, ListItemSecondaryAction\n} from '@material-ui/core';\n\nimport {useNavigate, useParams} from 'react-router-dom';\n\n// project imports\nimport Details from '../forms/details';\n\nimport {useSelector, useDispatch} from \"react-redux\";\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport {gridSpacing} from 'store/constant';\n\n// assets\nimport PersonOutlineTwoToneIcon from '@material-ui/icons/PersonOutlineTwoTone';\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\nimport CreditCardTwoToneIcon from '@material-ui/icons/CreditCardTwoTone';\nimport VpnKeyTwoToneIcon from '@material-ui/icons/VpnKeyTwoTone';\nimport {SNACKBAR_OPEN} from 'store/actionTypes';\n\nimport caseManagerApi from 'store/api-calls/case-manager';\n\n\nimport {retrieveDailyWorkload} from \"store/actions/caseManager/dailyWorkloadActions\";\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\nimport Tooltip from '@material-ui/core/Tooltip';\nimport SubCard from \"ui-component/cards/SubCard\";\nimport ListItemButton from \"@material-ui/core/ListItemButton\";\nimport IosShareOutlined from \"@material-ui/icons/IosShareOutlined\";\nimport { FormattedMessage } from 'react-intl';\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    profileTab: {\n        '& .MuiTabs-flexContainer': {\n            borderBottom: 'none'\n        },\n        '& button': {\n            color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[600],\n            minHeight: 'auto',\n            minWidth: '100%',\n            padding: '12px 16px',\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n            textAlign: 'left',\n            justifyContent: 'flex-start'\n        },\n        '& button.Mui-selected': {\n            color: theme.palette.primary.main,\n            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50]\n        },\n        '& button > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px',\n            marginTop: '10px',\n            height: '20px',\n            width: '20px'\n        },\n        '& button > div > span': {\n            display: 'block'\n        },\n        '& > div > span': {\n            display: 'none'\n        }\n    },\n    cardPanels: {\n        borderLeft: '1px solid',\n        borderLeftColor: theme.palette.mode === 'dark' ? '#333d5e' : '#eeeeee',\n        height: '100%'\n    }\n}));\n\n// tabs\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <div role='tabpanel' hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && <div>{children}</div>}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n// tabs option\nconst tabsOption = [\n    {\n        label: 'Details',\n        icon: <DescriptionTwoToneIcon/>,\n        caption: ''\n    },\n    {\n        label: 'Client Caseload',\n        icon: <DescriptionTwoToneIcon/>,\n    },\n    {\n        label: 'Project Related Clinical Activities',\n        icon: <CreditCardTwoToneIcon/>,\n    },\n    {\n        label: 'Research Related Activities',\n        icon: <VpnKeyTwoToneIcon/>,\n    }\n];\n\n// ===========================|| PROFILE 2 ||=========================== //\n\nconst DailyWorkload = () => {\n    const navigate = useNavigate();\n    const userAuthContext = React.useContext(JWTContext)\n    const {\n        user: {\n            user_type_pk: caseManagerUUID\n        }\n    } = userAuthContext;\n\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const customization = useSelector((state) => state.customization);\n\n    const [value, setValue] = React.useState(0);\n    const [progressLoader, setProgressLoader] = React.useState(false);\n    const [retrievedItemDailyWorkload, setRetrievedItemDailyWorkload] = React.useState(false);\n\n    const {workload_id} = useParams();\n\n    const workloadValueFields = {\n        \"workload_details\": [\n            \"daily_workload_date\",\n            \"service_recipient_travel\",\n            \"functional_center\"\n        ],\n        \"workload-caseload\": [\n            \"client_caseload_casemanagement_number_clients\",\n            \"client_caseload_casemanagement_total_time\",\n            \"client_caseload_regular_number_clients\",\n            \"client_caseload_regular_total_time\",\n        ],\n        \"workload-project\": [\n            \"project_case_management_total_time\",\n            \"project_case_management_admin_total_time\",\n            \"project_case_management_admin_other\"\n        ],\n        \"workload-research\": [\n            \"research_related_meetings_total_time\",\n            \"research_related_administration_total_time\",\n            \"research_related_other\"\n        ]\n    }\n\n    useEffect(async () => {\n        const response = await caseManagerApi.retrieveDailyWorkload(workload_id);\n\n        if ('result' in response && response.result === true && 'data' in response) {\n            dispatch(retrieveDailyWorkload(workload_id, response.data))\n            setRetrievedItemDailyWorkload(response.data)\n        }\n    }, []);\n\n    const handleEdit = (event) => {\n        navigate(`/workload/${workload_id}/edit`)\n    };\n\n    const renderDetail = () => {\n        const fieldsMap = (fields) => (\n            fields.map(field => (\n                <ListItemButton>\n                    <ListItemText primary={<Typography variant=\"subtitle1\"><FormattedMessage id={field} /></Typography>}/>\n                    <ListItemSecondaryAction>\n                        <Typography variant=\"body1\" align=\"right\">\n                            {retrievedItemDailyWorkload[field]}\n                        </Typography>\n                    </ListItemSecondaryAction>\n                </ListItemButton>\n            ))\n        )\n\n        return Object.keys(workloadValueFields).map(workloadKey => {\n            const fields = workloadValueFields[workloadKey];\n            return (\n                <Grid item lg={6} xs={8}>\n                    <SubCard title={<FormattedMessage id={workloadKey} />}>\n                        <List component=\"nav\">\n                            {fieldsMap(fields)}\n                            <Divider/>\n                        </List>\n                    </SubCard>\n                </Grid>\n            )\n        })\n    }\n\n    return (\n        <MainCard title=\"Workload Detail\"\n                  secondary={\n                      <>\n                          <Tooltip title=\"Edit Assessment\">\n                              <IconButton color=\"secondary\" onClick={handleEdit}>\n                                  <EditTwoToneIcon sx={{fontSize: '1.5rem'}}/>\n                              </IconButton>\n                          </Tooltip>\n                          <Tooltip title=\"Send Assessment\">\n                              <IconButton color=\"secondary\">\n                                  <IosShareOutlined sx={{fontSize: '1.5rem'}}/>\n                              </IconButton>\n                          </Tooltip>\n                      </>\n                  }\n        >\n            <Grid container spacing={gridSpacing}>\n                {renderDetail()}\n            </Grid>\n        </MainCard>\n    )\n};\n\nexport default DailyWorkload;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/daily-workload/list/index.js",["1597","1598","1599","1600","1601","1602","1603","1604","1605","1606","1607","1608"],"import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {listReferralsByReviewBoardID} from 'store/actions/reviewBoard/referralActions';\nimport {useNavigate} from 'react-router-dom';\n\n// material-ui\nimport {makeStyles, useTheme} from '@material-ui/styles';\nimport {\n    CardContent,\n    Checkbox,\n    Fab,\n    Grid,\n    IconButton,\n    InputAdornment,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TablePagination,\n    TableRow,\n    TableSortLabel,\n    TextField,\n    Toolbar,\n    Tooltip,\n    Typography\n} from '@material-ui/core';\nimport {visuallyHidden} from '@material-ui/utils';\n\n// third-party\nimport clsx from 'clsx';\n\n// project imports\n\nimport MainCard from 'ui-component/cards/MainCard';\n\n// assets\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterListTwoTone';\nimport PrintIcon from '@material-ui/icons/PrintTwoTone';\nimport FileCopyIcon from '@material-ui/icons/FileCopyTwoTone';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddIcon from '@material-ui/icons/AddTwoTone';\nimport MoreHorizOutlinedIcon from '@material-ui/icons/MoreHorizOutlined';\nimport {useContext, useEffect} from \"react\";\n\n// axios api\nimport caseManagerApi from 'store/api-calls/case-manager';\nimport JWTContext from \"contexts/JWTContext\";\nimport VisibilityTwoToneIcon from \"@material-ui/icons/VisibilityTwoTone\";\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\nimport {listDailyWorkLoad} from \"../../../../../store/actions/caseManager/dailyWorkloadActions\";\n\n// table data\nfunction createData(id, name, category, price, date, qty) {\n    return {id, name, category, price, date, qty};\n}\n\n// table sort\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\n// table header options\nconst headCells = [\n    {\n        id: 'daily_workload_date',\n        numeric: false,\n        label: 'Workload Date',\n        align: 'center'\n    },\n    {\n        id: 'client_caseload_casemanagement_number_clients',\n        numeric: false,\n        label: '# Case Management Clients',\n        align: 'center'\n    },\n    {\n        id: 'client_caseload_regular_number_clients',\n        numeric: false,\n        label: '# Regular Clients',\n        align: 'center'\n    },\n];\n\n// style const\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%'\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2)\n    },\n    table: {\n        minWidth: 750\n    },\n    sortSpan: visuallyHidden\n}));\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        padding: 0,\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1)\n    },\n    highlight: {\n        color: theme.palette.secondary.main\n    },\n    title: {\n        flex: '1 1 100%'\n    }\n}));\n\n// ===========================|| TABLE HEADER ||=========================== //\n\nfunction EnhancedTableHead({\n                               classes,\n                               onSelectAllClick,\n                               order,\n                               orderBy,\n                               numSelected,\n                               rowCount,\n                               onRequestSort,\n                               theme,\n                               selected\n                           }) {\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                {numSelected > 0 && (\n                    <TableCell padding=\"none\" colSpan={7}>\n                        <EnhancedTableToolbar numSelected={selected.length}/>\n                    </TableCell>\n                )}\n                {numSelected <= 0 &&\n                headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.align}\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span\n                                    className={classes.sortSpan}>{order === 'desc' ? 'sorted descending' : 'sorted ascending'}</span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n                {numSelected <= 0 && (\n                    <TableCell sortDirection={false} align=\"center\" sx={{pr: 3}}>\n                        <Typography\n                            variant=\"subtitle1\"\n                            sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                        >\n                            Action\n                        </Typography>\n                    </TableCell>\n                )}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    theme: PropTypes.object,\n    selected: PropTypes.array,\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired\n};\n\n// ===========================|| TABLE HEADER TOOLBAR ||=========================== //\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const {numSelected} = props;\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"h4\" component=\"div\">\n                    {numSelected} Selected\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Nutrition\n                </Typography>\n            )}\n\n            {numSelected > 0 && (\n                <Tooltip title=\"Delete\">\n                    <IconButton>\n                        <DeleteIcon fontSize=\"small\"/>\n                    </IconButton>\n                </Tooltip>\n            )}\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired\n};\n\n// ===========================|| PRODUCT LIST ||=========================== //\n\nconst ReviewBoardReferralList = () => {\n    const userAuthContext = React.useContext(JWTContext)\n    const {\n        user: {\n            user_type_pk: caseManagerUUID\n        }\n    } = userAuthContext;\n\n    const navigate = useNavigate();\n    const reviewBoardRedux = useSelector(state => state.reviewBoard)\n    const dispatch = useDispatch();\n\n    const classes = useStyles();\n    const theme = useTheme();\n\n    // show a right sidebar when clicked on new product\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpenDialog = () => {\n        navigate('/cp/workload/add');\n    };\n    const handleCloseDialog = () => {\n        setOpen(false);\n    };\n\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [search, setSearch] = React.useState('');\n    const [rows, setRows] = React.useState([]);\n    const [rowsInitial, setRowsInitial] = React.useState([]);\n\n    const handleSearch = (event) => {\n        const newString = event.target.value;\n        setSearch(newString);\n\n        if (newString) {\n            const newRows = rows.filter((row) => {\n                let matches = true;\n\n                const properties = ['daily_workload_date'];\n                let containsQuery = false;\n\n                properties.forEach((property) => {\n                    if (row[property].toString().toLowerCase().includes(newString.toString().toLowerCase())) {\n                        containsQuery = true;\n                    }\n                });\n\n                if (!containsQuery) {\n                    matches = false;\n                }\n                return matches;\n            });\n            setRows(newRows);\n        } else {\n            setRows(rowsInitial);\n        }\n    };\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelectedId = rows.map((n) => n.name);\n            setSelected(newSelectedId);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, workloadUUID) => {\n        navigate(`/workload/${workloadUUID}`)\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const fetchListData = async () => {\n        const response = await caseManagerApi.listDailyWorkloadByCaseManagerID(caseManagerUUID);\n        if ('result' in response && response.result === true) {\n            setRows(response.data)\n            setRowsInitial(response.data)\n            dispatch(listDailyWorkLoad(response.data))\n        }\n    }\n\n    useEffect(() => {\n        // eslint-disable-next-line camelcase\n        fetchListData()\n    }, [])\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n    const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n    return (\n        <MainCard title=\"My Daily Workload\" content={false}>\n            <CardContent>\n                <Grid container justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\n                    <Grid item xs={8} sm={6}>\n                        <TextField\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <SearchIcon fontSize=\"small\"/>\n                                    </InputAdornment>\n                                )\n                            }}\n                            onChange={handleSearch}\n                            placeholder=\"Search Workload\"\n                            value={search}\n                            size=\"small\"\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={6} sx={{textAlign: 'right'}}>\n                        <Tooltip title=\"Copy\">\n                            <IconButton>\n                                <FileCopyIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Print\">\n                            <IconButton>\n                                <PrintIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Filter\">\n                            <IconButton>\n                                <FilterListIcon/>\n                            </IconButton>\n                        </Tooltip>\n\n                        {/* product add & dialog */}\n                        <Tooltip title=\"Add Workload\">\n                            <Fab\n                                color=\"primary\"\n                                size=\"small\"\n                                onClick={handleClickOpenDialog}\n                                sx={{boxShadow: 'none', ml: 1, width: '32px', height: '32px', minHeight: '32px'}}\n                            >\n                                <AddIcon fontSize=\"small\"/>\n                            </Fab>\n                        </Tooltip>\n\n                    </Grid>\n                </Grid>\n            </CardContent>\n\n            {/* table */}\n            <TableContainer>\n                <Table className={classes.table} aria-labelledby=\"tableTitle\">\n                    <EnhancedTableHead\n                        classes={classes}\n                        numSelected={selected.length}\n                        order={order}\n                        orderBy={orderBy}\n                        onSelectAllClick={handleSelectAllClick}\n                        onRequestSort={handleRequestSort}\n                        rowCount={rows.length}\n                        theme={theme}\n                        selected={selected}\n                    />\n                    <TableBody>\n                        {stableSort(rows, getComparator(order, orderBy))\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map((row, index) => {\n                                const labelId = `enhanced-table-checkbox-${index}`;\n\n                                return (\n                                    <TableRow\n                                        hover\n                                        role=\"checkbox\"\n                                        tabIndex={-1}\n                                        key={index}\n                                    >\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"center\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row.daily_workload_date}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"center\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row.client_caseload_casemanagement_number_clients}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"center\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row.client_caseload_regular_number_clients}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell align=\"center\" sx={{pr: 3}}>\n                                            <IconButton\n                                                color=\"primary\"\n                                                onClick={(event) => handleClick(event, row.daily_workload_id)}\n                                            >\n                                                <VisibilityTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                                            </IconButton>\n                                            <IconButton color=\"secondary\">\n                                                <EditTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                                            </IconButton>\n                                        </TableCell>\n\n\n                                    </TableRow>\n                                );\n                            })}\n                        {emptyRows > 0 && (\n                            <TableRow\n                                style={{\n                                    height: 53 * emptyRows\n                                }}\n                            >\n                                <TableCell colSpan={6}/>\n                            </TableRow>\n                        )}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n\n            {/* table pagination */}\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </MainCard>\n    );\n};\n\nexport default ReviewBoardReferralList;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/visitors-log/index.js",["1609","1610","1611","1612","1613"],"import PropTypes from 'prop-types';\nimport React, {useEffect} from 'react';\nimport JWTContext from 'contexts/JWTContext';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {\n    Autocomplete,\n    Button,\n    CardActions,\n    CardContent,\n    Divider,\n    Grid, TextField,\n} from '@material-ui/core';\n\nimport {useSelector, useDispatch} from \"react-redux\";\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport {gridSpacing} from 'store/constant';\n\n// assets\nimport {SNACKBAR_OPEN} from 'store/actionTypes';\n\nimport {useFormik} from \"formik\";\n\nimport ProgressCircularControlled from 'views/ui/ProgressCircularControlled';\nimport setVisitorLogDetail from \"store/actions/client/visitorLogActions\";\nimport MaskedInput from 'react-text-mask';\nimport clientApi from 'store/api-calls/client'\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    profileTab: {\n        '& .MuiTabs-flexContainer': {\n            borderBottom: 'none'\n        },\n        '& button': {\n            color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[600],\n            minHeight: 'auto',\n            minWidth: '100%',\n            padding: '12px 16px',\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n            textAlign: 'left',\n            justifyContent: 'flex-start'\n        },\n        '& button.Mui-selected': {\n            color: theme.palette.primary.main,\n            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50]\n        },\n        '& button > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px',\n            marginTop: '10px',\n            height: '20px',\n            width: '20px'\n        },\n        '& button > div > span': {\n            display: 'block'\n        },\n        '& > div > span': {\n            display: 'none'\n        }\n    },\n    cardPanels: {\n        borderLeft: '1px solid',\n        borderLeftColor: theme.palette.mode === 'dark' ? '#333d5e' : '#eeeeee',\n        height: '100%'\n    }\n}));\n\n// tabs\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <div role='tabpanel' hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && <div>{children}</div>}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\n\nconst organizationList = [\n    {label: 'Ability NB', id: 'ability-nb'},\n    {label: 'Ambulance New Brunswick (ANB)', id: 'ambulance-new-brunswick-(ANB)'},\n    {label: 'Community Health Centers', id: 'community-health-centers'},\n    {label: 'Department of Veteran Affairs', id: 'department-of-veteran-affairs'},\n    {label: 'Extra-Mural Program - Lead Nurse Case Manager', id: 'extra-mural-program-lead-nurse-case-manager'},\n    {label: 'Extra-Mural Program - Nutritionist', id: 'extra-mural-program-lead-nurse-nutritionist'},\n    {\n        label: 'Extra-Mural Program - Occupational Therapist',\n        id: 'extra-mural-program-lead-nurse-occupational-therapist'\n    },\n    {label: 'Extra-Mural Program - Physical Therapist', id: 'extra-mural-program-lead-nurse-physical-therapist'},\n    {label: 'Extra-Mural Program - Registered Nurse', id: 'extra-mural-program-lead-nurse-registered-nurse'},\n    {label: 'Extra-Mural Program - Respiratory Therapist', id: 'extra-mural-program-lead-nurse-respiratory-therapist'},\n    {label: 'Extra-Mural Program - Social Worker', id: 'extra-mural-program-lead-nurse-social-worker'},\n    {\n        label: 'Extra-Mural Program - Speech & Language Therapist',\n        id: 'extra-mural-program-lead-nurse-speech-language-therapist'\n    },\n    {label: 'Extra-Mural Program - Other', id: 'extra-mural-program-lead-nurse-other'},\n    {\n        label: 'Family Physician (Outside Community Health Centers)',\n        id: 'family-physician-outside-community-health-centers'\n    },\n    {label: 'First Nations', id: 'First Nations'},\n    {label: 'Homecare Agency', id: 'Homecare Agency'},\n    {label: 'Public Health Services', id: 'Public Health Services'},\n    {\n        label: 'Social Development - Home Adaptations for Seniors Independence Program',\n        id: 'social-development-home-adaptations-for-seniors-independence-program'\n    },\n    {label: 'Social Development - Homeowner Repair Program', id: 'social-development-homeowner-repair-program'},\n    {label: 'Social Development - Housing Program', id: 'social-development-housing-program'},\n    {label: 'Social Development - Long-Term Care Program', id: 'social-development-long-term-care-program'},\n    {\n        label: 'Social Development - Mobility and Adaptive Equipment Loan Program',\n        id: 'social-development-mobility-adaptive-equipment-loan-program'\n    },\n    {label: 'Social Development - Social Assistance Program', id: 'social-development-social-assistance-program'},\n    {label: 'Social Development - Other', id: 'social-development-other'},\n    {label: 'Volunteer Organizations', id: 'volunteer-organizations'},\n    {label: 'Other', id: 'other'},\n];\n\n\nconst VisitorsLog = () => {\n    const classes = useStyles();\n    const customization = useSelector((state) => state.customization);\n    const [value, setValue] = React.useState(0);\n    const [progressLoader, setProgressLoader] = React.useState(false);\n\n    const dispatch = useDispatch()\n    const visitorLogData = useSelector(store => store.client.visitorLogs.add)\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const userAuthContext = React.useContext(JWTContext)\n    const {\n        user: {\n            user_type_pk: clientUUID\n        }\n    } = userAuthContext;\n\n    const formik = useFormik({\n        initialValues: {\n            date: visitorLogData.date,\n            organization: visitorLogData.organization,\n            visit_reason: visitorLogData.visit_reason,\n            client: clientUUID\n        },\n        validate: values => {\n            dispatch(setVisitorLogDetail(values))\n        }\n    });\n\n    const submitVisitorLog = async (e) => {\n        setProgressLoader(true);\n        visitorLogData.organization = visitorLogData.organization.id\n        const response = await clientApi.createVisitorLog(visitorLogData);\n\n        if (response && 'status' in response) {\n            if (response.status === true) {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Visitor Log successfully created',\n                    variant: 'alert',\n                    alertSeverity: 'success', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                })\n            }\n        }\n        setProgressLoader(false);\n    }\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12}>\n                <MainCard title='Visitor Log ' secondary={<ProgressCircularControlled display={progressLoader}/>}\n                          content={false}>\n\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={12} lg={8}>\n\n                            <CardContent className={classes.cardPanels}>\n                                <Grid container spacing={gridSpacing}>\n\n                                    <Grid item xs={4} sm={4}>\n                                        <MaskedInput\n                                            mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                                            className=\"form-control\"\n                                            label=\"Date of Visit\"\n                                            guide={false}\n                                            render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                               defaultValue=\"\"/>}\n\n                                            defaultValue={formik.values.date}\n                                            onChange={formik.handleChange}\n                                            name='date'\n                                            id='date'\n                                            value={formik.values.date}\n                                        />\n\n                                    </Grid>\n\n                                    <Grid item xs={8} sm={8}>\n                                        <Autocomplete\n                                            disablePortal\n                                            options={organizationList}\n                                            name='organization'\n                                            value={formik.values.organization}\n                                            id='organization'\n                                            onChange={(e, value) => {\n                                                formik.setFieldValue('organization', value)\n                                            }}\n                                            renderInput={(params) => <TextField {...params} label=\"Organization\"/>}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} sm={12} lg={12} md={12}>\n                                        <TextField\n                                            fullWidth\n                                            maxRows={20}\n                                            multiline\n                                            name='visit_reason'\n                                            id='visit_reason'\n                                            label='Visit Reason'\n                                            value={formik.values.visit_reason}\n                                            onChange={formik.handleChange}\n                                        />\n                                    </Grid>\n\n                                </Grid>\n\n                            </CardContent>\n\n                        </Grid>\n                    </Grid>\n\n                    <Divider/>\n\n                    <CardActions>\n                        <Grid container justifyContent='space-between' spacing={0}>\n                            <Grid item alignContent='end'>\n                                <AnimateButton>\n                                    <Button color='secondary' variant='contained' size='large'\n                                            onClick={submitVisitorLog}>\n                                        Submit\n                                    </Button>\n                                </AnimateButton>\n                            </Grid>\n                        </Grid>\n                    </CardActions>\n\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default VisitorsLog;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/clinical-information/index.js",["1614","1615"],"import PropTypes from 'prop-types';\nimport React, {useEffect} from 'react';\nimport {Link} from 'react-router-dom';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {Box, Grid, Tab, Tabs, CardActions, CardContent, Button} from '@material-ui/core';\n\n// project imports\nimport Hopsitalizations from './hospitalizations';\nimport Medication from './medication';\nimport AmbulanceUse from './ambulance-use';\nimport EmergencyRoomVisits from './emergency-room-visits';\nimport ClinicalInformation from './clinical-information';\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport {gridSpacing} from 'store/constant';\n\n// assets\nimport AccountCircleTwoToneIcon from '@material-ui/icons/AccountCircleTwoTone';\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport JWTContext from \"contexts/JWTContext\";\n\nimport {\n    setClinicalInformationDetails,\n    setRetrievedClientClinicalInformationData\n} from \"store/actions/client/clinicalInformationActions\";\nimport {SNACKBAR_OPEN} from \"store/actionTypes\";\nimport clientApi from \"store/api-calls/client\";\nimport ProgressCircularControlled from 'views/ui/ProgressCircularControlled';\n\nconst useStyles = makeStyles((theme) => ({\n    accountTab: {\n        marginBottom: '24px',\n        '& a': {\n            minHeight: 'auto',\n            minWidth: '10px',\n            padding: '12px 8px',\n            marginRight: '18px',\n            color: theme.palette.grey[600],\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'center'\n        },\n        '& a.Mui-selected': {\n            color: theme.palette.primary.main\n        },\n        '& a > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px'\n        }\n    }\n}));\n\n// tabs panel\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n    return (\n        <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && (\n                <Box\n                    sx={{\n                        p: 0\n                    }}\n                >\n                    {children}\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n// tabs option\nconst tabsOption = [\n    {\n        label: 'Clinical Information',\n        icon: <AccountCircleTwoToneIcon sx={{fontSize: '1.2rem'}}/>\n    },\n    {\n        label: 'Hospitalizations',\n        icon: <DescriptionTwoToneIcon sx={{fontSize: '1.2rem'}}/>\n    },\n    {\n        label: 'Emergency Room Visits',\n        icon: <DescriptionTwoToneIcon sx={{fontSize: '1.2rem'}}/>\n    },\n    {\n        label: 'Ambulance Use',\n        icon: <DescriptionTwoToneIcon sx={{fontSize: '1.2rem'}}/>\n    },\n    {\n        label: 'Medication',\n        icon: <DescriptionTwoToneIcon sx={{fontSize: '1.2rem'}}/>\n    }\n];\n\n// ===========================|| PROFILE 1 ||=========================== //\n\nconst ClinicalInformationIndex = () => {\n    const classes = useStyles();\n    const clinicalInfoData = useSelector(state => state.client.clinicalInformation)\n    const dispatch = useDispatch();\n\n    const [progressLoader, setProgressLoader] = React.useState(false);\n    const [value, setValue] = React.useState(0);\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const userAuthContext = React.useContext(JWTContext)\n    const {\n        user: {\n            user_type_pk: clientUUID\n        }\n    } = userAuthContext;\n\n    const fetchClinicalInformation = async () => {\n        setProgressLoader(true);  // Call this to show the loader for the current tab\n        const response = await clientApi.retrieveClinicalInformation(clientUUID)\n        if ('status' in response && response.status === 200) {\n            dispatch(setRetrievedClientClinicalInformationData(response.data))\n        } else if ('status' in response && response.status > 404) {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Could not retrieve your clinical information. Please reload the page and try again',\n                variant: 'alert',\n                alertSeverity: 'warning', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n        setProgressLoader(false);\n    }\n\n    useEffect(() => {\n            dispatch(setClinicalInformationDetails({\n                client: clientUUID\n            }));\n\n            fetchClinicalInformation()\n        }, []\n    )\n\n    const handleClinicalInfoSave = async (e) => {\n        setProgressLoader(true)\n        clinicalInfoData.client = clientUUID\n        const response = await clientApi.createOrUpdateClinicalInformation(clinicalInfoData)\n\n        if (response.status === 200) {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Your clinical information has been updated!',\n                variant: 'alert',\n                alertSeverity: 'success', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        } else {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'There was an error while saving your clinical information.',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n        setProgressLoader(false)\n    }\n\n    return (\n        <MainCard title='Clinical Information' secondary={<ProgressCircularControlled display={progressLoader}/>}>\n            <CardContent>\n                <Grid container spacing={gridSpacing}>\n                    <Grid item xs={12}>\n                        <Tabs\n                            value={value}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            onChange={handleChange}\n                            className={classes.accountTab}\n                            variant=\"scrollable\"\n                        >\n                            {tabsOption.map((tab, index) => (\n                                <Tab key={index} component={Link} to=\"#\" icon={tab.icon}\n                                     label={tab.label} {...a11yProps(index)} />\n                            ))}\n                        </Tabs>\n                        <TabPanel value={value} index={0}>\n                            <ClinicalInformation setClinicalInformationDetails={setClinicalInformationDetails}/>\n                        </TabPanel>\n                        <TabPanel value={value} index={1}>\n                            <Hopsitalizations setClinicalInformationDetails={setClinicalInformationDetails}/>\n                        </TabPanel>\n                        <TabPanel value={value} index={2}>\n                            <EmergencyRoomVisits setClinicalInformationDetails={setClinicalInformationDetails}/>\n                        </TabPanel>\n                        <TabPanel value={value} index={3}>\n                            <AmbulanceUse setClinicalInformationDetails={setClinicalInformationDetails}/>\n                        </TabPanel>\n                        <TabPanel value={value} index={4}>\n                            <Medication setClinicalInformationDetails={setClinicalInformationDetails}/>\n                        </TabPanel>\n                    </Grid>\n                </Grid>\n            </CardContent>\n            <CardActions>\n                <Grid container justifyContent='space-between' spacing={0}>\n                    <Grid item alignContent='end'>\n                        <Button color='secondary' variant='contained' size='large'\n                                onClick={handleClinicalInfoSave}\n                        >\n                            Save\n                        </Button>\n                    </Grid>\n                </Grid>\n            </CardActions>\n        </MainCard>\n    );\n};\n\nexport default ClinicalInformationIndex;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/personal-information/index.js",["1616","1617"],"import PropTypes from 'prop-types';\nimport React, {useEffect} from 'react';\nimport {Link} from 'react-router-dom';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {Box, Grid, Tab, Tabs, CardActions, CardContent, Button} from '@material-ui/core';\n\n// project imports\nimport PersonalInformation from './personal-info';\nimport HomeSafetyAssessment from './home-safety';\nimport MainCard from 'ui-component/cards/MainCard';\nimport {gridSpacing} from 'store/constant';\n\n// assets\nimport AccountCircleTwoToneIcon from '@material-ui/icons/AccountCircleTwoTone';\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\nimport clientApi from \"store/api-calls/client\";\nimport {setRetrievedClientPersonalInformationData} from \"store/actions/client/personalInformationActions\";\nimport JWTContext from \"contexts/JWTContext\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport ProgressCircularControlled from 'views/ui/ProgressCircularControlled';\nimport {SNACKBAR_OPEN} from \"store/actionTypes\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    accountTab: {\n        marginBottom: '24px',\n        '& a': {\n            minHeight: 'auto',\n            minWidth: '10px',\n            padding: '12px 8px',\n            marginRight: '18px',\n            color: theme.palette.grey[600],\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'center'\n        },\n        '& a.Mui-selected': {\n            color: theme.palette.primary.main\n        },\n        '& a > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px'\n        }\n    }\n}));\n\n// tabs panel\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n    return (\n        <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && (\n                <Box\n                    sx={{\n                        p: 0\n                    }}\n                >\n                    {children}\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n// tabs option\nconst tabsOption = [\n    {\n        label: 'Personal Details',\n        icon: <AccountCircleTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n    },\n    {\n        label: 'Home Safety Assessment',\n        icon: <DescriptionTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n    }\n];\n\n// ===========================|| PROFILE 1 ||=========================== //\n\nconst PersonalInformationIndex = () => {\n    const classes = useStyles();\n    const personalInfoData = useSelector(state => state.client.personalInformation)\n    const dispatch = useDispatch();\n    const [value, setValue] = React.useState(0);\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n    const [progressLoader, setProgressLoader] = React.useState(false);\n\n    const {\n        user: {\n            user_type_pk: clientUUID\n        }\n    } = React.useContext(JWTContext);\n\n    const fetchPersonalInformation = async () => {\n        setProgressLoader(true);  // Call this to show the loader for the current tab\n        const response = await clientApi.retrievePersonalInformation(clientUUID)\n        if ('status' in response && response.status === 200) {\n            dispatch(setRetrievedClientPersonalInformationData(response.data))\n        } else  if ('status' in response && response.status > 404){\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Could not retrieve your personal information. Please reload the page and try again',\n                variant: 'alert',\n                alertSeverity: 'warning', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n        setProgressLoader(false);\n    }\n\n    useEffect(() => {\n        fetchPersonalInformation()\n    }, []);\n\n\n    const handlePersonalInfoSave = async (e) => {\n        setProgressLoader(true)\n        personalInfoData.client = clientUUID\n        const response = await clientApi.createOrUpdatePersonalInformation(personalInfoData)\n\n        if (response.status === 200) {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Your personal information has been updated!',\n                variant: 'alert',\n                alertSeverity: 'success', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        } else {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'There was an error while saving your personal information.',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n        setProgressLoader(false)\n    }\n\n    return (\n        <MainCard title='Personal Information' secondary={<ProgressCircularControlled display={progressLoader}/>}>\n            <CardContent>\n                <Grid container spacing={gridSpacing}>\n                    <Grid item xs={12}>\n                        <Tabs\n                            value={value}\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            onChange={handleChange}\n                            className={classes.accountTab}\n                            variant=\"scrollable\"\n                        >\n                            {tabsOption.map((tab, index) => (\n                                <Tab key={index} component={Link} to=\"#\" icon={tab.icon}\n                                     label={tab.label} {...a11yProps(index)} />\n                            ))}\n                        </Tabs>\n                        <TabPanel value={value} index={0}>\n                            <PersonalInformation setProgressLoader={setProgressLoader} client={clientUUID}/>\n                        </TabPanel>\n                        <TabPanel value={value} index={1}>\n                            <HomeSafetyAssessment client={clientUUID}/>\n                        </TabPanel>\n                    </Grid>\n                </Grid>\n            </CardContent>\n            <CardActions>\n                <Grid container justifyContent='space-between' spacing={0}>\n                    <Grid item alignContent='end'>\n                        <Button color='secondary' variant='contained' size='large'\n                                onClick={handlePersonalInfoSave}>\n                            Save\n                        </Button>\n                    </Grid>\n                </Grid>\n            </CardActions>\n        </MainCard>\n    );\n};\n\nexport default PersonalInformationIndex;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/detail/index.js",["1618","1619","1620","1621","1622","1623","1624","1625","1626"],"import PropTypes from 'prop-types';\nimport React, {useEffect} from 'react';\nimport {Link, useNavigate, useParams} from 'react-router-dom';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {Box, Grid, IconButton, Tab, Tabs} from '@material-ui/core';\n\n// project imports\nimport AssessmentData from './assessment-data';\nimport MainCard from 'ui-component/cards/MainCard';\nimport {gridSpacing} from 'store/constant';\nimport caseManagerApi from 'store/api-calls/case-manager';\n\n// assets\nimport AccountCircleTwoToneIcon from '@material-ui/icons/AccountCircleTwoTone';\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\nimport {setRetrievedClientAssessmentData} from \"store/actions/caseManager/clientAssessmentActions\";\nimport {useDispatch} from \"react-redux\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\nimport IosShareOutlined  from \"@material-ui/icons/IosShareOutlined\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    accountTab: {\n        marginBottom: '24px',\n        '& a': {\n            minHeight: 'auto',\n            minWidth: '10px',\n            padding: '12px 8px',\n            marginRight: '18px',\n            color: theme.palette.grey[600],\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'center'\n        },\n        '& a.Mui-selected': {\n            color: theme.palette.primary.main\n        },\n        '& a > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px'\n        }\n    }\n}));\n\n// tabs panel\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n    return (\n        <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && (\n                <Box\n                    sx={{\n                        p: 0\n                    }}\n                >\n                    {children}\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n// tabs option\nconst tabsOption = [\n    {\n        label: 'Client',\n        icon: <DescriptionTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n    },\n    {\n        label: '-',\n        icon: <AccountCircleTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n    }\n];\n\n// ===========================|| PROFILE 1 ||=========================== //\n\nconst ClientAssessmentDetail = () => {\n    const classes = useStyles();\n    const [value, setValue] = React.useState();\n    const [assessmentDetailData, setAssessmentDetailData] = React.useState({});\n    const dispatch = useDispatch();\n    const {assessment_id} = useParams();\n    const navigate = useNavigate();\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const handleClientAssessmentEdit = () => (navigate(`/assessment/${assessment_id}/edit`));\n\n    const fetchClientAssessmentData = async () => {\n        const response = await caseManagerApi.retrieveClientAssessmentData(assessment_id)\n        if ('status' in response && response.status === 200) {\n            setAssessmentDetailData(response.data)\n            console.log(response.data)\n            dispatch(setRetrievedClientAssessmentData(response.data, assessment_id))\n        }\n    }\n\n    useEffect(() => {\n        fetchClientAssessmentData()\n    }, []);\n\n\n    return (\n        <MainCard title=\"Assessement Data\"\n                  secondary={\n                      <>\n                          <Tooltip title=\"Edit Assessment\">\n                              <IconButton color=\"secondary\" onClick={handleClientAssessmentEdit}>\n                                  <EditTwoToneIcon sx={{fontSize: '1.5rem'}}/>\n                              </IconButton>\n                          </Tooltip>\n                          <Tooltip title=\"Send Assessment\">\n                              <IconButton color=\"secondary\">\n                                  <IosShareOutlined sx={{fontSize: '1.5rem'}}/>\n                              </IconButton>\n                          </Tooltip>\n                      </>\n                  }\n        >\n            <Grid container spacing={gridSpacing}>\n                <Grid item xs={12}>\n                    <AssessmentData assessmentDetailData={assessmentDetailData}/>\n                </Grid>\n            </Grid>\n        </MainCard>\n    );\n};\n\nexport default ClientAssessmentDetail;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/add/index.js",["1627","1628","1629","1630","1631","1632"],"import PropTypes from 'prop-types';\nimport React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {Button, CardActions, CardContent, Divider, Grid, Tab, Tabs, Typography} from '@material-ui/core';\n\n// project imports\nimport ClientSelect from './forms/client';\nimport ExistingExtraMural from './forms/conditional-display/existing-extra-mural';\nimport NewCaseClient from './forms/conditional-display/new-case-client';\nimport ExistingCaseClient from './forms/conditional-display/existing-case-client';\nimport HomeSafetyAssessment from './forms/conditional-display/home-safety';\nimport NewCaseClientAssessment from './forms/conditional-display/new-case-client-assessment';\nimport ExistingCaseClientAssessment from './forms/conditional-display/existing-case-client-assessment';\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport {gridSpacing} from 'store/constant';\n\n// assets\nimport PersonOutlineTwoToneIcon from '@material-ui/icons/PersonOutlineTwoTone';\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\nimport CreditCardTwoToneIcon from '@material-ui/icons/CreditCardTwoTone';\nimport VpnKeyTwoToneIcon from '@material-ui/icons/VpnKeyTwoTone';\nimport {setDailyWorkLoadDetails} from \"store/actions/caseManager/dailyWorkloadActions\";\nimport caseManagerApi from \"store/api-calls/case-manager\";\nimport ProgressCircularControlled from 'views/ui/ProgressCircularControlled';\nimport {SNACKBAR_OPEN} from \"store/actionTypes\";\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    profileTab: {\n        '& .MuiTabs-flexContainer': {\n            borderBottom: 'none'\n        },\n        '& button': {\n            color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[600],\n            minHeight: 'auto',\n            minWidth: '100%',\n            padding: '12px 16px',\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n            textAlign: 'left',\n            justifyContent: 'flex-start'\n        },\n        '& button.Mui-selected': {\n            color: theme.palette.primary.main,\n            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50]\n        },\n        '& button > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px',\n            marginTop: '10px',\n            height: '20px',\n            width: '20px'\n        },\n        '& button > div > span': {\n            display: 'block'\n        },\n        '& > div > span': {\n            display: 'none'\n        }\n    },\n    cardPanels: {\n        borderLeft: '1px solid',\n        borderLeftColor: theme.palette.mode === 'dark' ? '#333d5e' : '#eeeeee',\n        height: '100%'\n    }\n}));\n\n// tabs\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <div role='tabpanel' hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && <div>{children}</div>}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n// tabs option\nconst tabsOption = [];\n\n// ===========================|| PROFILE 2 ||=========================== //\n\nconst ClientAssessment = () => {\n    const classes = useStyles();\n    const customization = useSelector((state) => state.customization);\n    const [value, setValue] = React.useState(0);\n    const [progressLoader, setProgressLoader] = React.useState(false);\n\n    // Redux\n    const clientAssessmentStore = useSelector(state => state.caseManager.clientAssessment)\n    const dispatch = useDispatch();\n    const clientAssessmentTypeStatus = clientAssessmentStore.add.assessment.assessment_status;\n    const clientAssessmentAddData = clientAssessmentStore.add;\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const prepareAssessmentRequestData = (clientAssessmentAddData) => {\n        let requestData = {}\n        switch (clientAssessmentTypeStatus) {\n            case 'NEW_CASE_CLIENT_EXISTING_EMC_NO_REASSESS':\n                requestData = {\n                    assessment: {\n                        ...clientAssessmentAddData.assessment\n                    },\n                    assessment_type_data: {\n                        ...clientAssessmentAddData.assessment_type_data.existing_assessment.data\n                    },\n                    assessment_type_forms: {\n                        ...clientAssessmentAddData.assessment_type_forms.existing_assessment\n                    }\n                }\n                break;\n            case 'NEW_CASE_CLIENT_EXISTING_EMC_REASSESS':\n                requestData = {\n                    assessment: {\n                        ...clientAssessmentAddData.assessment\n                    },\n                    assessment_type_data: {\n                        existing_assessment: {\n                            ...clientAssessmentAddData.assessment_type_data.existing_assessment,\n                            assessment_type_forms: {\n                                ...clientAssessmentAddData.assessment_type_forms.existing_assessment\n                            }\n                        },\n                        reassessment: {\n                            ...clientAssessmentAddData.assessment_type_data.reassessment,\n                            assessment_type_forms: {\n                                ...clientAssessmentAddData.assessment_type_forms.reassessment\n                            }\n                        }\n                    }\n                }\n                break;\n            case 'NEW_CASE_CLIENT_NEW_EXTRA_MURAL_CLIENT':\n                delete clientAssessmentAddData.assessment_type_data.existing_assessment\n                delete clientAssessmentAddData.assessment_type_forms.existing_assessment\n                delete clientAssessmentAddData.assessment_type_data.reassessment\n                delete clientAssessmentAddData.assessment_type_forms.reassessment\n\n                requestData = {\n                    assessment: {\n                        ...clientAssessmentAddData.assessment\n                    },\n                    assessment_type_data: {\n                        ...clientAssessmentAddData.assessment_type_data\n                    },\n                    assessment_type_forms:{\n                        ...clientAssessmentAddData.assessment_type_forms\n                    }\n                }\n                break;\n            case 'EXISTING_CASE_CLIENT_REASSESS':\n                requestData = {\n                    assessment: {\n                        ...clientAssessmentAddData.assessment\n                    },\n                    assessment_type_data: {\n                        ...clientAssessmentAddData.assessment_type_data.reassessment.data\n                    },\n                    assessment_type_forms: {\n                        ...clientAssessmentAddData.assessment_type_forms.reassessment\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n        return requestData;\n    }\n\n    const handleSubmit = async (event) => {\n        setProgressLoader(true);  // Call this to show the loader for the current tab\n        const response = await caseManagerApi.createClientAssessment(prepareAssessmentRequestData(clientAssessmentAddData));\n\n        if (response && 'result' in response) {\n            if (response.result === true) {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Client Assessment has been successfully added.',\n                    variant: 'alert',\n                    alertSeverity: 'success', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            } else {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Client Assessment could not be added. Please try again',\n                    variant: 'alert',\n                    alertSeverity: 'error', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            }\n        } else {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Client Assessment could not be added. Please try again',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n\n        setProgressLoader(false);\n    }\n\n\n    const setAssessmentTypeOptions = () => {\n        tabsOption.length = 0;\n\n        tabsOption.push(\n            {\n                label: 'Client',\n                icon: <DescriptionTwoToneIcon/>,\n                caption: 'Enter Client Details'\n            }\n        )\n\n        switch (clientAssessmentTypeStatus) {\n            case 'NEW_CASE_MANAGEMENT_CLIENT':\n                return tabsOption.push(\n                    {\n                        label: 'New Case Management Client',\n                        icon: <DescriptionTwoToneIcon/>,\n                        caption: 'New Client Details'\n                    },\n                    {\n                        label: 'Home Safety Assessment',\n                        icon: <DescriptionTwoToneIcon/>,\n                        caption: 'Home Safety Details'\n                    },\n                    {\n                        label: 'Client Assessment',\n                        icon: <DescriptionTwoToneIcon/>,\n                        caption: 'Assessment Details'\n                    },\n                )\n\n            case 'EXISTING_CASE_MANAGEMENT_CLIENT':\n                return tabsOption.push(\n                    {\n                        label: 'Existing Case Management Client',\n                        icon: <DescriptionTwoToneIcon/>,\n                        caption: 'Existing Client Details'\n                    },\n                    {\n                        label: 'Client Assessment',\n                        icon: <DescriptionTwoToneIcon/>,\n                        caption: 'Assessment Details'\n                    },\n                )\n            default:\n                return false\n        }\n    }\n\n    const switchAssessmentTypeRender = () => {\n        switch (clientAssessmentTypeStatus) {\n            case 'NEW_CASE_MANAGEMENT_CLIENT':\n                return <fragment>\n                    <TabPanel value={value} index={1}>\n                        <NewCaseClient/>\n                    </TabPanel>\n                    <TabPanel value={value} index={2}>\n                        <HomeSafetyAssessment/>\n                    </TabPanel>\n                    <TabPanel value={value} index={3}>\n                        <NewCaseClientAssessment/>\n                    </TabPanel>\n                </fragment>\n            case 'EXISTING_CASE_MANAGEMENT_CLIENT':\n                return <fragment>\n                    <TabPanel value={value} index={1}>\n                        <ExistingCaseClient/>\n                    </TabPanel>\n                    <TabPanel value={value} index={2}>\n                        <ExistingCaseClientAssessment/>\n                    </TabPanel>\n                </fragment>\n            default:\n                return false\n        }\n    }\n\n    setAssessmentTypeOptions();\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12}>\n                <MainCard title='Client Assessment' content={false}>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={6} lg={3}>\n                            <CardContent>\n                                <Tabs\n                                    value={value}\n                                    onChange={handleChange}\n                                    orientation='vertical'\n                                    className={classes.profileTab}\n                                    variant='scrollable'\n                                    sx={{\n                                        '& button': {\n                                            borderRadius: `${customization.borderRadius}px`\n                                        }\n                                    }}\n                                >\n                                    {tabsOption.map((tab, index) => (\n                                        <Tab\n                                            key={index}\n                                            icon={tab.icon}\n                                            label={\n                                                <Grid container direction='column'>\n                                                    <Typography sx={{textTransform: 'capitalize'}} variant='subtitle1'\n                                                                color='inherit'>\n                                                        {tab.label}\n                                                    </Typography>\n                                                    <Typography component='div' variant='caption'\n                                                                sx={{textTransform: 'capitalize'}}>\n                                                        {tab.caption}\n                                                    </Typography>\n                                                </Grid>\n                                            }\n                                            {...a11yProps(index)}\n                                        />\n                                    ))}\n                                </Tabs>\n                            </CardContent>\n                        </Grid>\n                        <Grid item xs={12} lg={9}>\n                            <CardContent className={classes.cardPanels}>\n                                <TabPanel value={value} index={0}>\n                                    <ClientSelect/>\n                                </TabPanel>\n\n                                {switchAssessmentTypeRender()}\n                            </CardContent>\n                        </Grid>\n                    </Grid>\n\n                    <Divider/>\n\n                    <CardActions>\n                        <Grid container justifyContent='space-between' spacing={0}>\n                            <Grid item>\n                                {value > 0 && (\n                                    <AnimateButton>\n                                        <Button variant='outlined' size='large'\n                                                onClick={(e) => handleChange(e, parseInt(value, 10) - 1)}>\n                                            Back\n                                        </Button>\n                                    </AnimateButton>\n                                )}\n                            </Grid>\n                            <Grid item>\n                                {value < (tabsOption.length - 1) && (\n                                    <AnimateButton>\n                                        <Button variant='contained' size='large'\n                                                onClick={(e) => handleChange(e, 1 + parseInt(value, 10))}>\n                                            Continue\n                                        </Button>\n                                    </AnimateButton>\n                                )}\n                                {value === (tabsOption.length - 1) && (\n                                    <Grid container justify=\"space-around\" spacing={gridSpacing}>\n                                        <Grid item>\n                                            <ProgressCircularControlled display={progressLoader}/>\n                                        </Grid>\n                                        <Grid item>\n                                            <AnimateButton>\n                                                <Button variant='contained' size='large'\n                                                        onClick={handleSubmit}>\n                                                    Save\n                                                </Button>\n                                            </AnimateButton>\n                                        </Grid>\n                                    </Grid>\n                                )}\n                            </Grid>\n                        </Grid>\n                    </CardActions>\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ClientAssessment;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/list/index.js",["1633","1634","1635","1636","1637","1638","1639","1640","1641","1642","1643"],"import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {listReferralsByReviewBoardID} from 'store/actions/reviewBoard/referralActions';\nimport {useNavigate} from 'react-router-dom';\n\n// material-ui\nimport {makeStyles, useTheme} from '@material-ui/styles';\nimport {\n    CardContent,\n    Checkbox,\n    Fab,\n    Grid,\n    IconButton,\n    InputAdornment,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TablePagination,\n    TableRow,\n    TableSortLabel,\n    TextField,\n    Toolbar,\n    Tooltip,\n    Typography\n} from '@material-ui/core';\nimport {visuallyHidden} from '@material-ui/utils';\n\n// third-party\nimport clsx from 'clsx';\n\n// project imports\n\nimport MainCard from 'ui-component/cards/MainCard';\n\n// assets\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterListTwoTone';\nimport PrintIcon from '@material-ui/icons/PrintTwoTone';\nimport FileCopyIcon from '@material-ui/icons/FileCopyTwoTone';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddIcon from '@material-ui/icons/AddTwoTone';\nimport MoreHorizOutlinedIcon from '@material-ui/icons/MoreHorizOutlined';\nimport {useContext, useEffect} from \"react\";\n\n// axios api\nimport caseManagerApi from 'store/api-calls/case-manager';\nimport JWTContext from \"contexts/JWTContext\";\nimport VisibilityTwoToneIcon from \"@material-ui/icons/VisibilityTwoTone\";\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\nimport {listCaseManagerClientAssessment} from \"store/actions/caseManager/clientAssessmentActions\";\n\n// table data\nfunction createData(id, name, category, price, date, qty) {\n    return {id, name, category, price, date, qty};\n}\n\n// table sort\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\n// table header options\nconst headCells = [\n    {\n        id: 'assessment_date',\n        numeric: false,\n        label: 'Assessment Date',\n        align: 'center'\n    },\n    {\n        id: 'assessment_client',\n        numeric: false,\n        label: 'Client',\n        align: 'left'\n    },\n    {\n        id: 'client_status',\n        numeric: false,\n        label: 'Client Status',\n        align: 'left'\n    },\n    {\n        id: 'assessment_type',\n        numeric: false,\n        label: 'Assessment Type',\n        align: 'left'\n    },\n];\n\n// style const\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%'\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2)\n    },\n    table: {\n        minWidth: 750\n    },\n    sortSpan: visuallyHidden\n}));\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        padding: 0,\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1)\n    },\n    highlight: {\n        color: theme.palette.secondary.main\n    },\n    title: {\n        flex: '1 1 100%'\n    }\n}));\n\n// ===========================|| TABLE HEADER ||=========================== //\n\nfunction EnhancedTableHead({classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort, theme,\n                               selected }) {\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                {numSelected > 0 && (\n                    <TableCell padding=\"none\" colSpan={7}>\n                        <EnhancedTableToolbar numSelected={selected.length}/>\n                    </TableCell>\n                )}\n                {numSelected <= 0 &&\n                headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.align}\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span\n                                    className={classes.sortSpan}>{order === 'desc' ? 'sorted descending' : 'sorted ascending'}</span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n                {numSelected <= 0 && (\n                    <TableCell sortDirection={false} align=\"center\" sx={{pr: 3}}>\n                        <Typography\n                            variant=\"subtitle1\"\n                            sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                        >\n                            Action\n                        </Typography>\n                    </TableCell>\n                )}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    theme: PropTypes.object,\n    selected: PropTypes.array,\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired\n};\n\n// ===========================|| TABLE HEADER TOOLBAR ||=========================== //\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const {numSelected} = props;\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"h4\" component=\"div\">\n                    {numSelected} Selected\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Nutrition\n                </Typography>\n            )}\n\n            {numSelected > 0 && (\n                <Tooltip title=\"Delete\">\n                    <IconButton>\n                        <DeleteIcon fontSize=\"small\"/>\n                    </IconButton>\n                </Tooltip>\n            )}\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired\n};\n\n// ===========================|| PRODUCT LIST ||=========================== //\n\nconst ReviewBoardReferralList = () => {\n    const userAuthContext = React.useContext(JWTContext)\n    const {\n        user: {\n            user_type_pk: caseManagerUUID\n        }\n    } = userAuthContext;\n\n    const navigate = useNavigate();\n    const reviewBoardRedux = useSelector(state => state.reviewBoard)\n    const dispatch = useDispatch();\n\n    const classes = useStyles();\n    const theme = useTheme();\n\n    // show a right sidebar when clicked on new product\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpenDialog = () => {\n        navigate('/cp/assessment/add');\n    };\n    const handleCloseDialog = () => {\n        setOpen(false);\n    };\n\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [search, setSearch] = React.useState('');\n    const [rows, setRows] = React.useState([]);\n    const [rowsInitial, setRowsInitial] = React.useState([]);\n\n    const handleSearch = (event) => {\n        const newString = event.target.value;\n        setSearch(newString);\n\n        if (newString) {\n            const newRows = rows.filter((row) => {\n                let matches = true;\n\n                const properties = ['assessment_date', 'client_fullname'];\n                let containsQuery = false;\n\n                properties.forEach((property) => {\n                    if (row[property].toString().toLowerCase().includes(newString.toString().toLowerCase())) {\n                        containsQuery = true;\n                    }\n                });\n\n                if (!containsQuery) {\n                    matches = false;\n                }\n                return matches;\n            });\n            setRows(newRows);\n        } else {\n            setRows(rowsInitial);\n        }\n    };\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelectedId = rows.map((n) => n.name);\n            setSelected(newSelectedId);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, workloadUUID) => {\n        navigate(`/assessment/${workloadUUID}`)\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const fetchListData = async () => {\n        const response = await caseManagerApi.listClientAssessmentByCaseManagerID(caseManagerUUID);\n        if ('result' in response && response.result === true) {\n            setRows(response.data)\n            setRowsInitial(response.data)\n            dispatch(listCaseManagerClientAssessment(response.data))\n        }\n    }\n\n    useEffect(() => {\n        fetchListData()\n    }, [])\n\n    const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n    return (\n        <MainCard title=\"My Client Assessments\" content={false}>\n            <CardContent>\n                <Grid container justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\n                    <Grid item xs={8} sm={6}>\n                        <TextField\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <SearchIcon fontSize=\"small\"/>\n                                    </InputAdornment>\n                                )\n                            }}\n                            onChange={handleSearch}\n                            placeholder=\"Search Workload\"\n                            value={search}\n                            size=\"small\"\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={6} sx={{textAlign: 'right'}}>\n                        <Tooltip title=\"Copy\">\n                            <IconButton>\n                                <FileCopyIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Print\">\n                            <IconButton>\n                                <PrintIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Filter\">\n                            <IconButton>\n                                <FilterListIcon/>\n                            </IconButton>\n                        </Tooltip>\n\n                        {/* product add & dialog */}\n                        <Tooltip title=\"Add Assessment\">\n                            <Fab\n                                color=\"primary\"\n                                size=\"small\"\n                                onClick={handleClickOpenDialog}\n                                sx={{boxShadow: 'none', ml: 1, width: '32px', height: '32px', minHeight: '32px'}}\n                            >\n                                <AddIcon fontSize=\"small\"/>\n                            </Fab>\n                        </Tooltip>\n\n                    </Grid>\n                </Grid>\n            </CardContent>\n\n            {/* table */}\n            <TableContainer>\n                <Table className={classes.table} aria-labelledby=\"tableTitle\">\n                    <EnhancedTableHead\n                        classes={classes}\n                        numSelected={selected.length}\n                        order={order}\n                        orderBy={orderBy}\n                        onSelectAllClick={handleSelectAllClick}\n                        onRequestSort={handleRequestSort}\n                        rowCount={rows.length}\n                        theme={theme}\n                        selected={selected}\n                    />\n                    <TableBody>\n                        {stableSort(rows, getComparator(order, orderBy))\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map((row, index) => {\n                                const labelId = `enhanced-table-checkbox-${index}`;\n\n                                return (\n                                    <TableRow\n                                        hover\n                                        role=\"checkbox\"\n                                        tabIndex={-1}\n                                        key={index}\n                                    >\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"center\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row.assessment_date}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"left\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row?.client_fullname}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"left\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row?.client_status}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"left\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row?.assessment_status}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell align=\"center\" sx={{pr: 3}}>\n                                            <IconButton\n                                                color=\"primary\"\n                                                onClick={(event) => handleClick(event, row.client_assessment_id)}\n                                            >\n                                                <VisibilityTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                                            </IconButton>\n                                            <IconButton color=\"secondary\">\n                                                <EditTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                                            </IconButton>\n                                        </TableCell>\n\n\n                                    </TableRow>\n                                );\n                            })}\n                        {emptyRows > 0 && (\n                            <TableRow\n                                style={{\n                                    height: 53 * emptyRows\n                                }}\n                            >\n                                <TableCell colSpan={6}/>\n                            </TableRow>\n                        )}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n\n            {/* table pagination */}\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </MainCard>\n    );\n};\n\nexport default ReviewBoardReferralList;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/detail/assessment-data.js",["1644","1645","1646","1647","1648","1649","1650","1651","1652","1653","1654","1655","1656","1657","1658","1659","1660","1661","1662","1663","1664"],"import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// material-ui\r\nimport {\r\n    Box,\r\n    Button,\r\n    CardContent,\r\n    Chip,\r\n    Divider, Fab,\r\n    Grid,\r\n    LinearProgress,\r\n    List,\r\n    ListItemIcon,\r\n    ListItemSecondaryAction,\r\n    ListItemText,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableRow, Tooltip,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport ListItemButton from '@material-ui/core/ListItemButton';\r\n\r\n// project imports\r\nimport Avatar from 'ui-component/extended/Avatar';\r\nimport SubCard from 'ui-component/cards/SubCard';\r\nimport {gridSpacing} from 'store/constant';\r\n\r\n// assets\r\nimport {IconEdit} from '@tabler/icons';\r\nimport PhonelinkRingTwoToneIcon from '@material-ui/icons/PhonelinkRingTwoTone';\r\nimport PinDropTwoToneIcon from '@material-ui/icons/PinDropTwoTone';\r\nimport MailTwoToneIcon from '@material-ui/icons/MailTwoTone';\r\nimport AttachmentIcon from '@material-ui/icons/AttachmentTwoTone';\r\nimport PageViewIcon from '@material-ui/icons/PageviewTwoTone';\r\n\r\nimport Avatar3 from 'assets/images/users/avatar-3.png';\r\nimport AddIcon from \"@material-ui/icons/AddTwoTone\";\r\nimport AssessmentForms from './assessment-forms';\r\nimport LayersTwoToneIcon from \"@material-ui/icons/LayersTwoTone\";\r\n\r\nconst AssessmentData = ({assessmentDetailData}) => {\r\n    const [assessmentFormsDialogOpen, setAssessmentFormsDialogOpen] = React.useState(false);\r\n    const handleOpenAssessmentFormsDialog = () => {\r\n        setAssessmentFormsDialogOpen(true);\r\n    };\r\n    const handleCloseAssessmentFormsDialog = () => {\r\n        setAssessmentFormsDialogOpen(false);\r\n    };\r\n\r\n    const assessmentTypes = {\r\n        'NEW_CASE_CLIENT_EXISTING_EMC_NO_REASSESS': ['existing_assessment'],\r\n        'NEW_CASE_CLIENT_EXISTING_EMC_REASSESS': ['existing_assessment', 'reassessment'],\r\n        'NEW_CASE_CLIENT_NEW_EXTRA_MURAL_CLIENT': ['newextramuralclient_assessment'],\r\n        'EXISTING_CASE_CLIENT_REASSESS': ['reassessment']\r\n    }\r\n    const noDisplayAssessmentTypeDataKeys = [\r\n        'assessment_id',\r\n        'assessment_forms'\r\n    ]\r\n\r\n    const renderAssessmentTypeDataFields = (typeDataFields) => {\r\n        let assessmentTypeDataFieldsJSX = <></>;\r\n        return Object.keys(typeDataFields).map((typeDataFieldKey, index) => {\r\n            if (noDisplayAssessmentTypeDataKeys.includes(typeDataFieldKey) === false) {\r\n                assessmentTypeDataFieldsJSX =\r\n                    <ListItemButton key={`list-data-item-${typeDataFieldKey}`}>\r\n                        <ListItemIcon>\r\n                            <MailTwoToneIcon sx={{fontSize: '1.3rem'}}/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={<Typography variant=\"subtitle1\">{typeDataFieldKey}</Typography>}/>\r\n                        <ListItemSecondaryAction>\r\n                            <Typography variant=\"body\" align=\"right\">\r\n                                {typeDataFields[typeDataFieldKey]}\r\n                            </Typography>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItemButton>\r\n\r\n            }\r\n\r\n            if (typeDataFieldKey === \"assessment_forms\") {\r\n                assessmentTypeDataFieldsJSX =\r\n                    <ListItemButton key={`list-button-item-${typeDataFieldKey}`}>\r\n                        <ListItemIcon>\r\n                            <AttachmentIcon sx={{fontSize: '1.3rem'}}/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={<Typography variant=\"subtitle1\">{typeDataFieldKey}</Typography>}/>\r\n                        <ListItemSecondaryAction>\r\n                            <AssessmentForms key={`assessment-form-item-${typeDataFieldKey}`} forms={typeDataFields[typeDataFieldKey]} open={assessmentFormsDialogOpen}\r\n                                             handleCloseDialog={handleCloseAssessmentFormsDialog}/>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItemButton>\r\n\r\n            }\r\n\r\n            return <div key={index}>\r\n                {assessmentTypeDataFieldsJSX}\r\n            </div>\r\n        })\r\n    }\r\n\r\n    let assessmentStatusJSX = <></>;\r\n    const switchAssessmentTypeRender = (assessmentStatus) => {\r\n        const assessmentTypeKeys = assessmentTypes[assessmentStatus]\r\n\r\n        assessmentStatusJSX = assessmentTypeKeys.map(typeKey => (\r\n            <Grid item lg={10} xs={12} key={`grid-key-${typeKey}`}>\r\n                <SubCard title={typeKey}>\r\n                    <List component=\"nav\">\r\n                        {renderAssessmentTypeDataFields(assessmentDetailData[typeKey])}\r\n                    </List>\r\n                </SubCard>\r\n            </Grid>\r\n        ))\r\n\r\n        return (<Grid container spacing={gridSpacing}>\r\n            {assessmentStatusJSX}\r\n        </Grid>)\r\n    }\r\n\r\n    const renderAssessmentData = () => {\r\n        if (assessmentDetailData && assessmentDetailData.assessment_status) {\r\n            return (<Grid item lg={8} xs={12}>\r\n                <Grid container direction=\"column\" spacing={gridSpacing}>\r\n                    <Grid item xs={12}>\r\n                        <SubCard title=\"Assessement Data\">\r\n                            {switchAssessmentTypeRender(assessmentDetailData.assessment_status)}\r\n                        </SubCard>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>)\r\n        }\r\n        return <></>\r\n    }\r\n\r\n    const renderClient = () => (\r\n        <Grid item lg={4} xs={12}>\r\n            <SubCard\r\n                title={\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>\r\n                            <Avatar alt=\"User 1\" src={Avatar3}/>\r\n                        </Grid>\r\n                        <Grid item xs zeroMinWidth>\r\n                            <Typography align=\"left\" variant=\"subtitle1\">\r\n                                Suzan\r\n                            </Typography>\r\n                            <Typography align=\"left\" variant=\"subtitle2\">\r\n                                UI/UX Designer\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n            >\r\n                <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n                    <ListItemButton>\r\n                        <ListItemIcon>\r\n                            <MailTwoToneIcon sx={{fontSize: '1.3rem'}}/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={<Typography variant=\"subtitle1\">Email</Typography>}/>\r\n                        <ListItemSecondaryAction>\r\n                            <Typography variant=\"subtitle2\" align=\"right\">\r\n                                demo@sample.com\r\n                            </Typography>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItemButton>\r\n                    <Divider/>\r\n                    <ListItemButton>\r\n                        <ListItemIcon>\r\n                            <PhonelinkRingTwoToneIcon sx={{fontSize: '1.3rem'}}/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={<Typography variant=\"subtitle1\">Phone</Typography>}/>\r\n                        <ListItemSecondaryAction>\r\n                            <Typography variant=\"subtitle2\" align=\"right\">\r\n                                (+99) 9999 999 999\r\n                            </Typography>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItemButton>\r\n                    <Divider/>\r\n                    <ListItemButton>\r\n                        <ListItemIcon>\r\n                            <PinDropTwoToneIcon sx={{fontSize: '1.3rem'}}/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={<Typography variant=\"subtitle1\">Location</Typography>}/>\r\n                        <ListItemSecondaryAction>\r\n                            <Typography variant=\"subtitle2\" align=\"right\">\r\n                                Melbourne\r\n                            </Typography>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItemButton>\r\n                </List>\r\n            </SubCard>\r\n        </Grid>\r\n    )\r\n\r\n    return (<Grid container spacing={gridSpacing}>\r\n        {renderClient()}\r\n\r\n        {renderAssessmentData()}\r\n    </Grid>)\r\n};\r\n\r\nexport default AssessmentData;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/personal-information/home-safety.js",["1665","1666","1667","1668","1669","1670","1671","1672","1673","1674","1675","1676","1677","1678","1679","1680"],"import React from 'react';\n\n// material-ui\nimport {makeStyles, useTheme} from '@material-ui/styles';\nimport {\n    CardContent,\n    Button,\n    Divider, FormControl,\n    FormControlLabel,\n    Grid,\n    IconButton,\n    MenuItem, Radio, RadioGroup, Slider,\n    Switch,\n    TextField,\n    Typography,\n    Tab,\n    Tabs, Box\n} from '@material-ui/core';\n\n// project imports\nimport SubCard from 'ui-component/cards/SubCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport {gridSpacing} from 'store/constant';\n\n// assets\nimport FaceTwoToneIcon from \"@material-ui/icons/FaceTwoTone\";\nimport DomainTwoToneIcon from \"@material-ui/icons/DomainTwoTone\";\nimport MonetizationOnTwoToneIcon from \"@material-ui/icons/MonetizationOnTwoTone\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport Accordion from 'ui-component/extended/Accordion';\nimport MainCard from \"ui-component/cards/MainCard\";\nimport PersonOutlineTwoToneIcon from '@material-ui/icons/PersonOutlineTwoTone';\n\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setPersonalInformationDetails} from \"store/actions/client/personalInformationActions\";\n\nfunction a11yProps(index) {\n    return {\n        id: `vertical-tab-${index}`,\n        'aria-controls': `vertical-tabpanel-${index}`\n    };\n}\n\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`vertical-tabpanel-${index}`}\n            aria-labelledby={`vertical-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box\n                    sx={{\n                        p: 0\n                    }}\n                >\n                    {children}\n                </Box>\n            )}\n        </div>\n    );\n}\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n        display: 'flex',\n        height: 'auto'\n    },\n    tabs: {\n        borderRight: `1px solid ${theme.palette.divider}`,\n        minWidth: 160\n    },\n    profileTab: {\n        '& .MuiTabs-flexContainer': {\n            borderBottom: 'none',\n            height: '400px'\n        },\n        '& button': {\n            color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[600],\n            minHeight: 'auto',\n            minWidth: '100%',\n            padding: '12px 16px',\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n            textAlign: 'left',\n            justifyContent: 'flex-start'\n        },\n        '& button.Mui-selected': {\n            color: theme.palette.primary.main,\n            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50]\n        },\n        '& button > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px',\n            marginTop: '10px',\n            height: '20px',\n            width: '20px'\n        },\n        '& button > div > span': {\n            display: 'block'\n        },\n        '& > div > span': {\n            display: 'none'\n        }\n    }\n}));\n\nconst HomeSafetyAssessment = () => {\n    const classes = useStyles();\n    const customization = useSelector((state) => state.customization);\n    const personalInfoData = useSelector(state => state.client.personalInformation);\n    const {home_safety_assessment = {}} = personalInfoData\n\n    const theme = useTheme();\n    const dispatch = useDispatch()\n    const [value, setValue] = React.useState(0);\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const assessmentQuestions = {\n        \"outside\": {\n            \"title\": \"Outside\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Are the paths around the property in good repair?\",\n                    \"radio_group_name\": \"outside-paths-around-property\"\n                },\n                {\n                    \"question_text\": \"Are the walkways clear of clutter? (i.e., ice and snow in Winter)\",\n                    \"radio_group_name\": \"outside-walkways-clear-clutter\"\n                },\n                {\n                    \"question_text\": \"Are the paths and entrances well lit?\",\n                    \"radio_group_name\": \"outside-paths-entrances-well-lit\"\n                },\n                {\n                    \"question_text\": \"Are the stairs leading to the property in good repair?\",\n                    \"radio_group_name\": \"outside-paths-stairs-good-repair\"\n                },\n                {\n                    \"question_text\": \"Are the edges of the outside steps slip-resistant?\",\n                    \"radio_group_name\": \"outside-paths-edges-outside-slip-resistant\"\n                },\n                {\n                    \"question_text\": \"Are you able to see the edges of the outside steps clearly?\",\n                    \"radio_group_name\": \"outside-paths-edges-outside-seen-clearly\"\n                },\n                {\n                    \"question_text\": \"Is the doorbell functioning?\",\n                    \"radio_group_name\": \"outside-paths-doorbell-functioning\"\n                }\n            ]\n        },\n        \"garage\": {\n            \"title\": \"Garage\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Can you easily enter or exit the vehicle in the garage?\",\n                    \"radio_group_name\": \"garage-easily-enter-exit-vehicle\"\n                },\n                {\n                    \"question_text\": \"Can you safely manoeuvre in your garage?\",\n                    \"radio_group_name\": \"garage-safely-manoeuvre\"\n                },\n                {\n                    \"question_text\": \"Is the garage well lit?\",\n                    \"radio_group_name\": \"garage-well-lit\"\n                },\n            ]\n        },\n        \"indoor-stairs\": {\n            \"title\": \"Indoor Stairs\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Are the stairs build in safe way?\",\n                    \"radio_group_name\": \"indoor-stairs-build-safe-way\"\n                }, {\n                    \"question_text\": \"Do all stairs have a sturdy handrail?\",\n                    \"radio_group_name\": \"indoor-stairs-sturdy-handrail\"\n                }, {\n                    \"question_text\": \"Are you able to see the edges of the steps clearly?\",\n                    \"radio_group_name\": \"indoor-stairs-edges-steps-seen-clearly\"\n                }, {\n                    \"question_text\": \"Are the stairs visible when the light is turned on?\",\n                    \"radio_group_name\": \"indoor-stairs-visible-light-turned-on\"\n                },\n            ]\n        },\n        \"floors-hallways\": {\n            \"title\": \"Floors and Hallways\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Are the floors and the hallways well lit?\",\n                    \"radio_group_name\": \"floors-hallways-well-lit\"\n                }, {\n                    \"question_text\": \"Do the carpets and mats lie flat without wrinkles or curled edges?\",\n                    \"radio_group_name\": \"floors-hallways-carpets-mats-wrinkles\"\n                }, {\n                    \"question_text\": \"Are the floors clear of clutter?\",\n                    \"radio_group_name\": \"floors-hallways-clear-of-clutter\"\n                }\n            ]\n        },\n        \"basement\": {\n            \"title\": \"Basement\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Is the basement properly lit?\",\n                    \"radio_group_name\": \"basement-properly-lit\"\n                },\n                {\n                    \"question_text\": \"Can you easily access the basement appliances?\",\n                    \"radio_group_name\": \"basement-easily-access-appliances\"\n                }\n            ]\n        },\n        \"bathroom\": {\n            \"title\": \"Bathroom\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Are there slip resistant mats in the bathroom?\",\n                    \"radio_group_name\": \"bathroom-slip-resistant-mats\"\n                },\n                {\n                    \"question_text\": \"Is there a slip resistant mat in the bathtub or shower?\",\n                    \"radio_group_name\": \"bathroom-slip-resistant-mat-bathtub-shower\"\n                },\n                {\n                    \"question_text\": \"Do you have assistive devices in the bathroom?\",\n                    \"radio_group_name\": \"bathroom-assistive-devices\"\n                },\n                {\n                    \"question_text\": \"Are there grab bars near the bathtub, shower, and toilet?\",\n                    \"radio_group_name\": \"bathroom-grab-bars-shower-toilet\"\n                },\n                {\n                    \"question_text\": \"Is there bath seat in the bathtub or shower?\",\n                    \"radio_group_name\": \"bathroom-bath-seat-bathtub\"\n                },\n                {\n                    \"question_text\": \"Do you have bathtub lift?\",\n                    \"radio_group_name\": \"bathroom-lift\"\n                },\n                {\n                    \"question_text\": \"Is the shower build separately from the bathtub?\",\n                    \"radio_group_name\": \"bathroom-shower-build-separate\"\n                },\n                {\n                    \"question_text\": \"Is it easy to reach frequently used bathroom items?\",\n                    \"radio_group_name\": \"bathroom-reach-frequent-items\"\n                }\n            ]\n        },\n        \"toilet\": {\n            \"title\": \"Toilet\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Are all toilets in the house easily accessible?\",\n                    \"radio_group_name\": \"toilet-house-easily-accessible\"\n                },\n                {\n                    \"question_text\": \"o Are you using a toilet seat riser?\",\n                    \"radio_group_name\": \"toilet-seat-riser\"\n                },\n            ]\n        },\n        \"living-room\": {\n            \"title\": \"Living Room\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Is the lounge chair safe? (Meaning is your chair at the correct height, and with adequate arm rests?)\",\n                    \"radio_group_name\": \"living-room-lounger-chair-safe\"\n                },\n                {\n                    \"question_text\": \"Is there adequate lighting in the living room?\",\n                    \"radio_group_name\": \"living-room-adequate-lighting\"\n                },\n                {\n                    \"question_text\": \"Is the doorbell functioning and easy to hear?\",\n                    \"radio_group_name\": \"living-room-doorbell-functioning\"\n                },\n            ]\n        },\n        \"telephone\": {\n            \"title\": \"Telephone\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Do you have a fixed home phone line?\",\n                    \"radio_group_name\": \"telephone-fixed-home-phone-line\"\n                },\n                {\n                    \"question_text\": \"Is the home phone line within easy reach?\",\n                    \"radio_group_name\": \"telephone-within-reach\"\n                },\n                {\n                    \"question_text\": \"Do you have a mobile phone?\",\n                    \"radio_group_name\": \"telephone-mobile-phone\"\n                },\n            ]\n        },\n        \"bedroom\": {\n            \"title\": \"Bedroom\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Are you able to turn on a light before getting out of bed?\",\n                    \"radio_group_name\": \"bedroom-turn-light-before-out-of-bed\"\n                },\n                {\n                    \"question_text\": \"Is it easy to get out of bed?\",\n                    \"radio_group_name\": \"bedroom-easy-out-of-bed\"\n                },\n                {\n                    \"question_text\": \"Is the path to the nearest toilet safe?\",\n                    \"radio_group_name\": \"bedroom-nearest-toilet-safe\"\n                },\n            ]\n        },\n        \"kitchen\": {\n            \"title\": \"Kitchen\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Do the cabinet doors and drawers close all the way?\",\n                    \"radio_group_name\": \"kitchen-cabinet-doors-close-allway\"\n                },\n                {\n                    \"question_text\": \"Is it easy to reach frequently used kitchen items?\",\n                    \"radio_group_name\": \"kitchen-easy-reach-frequent-items\"\n                },\n                {\n                    \"question_text\": \"Is there a step stool in the kitchen?\",\n                    \"radio_group_name\": \"kitchen-step-stool\"\n                },\n                {\n                    \"question_text\": \"Is there a slip resistant mat in front of the kitchen sink?\",\n                    \"radio_group_name\": \"kitchen-slip-resistant-mat-front-sink\"\n                },\n                {\n                    \"question_text\": \"Is the ventilation adequate?\",\n                    \"radio_group_name\": \"kitchen-ventilation-adequate\"\n                },\n            ]\n        },\n        \"first-safety-concerns\": {\n            \"title\": \"First Safety Concerns\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Are there smokers in the home?\",\n                    \"radio_group_name\": \"first-safety-concerns-smokers-home\"\n                },\n                {\n                    \"question_text\": \"Are smoke detectors functioning?\",\n                    \"radio_group_name\": \"first-safety-concerns-smoke-detectors-functioning\"\n                },\n                {\n                    \"question_text\": \"Are carbon monoxide detectors functioning?\",\n                    \"radio_group_name\": \"first-safety-concerns-carbon-monoxide-detectors\"\n                },\n                {\n                    \"question_text\": \"Is there a fire extinguisher in the home?\",\n                    \"radio_group_name\": \"first-safety-concerns-fire-extinguisher\"\n                },\n                {\n                    \"question_text\": \"Is the fireplace or wood stove safe?\",\n                    \"radio_group_name\": \"first-safety-concerns-fireplace-wood-stove-safe\"\n                },\n            ]\n        },\n        \"other-safety-concerns\": {\n            \"title\": \"Other Safety Concerns\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Can a walking aid easily be used in the home?\",\n                    \"radio_group_name\": \"other-safety-concerns-walking-aid-easy-use\"\n                }, {\n                    \"question_text\": \"Are there pets in the home?\",\n                    \"radio_group_name\": \"other-safety-concerns-pets-at-home\"\n                }, {\n                    \"question_text\": \"Is an emergency contact list easily accessible if needed?\",\n                    \"radio_group_name\": \"other-safety-concerns-emergency-contact-available\"\n                }, {\n                    \"question_text\": \"Are there any water leaks inside the house?\",\n                    \"radio_group_name\": \"other-safety-concerns-water-leaks-inside-house\"\n                }, {\n                    \"question_text\": \"Is there mold in the house?\",\n                    \"radio_group_name\": \"other-safety-concerns-mold-house\"\n                }, {\n                    \"question_text\": \"Are there signs of pest infestation in the house?\",\n                    \"radio_group_name\": \"other-safety-concerns-pest-infestation-house\"\n                }, {\n                    \"question_text\": \"Does the heating system work properly?\",\n                    \"radio_group_name\": \"other-safety-concerns-heating-system-work-properly\"\n                }, {\n                    \"question_text\": \"Does the paint in the house contain lead?\",\n                    \"radio_group_name\": \"other-safety-concerns-paint-house-lead\"\n                }, {\n                    \"question_text\": \"Are the pipes in the house in good condition? (e.g., broken, eroded, etc.)\",\n                    \"radio_group_name\": \"other-safety-concerns-house-pipes-good-condition\"\n                },\n            ]\n        }\n    }\n\n    const formik = useFormik({\n        enableReinitialize: true,\n        initialValues: {\n            ...home_safety_assessment\n        },\n        validate: values => {\n            dispatch(setPersonalInformationDetails({\n                home_safety_assessment: values\n            }))\n        }\n    });\n\n    console.log(home_safety_assessment)\n\n    const safetyAssessmentTabRender = Object.keys(assessmentQuestions).map((assessmentCategoryKey, index) => {\n        const {title: assessmentCategoryTitle} = assessmentQuestions[assessmentCategoryKey];\n\n        return (\n            <Tab\n                icon={<PersonOutlineTwoToneIcon/>}\n                label={\n                    <Grid container direction=\"column\">\n                        <Typography variant=\"subtitle1\" color=\"inherit\">\n                            {assessmentCategoryTitle}\n                        </Typography>\n                    </Grid>}\n                {...a11yProps(index)}\n            />\n        )\n    })\n\n    const safetyAssessmentQuestionsRender = Object.keys(assessmentQuestions).map((assessmentCategoryKey, index) => {\n        const {title: assessmentCategoryTitle, questions} = assessmentQuestions[assessmentCategoryKey];\n        const preparedAssessmentQuestionsRender = questions.map((question, index) => {\n            const {question_text: questionText, radio_group_name: radioGroupName} = question;\n            const formikValueGroupName = formik.values[radioGroupName]\n\n            return <Grid container spacing={gridSpacing} direction=\"column\"\n                         alignItems=\"left\">\n                <Grid item xs={12}>\n                    <Typography variant=\"subtitle1\">{questionText}</Typography>\n\n                    <FormControl>\n                        <RadioGroup\n                            row\n                            onChange={formik.handleChange}\n                            name={radioGroupName}\n                            value={formikValueGroupName}\n                        >\n                            <FormControlLabel\n                                value={`home-safety-assessment-${radioGroupName}-yes`}\n                                control={\n                                    <Radio\n                                        sx={{\n                                            color: theme.palette.primary.main,\n                                            '&.Mui-checked': {color: theme.palette.primary.main}\n                                        }}\n                                    />\n                                }\n                                label=\"Yes\"\n                            />\n\n                            <FormControlLabel\n                                value={`home-safety-assessment-${radioGroupName}-no`}\n                                control={\n                                    <Radio\n                                        sx={{\n                                            color: theme.palette.error.main,\n                                            '&.Mui-checked': {color: theme.palette.error.main}\n                                        }}\n                                    />\n                                }\n                                label=\"No\"\n                            />\n\n                            <FormControlLabel\n                                value={`home-safety-assessment-${radioGroupName}-na`}\n                                control={\n                                    <Radio\n                                        sx={{\n                                            color: theme.palette.success.main,\n                                            '&.Mui-checked': {color: theme.palette.success.main}\n                                        }}\n                                    />\n                                }\n                                label=\"N/A\"\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                    <Divider/>\n                </Grid>\n            </Grid>\n        })\n\n        return (\n            <TabPanel value={value} index={index}>\n                <SubCard title={assessmentCategoryTitle}>\n                    <CardContent>\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item xs={10} sm={6} lg={10} md={6}>\n                                {preparedAssessmentQuestionsRender}\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </SubCard>\n            </TabPanel>\n        )\n    })\n\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12}>\n                <MainCard>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={4} sm={4} md={3}>\n                            <Tabs\n                                value={value}\n                                onChange={handleChange}\n                                orientation=\"vertical\"\n                                className={classes.profileTab}\n                                variant=\"scrollable\"\n                                sx={{\n                                    '& button': {\n                                        borderRadius: `${customization.borderRadius}px`\n                                    }\n                                }}\n                            >\n                                {safetyAssessmentTabRender}\n                            </Tabs>\n                        </Grid>\n\n                        <Grid item xs={12} sm={8} md={9} >\n                            {safetyAssessmentQuestionsRender}\n                        </Grid>\n                    </Grid>\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default HomeSafetyAssessment;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/personal-information/personal-info.js",["1681","1682","1683","1684","1685","1686","1687","1688","1689"],"import React from 'react';\n\n// material-ui\nimport {Autocomplete, Button, Grid, MenuItem, TextField} from '@material-ui/core';\n\n// project imports\nimport SubCard from 'ui-component/cards/SubCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport {gridSpacing} from 'store/constant';\nimport MaskedInput from \"react-text-mask\";\n\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport {setPersonalInformationDetails} from \"store/actions/client/personalInformationActions\";\nimport clientApi from \"store/api-calls/client\";\nimport JWTContext from \"contexts/JWTContext\";\nimport {SNACKBAR_OPEN} from \"store/actionTypes\";\n\n// select options\nconst genders = [\n    {\n        value: 'gender-male',\n        label: 'Male'\n    },\n    {\n        value: 'gender-female',\n        label: 'Female'\n    },\n    {\n        value: 'gender-binary',\n        label: 'Binary'\n    },\n    {\n        value: 'gender-prefer-not-to-answer',\n        label: 'Prefer not to answer',\n    },\n];\n\nconst ethnicBackgroundOptions = [\n    {\n        value: 'ethnic-background-white-caucasian',\n        label: 'White-Caucasian'\n    },\n    {\n        value: 'ethnic-background-indigenous-first-nations',\n        label: 'Indigenous - First Nations'\n    },\n    {\n        value: 'ethnic-background-indigenous-metis',\n        label: 'Indigenous - Metis'\n    },\n    {\n        value: 'ethnic-background-indigenous-inuit',\n        label: 'Indigenous - Inuit'\n    },\n    {\n        value: 'ethnic-background-indigenous-other',\n        label: 'Indigenous - Other'\n    },\n    {\n        value: 'ethnic-background-asian',\n        label: 'Asian'\n    },\n    {\n        value: 'ethnic-background-african-caribbean-black-canadian',\n        label: 'African-Caribbean-Black Canadian'\n    },\n    {\n        value: 'ethnic-background-hispanic',\n        label: 'Hispanic'\n    },\n    {\n        value: 'ethnic-background-other',\n        label: 'Other'\n    },\n];\n\nconst maritalStatusOptions = [\n    {\n        value: 'marital-status-single',\n        label: 'Single'\n    }, {\n        value: 'marital-status-married',\n        label: 'Married'\n    }, {\n        value: 'marital-status-common-law',\n        label: 'Common-Law'\n    }, {\n        value: 'marital-status-separated',\n        label: 'Separated'\n    }, {\n        value: 'marital-status-divorced',\n        label: 'Divorced'\n    }, {\n        value: 'marital-status-widowed',\n        label: 'Widowed'\n    }, {\n        value: 'marital-status-prefer-not-to-answer',\n        label: 'Prefer not to answer'\n    },\n    {\n        value: 'marital-status-other',\n        label: 'Other'\n    },\n];\n\nconst familySituationOptions = [\n    {\n        value: 'family-situation-lives-alone',\n        label: 'Lives Alone'\n    }, {\n        value: 'family-situation-lives-with-one-person',\n        label: 'Lives with 1 person'\n    }, {\n        value: 'family-situation-lives-with-two-more-people',\n        label: 'Lives with 2 or more people'\n    },\n    {\n        value: 'family-situation-other',\n        label: 'Other'\n    },\n];\n\nconst highestLevelOfEducationOptions = [\n    {\n        value: 'highest-level-of-education-pre-schooling-or-no-schooling',\n        label: 'Pre-schooling or no schooling'\n    },\n    {\n        value: 'highest-level-of-education-primary-school',\n        label: 'Primary school (Grades 1-6)'\n    },\n    {\n        value: 'highest-level-of-education-middle-school',\n        label: 'Primary school (Grades 7-9)'\n    },\n    {\n        value: 'highest-level-of-education-high-school-diploma-professional-studies',\n        label: 'High School Diploma - Professional Studies'\n    },\n    {\n        value: 'highest-level-of-education-high-school-diploma-college-studies',\n        label: 'High School Diploma - College Studies'\n    },\n    {\n        value: 'highest-level-of-education-bachelors-degree',\n        label: `Bachelor's Degree`\n    }, {\n        value: 'highest-level-of-education-masters-degree',\n        label: `Master's Degree`\n    }, {\n        value: 'highest-level-of-education-professional-degree',\n        label: `Professional Degree`\n    }, {\n        value: 'highest-level-of-education-doctoral-degree',\n        label: 'Doctoral Degree'\n    }, {\n        value: 'highest-level-of-education-foreign-degree',\n        label: 'Foreign Degree'\n    },\n    {\n        value: 'highest-level-of-education-other',\n        label: 'Other'\n    },\n];\n\nconst employmentOptions = [\n    {\n        value: 'employment-employed',\n        label: 'Employed'\n    }, {\n        value: 'employment-unemployed',\n        label: 'Unemployed'\n    }, {\n        value: 'employment-retired',\n        label: 'Retired'\n    }, {\n        value: 'employment-unable-to-work',\n        label: 'Unable to work'\n    }, {\n        value: 'employment-disability-benefits',\n        label: 'Disability Benefits'\n    },\n    {\n        value: 'employment-other',\n        label: 'Other'\n    },\n];\n\nconst annualHouseholdIncomeOptions = [\n    {\n        value: 'annual-household-income-less-than-five-thousand',\n        label: 'Less than $5,000'\n    }, {\n        value: 'annual-household-income-five-thousand-to-eleven-thousand-ninety-nine',\n        label: '$5,000 through $11,999'\n    }, {\n        value: 'annual-household-income-twelve-thousand-to-twenty-four-thousand-ninety-nine',\n        label: '$12,000 through $24,999'\n    }, {\n        value: 'annual-household-income-twenty-five-thousand-to-forty-nine-thousand',\n        label: '$25,000 through $49,999'\n    }, {\n        value: 'annual-household-income-fifty-thousand-to-ninety-nine-thousand',\n        label: '$50,000 through $99,999'\n    },\n    {\n        value: 'annual-household-income-hundred-thousand-and-greater',\n        label: '$100,000 and greater'\n    },\n    {\n        value: 'annual-household-income-i-dont-know',\n        label: `I don't know`\n    },\n    {\n        value: 'annual-household-income-prefer-not-to-answer',\n        label: 'I prefer not to answer'\n    },\n    {\n        value: 'annual-household-income-other',\n        label: 'Other'\n    },\n];\n\nconst housingSituationOptions = [\n    {\n        value: 'housing-situation-lives-in-own-property-apartment',\n        label: 'Lives in their Own Property - Apartment'\n    }, {\n        value: 'housing-situation-lives-in-own-property-condominium',\n        label: 'Lives in their Own Property - Condominium'\n    }, {\n        value: 'housing-situation-lives-in-own-property-single-home-townhouse',\n        label: 'Lives in their Own Property - Single Home or Townhouse'\n    }, {\n        value: 'housing-situation-lives-in-rented-property',\n        label: 'Lives in Rented Property'\n    },\n    {\n        value: 'housing-situation-other',\n        label: 'Other'\n    },\n];\n\nconst languageProficiencyOptions = [\n    {\n        id: 'language-proficiency-english-low',\n        label: 'English - Low'\n    },\n    {\n        id: 'language-proficiency-english-intermediate',\n        label: 'English - Intermediate'\n    },\n    {\n        id: 'language-proficiency-english-high',\n        label: 'English - High'\n    },\n    {\n        id: 'language-proficiency-french-low',\n        label: 'French - Low'\n    },\n    {\n        id: 'language-proficiency-french-intermediate',\n        label: 'French - Intermediate'\n    },\n    {\n        id: 'language-proficiency-french-high',\n        label: 'French - High'\n    },\n    {\n        id: 'language-proficiency-other',\n        label: 'Other'\n    },\n    {\n        id: 'language-proficiency-interpreter-needed',\n        label: 'Interpreter Needed'\n    }\n];\n\nconst PersonalInformation = ({client, setProgressLoader}) => {\n    const personalInfoData = useSelector(state => state.client.personalInformation)\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        enableReinitialize: true,\n        initialValues: {\n            date_of_birth: personalInfoData.date_of_birth,\n            gender: personalInfoData.gender,\n            ethnic_background: personalInfoData.ethnic_background,\n            language_proficiency: personalInfoData.language_proficiency,\n            marital_status: personalInfoData.marital_status,\n            family_situation: personalInfoData.family_situation,\n            education: personalInfoData.education,\n            employment: personalInfoData.employment,\n            household_income: personalInfoData.household_income,\n            housing_situation: personalInfoData.housing_situation,\n        },\n        validate: values => {\n            dispatch(setPersonalInformationDetails(values))\n        }\n    });\n\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} md={6}>\n                <SubCard title=\"Personal Information\">\n                    <form noValidate autoComplete=\"off\">\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item xs={12} md={6}>\n                                <MaskedInput\n                                    mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                                    className='form-control'\n                                    label='Date of Birth'\n                                    guide={false}\n                                    value={formik.values.date_of_birth}\n                                    onChange={formik.handleChange}\n                                    id='date_of_birth'\n                                    name='date_of_birth'\n                                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props} />}\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    select\n                                    fullWidth\n                                    label=\"Gender\"\n                                    value={formik.values.gender}\n                                    selected={formik.values.gender}\n                                    id='gender'\n                                    name='gender'\n                                    onChange={formik.handleChange}\n                                >\n                                    {genders.map((option) => (\n                                        <MenuItem key={option.value} value={option.value}>\n                                            {option.label}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    select\n                                    fullWidth\n                                    label=\"Ethnic Background\"\n\n                                    value={formik.values.ethnic_background}\n                                    id='ethnic_background'\n                                    name='ethnic_background'\n                                    onChange={formik.handleChange}\n                                >\n                                    {ethnicBackgroundOptions.map((option) => (\n                                        <MenuItem key={option.value} value={option.value}>\n                                            {option.label}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n\n                                <Autocomplete\n                                    multiple\n                                    options={languageProficiencyOptions}\n                                    label='Language Proficiency'\n\n                                    value={formik.values.language_proficiency}\n                                    id='language_proficiency'\n                                    name='language_proficiency'\n                                    onChange={(e, value) => {\n                                        formik.setFieldValue('language_proficiency', value)\n                                    }}\n\n                                    getOptionLabel={(option) => option.label}\n                                    renderInput={(params) => <TextField {...params} label='Language Proficiency'/>}\n\n                                />\n\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    select\n                                    fullWidth\n                                    label=\"Current Marital Status\"\n\n                                    value={formik.values.marital_status}\n                                    id='marital_status'\n                                    name='marital_status'\n                                    onChange={formik.handleChange}\n                                >\n                                    {maritalStatusOptions.map((option) => (\n                                        <MenuItem key={option.value} value={option.value}>\n                                            {option.label}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    select\n                                    fullWidth\n                                    label=\"Current Family Situation\"\n\n                                    value={formik.values.family_situation}\n                                    id='family_situation'\n                                    name='family_situation'\n                                    onChange={formik.handleChange}\n                                >\n                                    {familySituationOptions.map((option) => (\n                                        <MenuItem key={option.value} value={option.value}>\n                                            {option.label}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <TextField\n                                    select\n                                    fullWidth\n                                    label=\"Housing Situation\"\n\n                                    value={formik.values.housing_situation}\n                                    id='housing_situation'\n                                    name='housing_situation'\n                                    onChange={formik.handleChange}\n                                >\n                                    {housingSituationOptions.map((option) => (\n                                        <MenuItem key={option.value} value={option.value}>\n                                            {option.label}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </SubCard>\n            </Grid>\n\n            <Grid item xs={12} md={6}>\n                <SubCard title=\"Professional Information\">\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={12} md={6}>\n                            <TextField\n                                select\n                                fullWidth\n                                label=\"Highest Level of Education\"\n\n                                value={formik.values.education}\n                                id='education'\n                                name='education'\n                                onChange={formik.handleChange}\n                            >\n                                {highestLevelOfEducationOptions.map((option) => (\n                                    <MenuItem key={option.value} value={option.value}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </Grid>\n                        <Grid item xs={12} md={6}>\n                            <TextField\n                                select\n                                fullWidth\n                                label=\"Employment\"\n\n                                value={formik.values.employment}\n                                id='employment'\n                                name='employment'\n                                onChange={formik.handleChange}\n                            >\n                                {employmentOptions.map((option) => (\n                                    <MenuItem key={option.value} value={option.value}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </Grid>\n                        <Grid item xs={12} md={6}>\n                            <TextField\n                                select\n                                fullWidth\n                                label=\"Annual Household Income (Before taxes and deductions)\"\n\n                                value={formik.values.household_income}\n                                id='household_income'\n                                name='household_income'\n                                onChange={formik.handleChange}\n                            >\n                                {annualHouseholdIncomeOptions.map((option) => (\n                                    <MenuItem key={option.value} value={option.value}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </Grid>\n                    </Grid>\n\n                </SubCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default PersonalInformation;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/clinical-information/emergency-room-visits.js",["1690","1691","1692","1693","1694","1695","1696","1697","1698","1699","1700","1701","1702","1703","1704","1705","1706"],"import React from 'react';\n\n// material-ui\nimport {makeStyles, useTheme} from '@material-ui/styles';\nimport {\n    CardContent,\n    Button,\n    Divider, FormControl,\n    FormControlLabel,\n    Grid,\n    IconButton,\n    MenuItem, Radio, RadioGroup, Slider,\n    Switch,\n    TextField,\n    Typography, Autocomplete\n} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport MainCard from 'ui-component/cards/MainCard';\nimport MaskedInput from \"react-text-mask\";\nimport {useFormik} from \"formik\";\nimport JWTContext from \"contexts/JWTContext\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport DatePicker from '@material-ui/lab/DatePicker';\nimport AdapterDateFns from '@material-ui/lab/AdapterDateFns';\nimport LocalizationProvider from '@material-ui/lab/LocalizationProvider';\nimport SubCard from 'ui-component/cards/SubCard';\n\nconst EmergencyRoomVisits = ({setClinicalInformationDetails}) => {\n    const clinicalInfoData = useSelector(state => state.client.clinicalInformation)\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        enableReinitialize: true,\n        initialValues: {\n            emergency_room_count_six_months: clinicalInfoData.emergency_room_count_six_months,\n            emergency_room_count_twelve_months: clinicalInfoData.emergency_room_count_twelve_months,\n            emergency_room_last_date: clinicalInfoData.emergency_room_last_date,\n            emergency_room_last_medical_reason: clinicalInfoData.emergency_room_last_medical_reason,\n        },\n        validate: values => {\n            dispatch(setClinicalInformationDetails(values))\n        }\n    });\n\n    return (\n        <MainCard>\n            <Grid container spacing={gridSpacing}>\n                <Grid item xs={12}>\n                    <Grid container spacing={gridSpacing}>\n\n                        <Grid item xs={12} md={12} lg={6}>\n                            <SubCard title='Number of emergency room visits (without hospital admission) during last 6 months'>\n                                <CardContent>\n                                    <Grid container spacing={gridSpacing}>\n                                        <Grid item xs={4} lg={12}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"emergency room visits in last 6 months\"\n                                                value={formik.values.emergency_room_count_six_months}\n                                                id='emergency_room_count_six_months'\n                                                name='emergency_room_count_six_months'\n                                                onChange={formik.handleChange}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </CardContent>\n                            </SubCard>\n                        </Grid>\n\n\n                        <Grid item xs={12} md={12} lg={6}>\n                            <SubCard title='Number of emergency room visits (without hospital admission) during last 12 months:'>\n                                <CardContent>\n                                    <Grid container spacing={gridSpacing}>\n                                        <Grid item xs={4} lg={12}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"emergency room visits in last 12 months\"\n                                                value={formik.values.emergency_room_count_twelve_months}\n                                                id='emergency_room_count_twelve_months'\n                                                name='emergency_room_count_twelve_months'\n                                                onChange={formik.handleChange}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </CardContent>\n                            </SubCard>\n                        </Grid>\n\n                        <Grid item xs={12} md={12} lg={6}>\n                            <SubCard title='Date of last emergency room visit'>\n                                <CardContent>\n                                    <Grid container spacing={gridSpacing}>\n                                        <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                            <DatePicker\n                                                renderInput={(props) => <TextField fullWidth {...props} />}\n                                                value={formik.values.emergency_room_last_date}\n                                                name='emergency_room_last_date'\n                                                id=\"emergency_room_last_date\"\n                                                onChange={(date) => {\n                                                    dispatch(setClinicalInformationDetails({\n                                                        emergency_room_last_date: date\n                                                    }))\n                                                }}\n                                            />\n                                        </LocalizationProvider>\n                                    </Grid>\n                                </CardContent>\n                            </SubCard>\n                        </Grid>\n\n                        <Grid item xs={12} md={12} lg={6}>\n                            <SubCard title='Medical reason for last emergency room visit'>\n                                <CardContent>\n                                    <Grid container spacing={gridSpacing}>\n                                        <Grid item xs={4} lg={12}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"Reason\"\n                                                value={formik.values.emergency_room_last_medical_reason}\n                                                id='emergency_room_last_medical_reason'\n                                                name='emergency_room_last_medical_reason'\n                                                onChange={formik.handleChange}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </CardContent>\n                            </SubCard>\n                        </Grid>\n\n                    </Grid>\n                </Grid>\n            </Grid>\n        </MainCard>\n    );\n};\n\nexport default EmergencyRoomVisits;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/clinical-information/clinical-information.js",["1707","1708","1709","1710","1711","1712","1713","1714","1715","1716","1717","1718","1719","1720","1721","1722","1723"],"import React from 'react';\n\n// material-ui\nimport {makeStyles, useTheme} from '@material-ui/styles';\nimport {\n    CardContent,\n    Button,\n    Divider, FormControl,\n    FormControlLabel,\n    Grid,\n    IconButton,\n    MenuItem, Radio, RadioGroup, Slider,\n    Switch,\n    TextField,\n    Typography, Autocomplete\n} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport MainCard from 'ui-component/cards/MainCard';\nimport MaskedInput from \"react-text-mask\";\nimport {useFormik} from \"formik\";\nimport JWTContext from \"contexts/JWTContext\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport DatePicker from '@material-ui/lab/DatePicker';\nimport AdapterDateFns from '@material-ui/lab/AdapterDateFns';\nimport LocalizationProvider from '@material-ui/lab/LocalizationProvider';\nimport SubCard from 'ui-component/cards/SubCard';\nimport {setAddDailyWorkLoadDate} from \"store/actions/caseManager/dailyWorkloadActions\";\n\nconst medicalDiagnosisList = [\n    {label: 'Type', id: 1, group: 'Cancer'},\n\n    {label: 'Cardiac-Congestive Heart Failure', id: 1, group: 'Cardiac'},\n    {label: 'Cardiac-Hypertension', id: 1, group: 'Cardiac'},\n    {label: 'Cardiac-Hypotension', id: 1, group: 'Cardiac'},\n    {label: 'Cardiac-Hypercholesterolemia', id: 1, group: 'Cardiac'},\n    {label: 'Cardiac-Other', id: 1, group: 'Cardiac'},\n\n    {label: 'Circulatory-Deep Venous Thrombosis', id: 1, group: 'Circulatory'},\n    {label: 'Circulatory-Other', id: 1, group: 'Circulatory'},\n\n    {label: 'Integumentary-Shingles', id: 1, group: 'Integumentary'},\n    {label: 'Integumentary-Rash', id: 1, group: 'Integumentary'},\n    {label: 'Integumentary-Other', id: 1, group: 'Integumentary'},\n\n    {label: 'Endocrine-Type II Diabetes Mellitus', id: 1, group: 'Endocrine'},\n    {label: 'Endocrine-Other', id: 1, group: 'Endocrine'},\n\n    {label: 'Eye-Macular Degeneration', id: 1, group: 'Eye'},\n    {label: 'Eye-Other', id: 1, group: 'Eye'},\n\n    {label: 'Specify', id: 1, group: 'Frailty'},\n\n    {label: 'Specify', id: 1, group: 'Gastro-Intestinal'},\n\n    {label: 'Musculoskeletal-Arthritis', id: 1, group: 'Musculoskeletal'},\n    {label: 'Musculoskeletal-Osteoporosis', id: 1, group: 'Musculoskeletal'},\n    {label: 'Musculoskeletal-Fractures', id: 1, group: 'Musculoskeletal'},\n    {label: 'Musculoskeletal-Paget’s Disease of Bone', id: 1, group: 'Musculoskeletal'},\n    {label: 'Musculoskeletal-Other', id: 1, group: 'Musculoskeletal'},\n\n    {label: 'Neurological-Dementia', id: 1, group: 'Neurological'},\n    {label: 'Neurological-Parkinson', id: 1, group: 'Neurological'},\n    {label: 'Neurological-Epilepsy', id: 1, group: 'Neurological'},\n    {label: 'Neurological-Multiple Sclerosis', id: 1, group: 'Neurological'},\n    {label: 'Neurological-Stroke', id: 1, group: 'Neurological'},\n    {label: 'Neurological-Motor Neuron Disease', id: 1, group: 'Neurological'},\n    {label: 'Neurological-Other', id: 1, group: 'Neurological'},\n\n    {label: 'Specify', id: 1, group: 'Obesity'},\n\n    {label: 'Specify', id: 1, group: 'Post-Surgical Care'},\n\n    {label: 'Genital-Urinary-Chronic Kidney Disease', id: 1, group: 'Genital-Urinary'},\n    {label: 'Genital-Urinary-Dialysis', id: 1, group: 'Genital-Urinary'},\n    {label: 'Genital-Urinary-Other', id: 1, group: 'Genital-Urinary'},\n\n    {label: 'Respiratory-Asthma', id: 1, group: 'Respiratory'},\n    {label: 'Respiratory-Chronic Obstructive Pulmonary Disease (COPD)', id: 1, group: 'Respiratory'},\n    {label: 'Respiratory-Chronic Bronchitis', id: 1, group: 'Respiratory'},\n    {label: 'Respiratory-Emphysema', id: 1, group: 'Respiratory'},\n    {label: 'Respiratory-Sleep Apnea', id: 1, group: 'Respiratory'},\n    {label: 'Respiratory-Pneumonia', id: 1, group: 'Respiratory'},\n    {label: 'Respiratory-Other', id: 1, group: 'Respiratory'},\n\n    {label: 'Type', id: 1, group: 'Substance Abuse'},\n]\n\nconst homeSupportServicesList = [\n    {label: 'Informal Support-Immediate Family', id: 1, group: 'Informal Support'},\n    {label: 'Informal Support-Extended Family', id: 1, group: 'Informal Support'},\n    {label: 'Informal Support-Friends or Neighbors', id: 1, group: 'Informal Support'},\n    {label: 'Informal Support-Other', id: 1, group: 'Informal Support'},\n\n    {label: 'Formal Support-Ability NB', id: 1, group: 'Formal Support'},\n    {label: 'Formal Support-Ambulatory Clinic (Outpatient)', id: 1, group: 'Formal Support'},\n    {label: 'Formal Support-Ambulance New Brunswick (ANB)', id: 1, group: 'Formal Support'},\n    {label: 'Formal Support-Community Health Centers', id: 1, group: 'Formal Support'},\n    {label: 'Formal Support-Specify: Nurse Practitioner or Family Physician', id: 1, group: 'Formal Support'},\n\n    {label: 'Formal Support-Department of Veteran Affairs', id: 1, group: 'Formal Support'},\n    {label: 'Formal Support-Emergency Department', id: 1, group: 'Formal Support'},\n    {label: 'Formal Support-Extra-Mural Program', id: 1, group: 'Formal Support'},\n    {label: 'Formal Support-Family Physician (Outside Community Health Centers)', id: 1, group: 'Formal Support'},\n    {label: 'Formal Support-First Nations', id: 1, group: 'Formal Support'},\n    {label: 'Formal Support-Homecare Agency', id: 1, group: 'Formal Support'},\n    {label: 'Formal Support-Hospital (Inpatient)', id: 1, group: 'Formal Support'},\n    {label: 'Formal Support-Nursing Home', id: 1, group: 'Formal Support'},\n    {label: 'Formal Support-Public Health Services', id: 1, group: 'Formal Support'},\n    {label: 'Formal Support-Residential Facility', id: 1, group: 'Formal Support'},\n    {label: 'Formal Support-Self-referral or Referral by Family Member', id: 1, group: 'Formal Support'},\n\n    {label: 'Formal Support-Social Development', id: 1, group: 'Formal Support-Social Development'},\n    {\n        label: 'Formal Support-Home Adaptations for Seniors Independence Program',\n        id: 1,\n        group: 'Formal Support-Social Development'\n    },\n    {label: 'Homeowner Repair Program', id: 1, group: 'Formal Support-Social Development'},\n    {label: 'Housing Program', id: 1, group: 'Formal Support-Social Development'},\n    {label: 'Long-Term Care Program', id: 1, group: 'Formal Support-Social Development'},\n    {label: 'Mobility and Adaptive Equipment Loan Program', id: 1, group: 'Formal Support-Social Development'},\n    {label: 'Social Assistance Program', id: 1, group: 'Formal Support-Social Development'},\n    {label: 'Other', id: 1, group: 'Formal Support-Social Development'},\n\n    {label: 'Specify', id: 1, group: 'Volunteer Organizations'},\n\n    {label: 'Specify', id: 1, group: 'Other'},\n]\n\n\nconst ClinicalInformation = ({setClinicalInformationDetails}) => {\n    const theme = useTheme();\n    const userAuthContext = React.useContext(JWTContext)\n    const clinicalInfoData = useSelector(state => state.client.clinicalInformation)\n    const dispatch = useDispatch()\n    const {\n        user: {\n            user_type_pk: clientUUID\n        }\n    } = userAuthContext;\n\n    const formik = useFormik({\n        enableReinitialize: true,\n        initialValues: {\n            completion_date: clinicalInfoData.completion_date,\n            medical_diagnosis: clinicalInfoData.medical_diagnosis,\n            home_support_services: clinicalInfoData.home_support_services,\n            nurse_practitioner: clinicalInfoData.nurse_practitioner,\n            family_physician: clinicalInfoData.family_physician,\n        },\n        validate: values => {\n            dispatch(setClinicalInformationDetails(values))\n        }\n    });\n    return (\n        <MainCard>\n            <Grid container spacing={gridSpacing}>\n                <Grid item xs={12}>\n\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={4} lg={12}>\n\n                            <SubCard>\n                                <CardContent>\n                                    <Grid container spacing={gridSpacing}>\n\n                                        <Grid item xs={4} lg={3}>\n                                            <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                                <DatePicker\n                                                    renderInput={(props) => <TextField fullWidth {...props} />}\n                                                    label=\"Date of Completion\"\n                                                    value={formik.values.daily_workload_date}\n                                                    name='completion_date'\n                                                    id=\"completion_date\"\n                                                    format=\"YYYY-MM-DD\"\n                                                    onChange={(date) => {\n                                                        dispatch(setClinicalInformationDetails({\n                                                            completion_date: date\n                                                        }))\n                                                    }}\n                                                />\n                                            </LocalizationProvider>\n                                        </Grid>\n                                    </Grid>\n                                </CardContent>\n                            </SubCard>\n                        </Grid>\n\n                        <Grid item xs={12} sm={12} lg={6} md={12}>\n                            <SubCard title='Medical Diagnosis and/or Client Health Concerns (select all that apply)'>\n                                <CardContent>\n                                    <Autocomplete\n                                        value={formik.values.medical_diagnosis}\n                                        multiple\n                                        options={medicalDiagnosisList}\n                                        getOptionLabel={(option) => option.label}\n                                        groupBy={(option) => String(option.group)}\n                                        renderInput={(params) => <TextField {...params}\n                                                                            label='Medical Diagnosis'/>}\n                                        name='medical_diagnosis'\n                                        id='medical_diagnosis'\n                                        sx={{\n                                            '& .MuiOutlinedInput-root': {\n                                                pr: '30px !important'\n                                            }\n                                        }}\n                                        onChange={(e, value) => {\n                                            formik.setFieldValue('medical_diagnosis', value)\n                                        }}\n                                    />\n                                </CardContent>\n                            </SubCard>\n                        </Grid>\n\n\n                        <Grid item xs={12} sm={12} lg={6} md={12}>\n                            <SubCard title='Current Home Support Services (select all that apply)'>\n                                <CardContent>\n                                    <Autocomplete\n                                        value={formik.values.home_support_services}\n                                        multiple\n                                        options={homeSupportServicesList}\n                                        getOptionLabel={(option) => option.label}\n                                        groupBy={(option) => String(option.group)}\n                                        renderInput={(params) => <TextField {...params}\n                                                                            label='Home Support Services'/>}\n                                        name='home_support_services'\n                                        id='home_support_services'\n                                        sx={{\n                                            '& .MuiOutlinedInput-root': {\n                                                pr: '30px !important'\n                                            }\n                                        }}\n                                        onChange={(e, value) => {\n                                            formik.setFieldValue('home_support_services', value)\n                                        }}\n                                    />\n                                </CardContent>\n                            </SubCard>\n                        </Grid>\n\n\n                        <Grid item xs={12} md={12} lg={12}>\n                            <SubCard >\n                                <CardContent>\n\n                                    <Grid container spacing={gridSpacing}>\n                                        <Grid item xs={4} lg={6}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"Name of your Family Physician\"\n                                                value={formik.values.family_physician}\n                                                id='family_physician'\n                                                name='family_physician'\n                                                onChange={formik.handleChange}\n                                            />\n                                        </Grid>\n\n                                        <Grid item xs={4} lg={6}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"Name of your Nurse Practitioner\"\n                                                value={formik.values.nurse_practitioner}\n                                                id='nurse_practitioner'\n                                                name='nurse_practitioner'\n                                                onChange={formik.handleChange}\n                                            />\n                                        </Grid>\n                                    </Grid>\n\n\n                                </CardContent>\n                            </SubCard>\n                        </Grid>\n\n                    </Grid>\n                </Grid>\n            </Grid>\n        </MainCard>\n    );\n};\n\nexport default ClinicalInformation;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/clinical-information/hospitalizations.js",["1724","1725","1726","1727","1728","1729","1730","1731","1732","1733","1734","1735","1736","1737","1738"],"import React from 'react';\n\n// material-ui\nimport {makeStyles, useTheme} from '@material-ui/styles';\nimport {\n    CardContent,\n    Button,\n    Divider, FormControl,\n    FormControlLabel,\n    Grid,\n    IconButton,\n    MenuItem, Radio, RadioGroup, Slider,\n    Switch,\n    TextField,\n    Typography, Autocomplete\n} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport MainCard from 'ui-component/cards/MainCard';\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport SubCard from 'ui-component/cards/SubCard';\n\n\n\nconst Hospitalizations = ({setClinicalInformationDetails}) => {\n    const clinicalInfoData = useSelector(state => state.client.clinicalInformation)\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        enableReinitialize: true,\n        initialValues: {\n            hospitalizations_six_months: clinicalInfoData.hospitalizations_six_months,\n            hospitalizations_twelve_months: clinicalInfoData.hospitalizations_twelve_months,\n            hospitalization_last_date: clinicalInfoData.hospitalization_last_date,\n            hospitalization_last_stay_length: clinicalInfoData.hospitalization_last_stay_length,\n            hospitalization_last_medical_reason: clinicalInfoData.hospitalization_last_medical_reason,\n        },\n        validate: values => {\n            dispatch(setClinicalInformationDetails(values))\n        }\n    });\n\n    return (\n        <MainCard>\n            <Grid container spacing={gridSpacing}>\n                <Grid item xs={12}>\n                    <Grid container spacing={gridSpacing}>\n\n                        <Grid item xs={12} md={12} lg={6}>\n                            <SubCard title='Number of hospitalizations during last 6 months'>\n                                <CardContent>\n                                    <Grid container spacing={gridSpacing}>\n                                        <Grid item xs={4} lg={12}>\n                                            <TextField\n                                                fullWidth\n                                                value={formik.values.hospitalizations_six_months}\n                                                id='hospitalizations_six_months'\n                                                name='hospitalizations_six_months'\n                                                onChange={formik.handleChange}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </CardContent>\n                            </SubCard>\n                        </Grid>\n\n\n                        <Grid item xs={12} md={12} lg={6}>\n                            <SubCard title='Number of hospitalizations during last 12 months'>\n                                <CardContent>\n                                    <Grid container spacing={gridSpacing}>\n                                        <Grid item xs={4} lg={12}>\n                                            <TextField\n                                                fullWidth\n                                                value={formik.values.hospitalizations_twelve_months}\n                                                id='hospitalizations_twelve_months'\n                                                name='hospitalizations_twelve_months'\n                                                onChange={formik.handleChange}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </CardContent>\n                            </SubCard>\n                        </Grid>\n\n                        <Grid item xs={12} md={12} lg={6}>\n                            <SubCard title='Date of last hospitalization'>\n                                <CardContent>\n                                    <Grid container spacing={gridSpacing}>\n                                        <Grid item xs={4} lg={12}>\n                                            <TextField\n                                                fullWidth\n                                                value={formik.values.hospitalization_last_date}\n                                                id='hospitalization_last_date'\n                                                name='hospitalization_last_date'\n                                                onChange={formik.handleChange}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </CardContent>\n                            </SubCard>\n                        </Grid>\n\n                        <Grid item xs={12} md={12} lg={6}>\n                            <SubCard title='Length of stay of last hospitalization'>\n                                <CardContent>\n                                    <Grid container spacing={gridSpacing}>\n                                        <Grid item xs={4} lg={12}>\n                                            <TextField\n                                                fullWidth\n                                                value={formik.values.hospitalization_last_stay_length}\n                                                id='hospitalization_last_stay_length'\n                                                name='hospitalization_last_stay_length'\n                                                onChange={formik.handleChange}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </CardContent>\n                            </SubCard>\n                        </Grid>\n\n                        <Grid item xs={12} md={12} lg={6}>\n                            <SubCard title='Medical reason for last hospitalization'>\n                                <CardContent>\n                                    <Grid container spacing={gridSpacing}>\n                                        <Grid item xs={4} lg={12}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"Hospitalizations in last 12 months\"\n                                                value={formik.values.hospitalization_last_medical_reason}\n                                                id='hospitalization_last_medical_reason'\n                                                name='hospitalization_last_medical_reason'\n                                                onChange={formik.handleChange}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </CardContent>\n                            </SubCard>\n                        </Grid>\n\n                    </Grid>\n                </Grid>\n            </Grid>\n        </MainCard>\n    );\n};\n\nexport default Hospitalizations;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/clinical-information/ambulance-use.js",["1739","1740","1741","1742","1743","1744","1745","1746","1747","1748","1749","1750","1751","1752","1753","1754","1755","1756","1757","1758"],"import React from 'react';\n\n// material-ui\nimport {makeStyles, useTheme} from '@material-ui/styles';\nimport {\n    CardContent,\n    Button,\n    Divider, FormControl,\n    FormControlLabel,\n    Grid,\n    IconButton,\n    MenuItem, Radio, RadioGroup, Slider,\n    Switch,\n    TextField,\n    Typography, Autocomplete\n} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport MainCard from 'ui-component/cards/MainCard';\nimport MaskedInput from \"react-text-mask\";\nimport {useFormik} from \"formik\";\nimport JWTContext from \"contexts/JWTContext\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport DatePicker from '@material-ui/lab/DatePicker';\nimport AdapterDateFns from '@material-ui/lab/AdapterDateFns';\nimport LocalizationProvider from '@material-ui/lab/LocalizationProvider';\nimport SubCard from 'ui-component/cards/SubCard';\n\n\n\nconst AmbulanceUse = ({setClinicalInformationDetails}) => {\n    const theme = useTheme();\n    const userAuthContext = React.useContext(JWTContext)\n    const clinicalInfoData = useSelector(state => state.client.clinicalInformation)\n    const dispatch = useDispatch()\n    const {\n        user: {\n            user_type_pk: clientUUID\n        }\n    } = userAuthContext;\n\n    const formik = useFormik({\n        enableReinitialize: true,\n        initialValues: {\n            ambulance_use_six_months: clinicalInfoData.ambulance_use_six_months,\n            ambulance_use_medical_reason_six_months: clinicalInfoData.ambulance_use_medical_reason_six_months,\n            ambulance_use_twelve_months: clinicalInfoData.ambulance_use_twelve_months,\n            ambulance_use_medical_reason_twelve_months: clinicalInfoData.ambulance_use_medical_reason_twelve_months,\n        },\n        validate: values => {\n            dispatch(setClinicalInformationDetails(values))\n        }\n    });\n\n    return (\n        <MainCard>\n            <Grid container spacing={gridSpacing}>\n                <Grid item xs={12}>\n                    <Grid container spacing={gridSpacing}>\n\n                        <Grid item xs={12} md={12} lg={6}>\n                            <SubCard title='Number of travels by ambulance during last 6 months:'>\n                                <CardContent>\n                                    <Grid container spacing={gridSpacing}>\n                                        <Grid item xs={4} lg={12}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"Ambulance use in last 6 months\"\n                                                value={formik.values.ambulance_use_six_months}\n                                                id='ambulance_use_six_months'\n                                                name='ambulance_use_six_months'\n                                                onChange={formik.handleChange}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </CardContent>\n                            </SubCard>\n                        </Grid>\n\n\n                        <Grid item xs={12} md={12} lg={6}>\n                            <SubCard title='Medical reason for use of ambulance (last 6 months)'>\n                                <CardContent>\n                                    <Grid container spacing={gridSpacing}>\n                                        <Grid item xs={4} lg={12}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"Reason\"\n                                                value={formik.values.ambulance_use_medical_reason_six_months}\n                                                id='ambulance_use_medical_reason_six_months'\n                                                name='ambulance_use_medical_reason_six_months'\n                                                onChange={formik.handleChange}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </CardContent>\n                            </SubCard>\n                        </Grid>\n\n                        <Grid item xs={12} md={12} lg={6}>\n                            <SubCard title='Number of travels by ambulance during last 12 months'>\n                                <CardContent>\n                                    <Grid container spacing={gridSpacing}>\n                                        <Grid item xs={4} lg={12}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"Ambulance use in last 12 months\"\n                                                value={formik.values.ambulance_use_twelve_months}\n                                                id='ambulance_use_twelve_months'\n                                                name='ambulance_use_twelve_months'\n                                                onChange={formik.handleChange}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </CardContent>\n                            </SubCard>\n                        </Grid>\n\n                        <Grid item xs={12} md={12} lg={6}>\n                            <SubCard title='Medical reason for use of ambulance (last 12 months)'>\n                                <CardContent>\n                                    <Grid container spacing={gridSpacing}>\n                                        <Grid item xs={4} lg={12}>\n                                            <TextField\n                                                fullWidth\n                                                label=\"Reason\"\n                                                value={formik.values.ambulance_use_medical_reason_twelve_months}\n                                                id='ambulance_use_medical_reason_twelve_months'\n                                                name='ambulance_use_medical_reason_twelve_months'\n                                                onChange={formik.handleChange}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </CardContent>\n                            </SubCard>\n                        </Grid>\n\n                    </Grid>\n                </Grid>\n            </Grid>\n        </MainCard>\n    );\n};\n\nexport default AmbulanceUse;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/clinical-information/medication.js",["1759","1760","1761","1762","1763"],"import PropTypes from 'prop-types';\nimport * as React from 'react';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {\n    alpha,\n    Checkbox,\n    IconButton,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TablePagination,\n    TableSortLabel,\n    TableRow,\n    Toolbar,\n    Tooltip,\n    Typography, Grid, CardContent, TextField, Fab\n} from '@material-ui/core';\nimport {visuallyHidden} from '@material-ui/utils';\n\n// assets\nimport MainCard from 'ui-component/cards/MainCard';\nimport SecondaryAction from 'ui-component/cards/CardSecondaryAction';\n\n// project imports\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport {gridSpacing} from \"store/constant\";\nimport SubCard from \"ui-component/cards/SubCard\";\n\nimport AddIcon from '@material-ui/icons/AddTwoTone';\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport AddMedicationDialog from \"./add-medication\";\n\n// table filter\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\n// table header\nconst headCells = [\n    {\n        id: 'name',\n        numeric: false,\n        disablePadding: true,\n        label: 'Medication Name'\n    },\n    {\n        id: 'calories',\n        numeric: true,\n        disablePadding: false,\n        label: 'Start Date'\n    },\n    {\n        id: 'fat',\n        numeric: true,\n        disablePadding: false,\n        label: 'End Date'\n    },\n    {\n        id: 'carbs',\n        numeric: true,\n        disablePadding: false,\n        label: 'Dosage'\n    },\n    {\n        id: 'protein',\n        numeric: true,\n        disablePadding: false,\n        label: 'Intake Frequency'\n    }\n];\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        height: 400\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2)\n    },\n    table: {\n        minWidth: 750\n    },\n    sortSpan: visuallyHidden\n}));\n\n// ===========================|| TABLE - HEADER ||=========================== //\n\nfunction EnhancedTableHead(props) {\n    const {classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort} = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\" sx={{pl: 3}}>\n                    <Checkbox\n                        color=\"primary\"\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\n                        checked={rowCount > 0 && numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{\n                            'aria-label': 'select all desserts'\n                        }}\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span\n                                    className={classes.sortSpan}>{order === 'desc' ? 'sorted descending' : 'sorted ascending'}</span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1)\n    },\n    highlight: {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity)\n    },\n    title: {\n        flex: '1 1 100%'\n    }\n}));\n\n// ===========================|| TABLE - HEADER TOOLBAR ||=========================== //\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const {numSelected} = props;\n\n    return (\n        <Toolbar className={classes.root}>\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n                    {numSelected} selected\n                </Typography>\n            ) : (\n                <></>\n            )}\n\n            {numSelected > 0 ? (\n                <Tooltip title=\"Delete\">\n                    <IconButton>\n                        <DeleteIcon/>\n                    </IconButton>\n                </Tooltip>\n            ) : (\n                <></>\n            )}\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired\n};\n\n// ===========================|| TABLE - DATA TABLE ||=========================== //\n\nexport default function Medication({setClinicalInformationDetails}) {\n    const classes = useStyles();\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [dense] = React.useState(false);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [addMedicationOpen, setAddMedicationOpen] = React.useState(false);\n\n    const handleAddMedicationOpen = () => {\n        setAddMedicationOpen(true);\n    };\n\n    const handleAddMedicationClose = () => {\n        setAddMedicationOpen(false);\n    };\n\n    // Redux\n    const clinicalInfoData = useSelector(state => state.client.clinicalInformation)\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        enableReinitialize: true,\n        initialValues: {\n            past_medical_history: clinicalInfoData.past_medical_history,\n            current_medication: clinicalInfoData.current_medication,\n        },\n        validate: values => {\n            dispatch(setClinicalInformationDetails(values))\n        }\n    });\n\n    const handleMedicationAddClick = (event) => {\n        handleAddMedicationOpen()\n    }\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelectedId = formik.values.current_medication.map((n) => n.name);\n            setSelected(newSelectedId);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, name) => {\n        const selectedIndex = selected.indexOf(name);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, name);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n\n    // Avoid a layout jump when reaching the last page with empty rows.\n    const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - formik.values.current_medication.length) : 0;\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} md={12} lg={12}>\n                <SubCard title='Past Medical History'>\n                    <CardContent>\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item xs={4} lg={12}>\n                                <TextField\n                                    onChange={formik.handleChange}\n                                    value={formik.values.past_medical_history}\n                                    fullWidth\n                                    label=\"Provide details about your past medical history\"\n                                    id='past_medical_history'\n                                    name='past_medical_history'\n                                />\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </SubCard>\n            </Grid>\n\n            <Grid item xs={12} md={12} lg={12}>\n\n                <AddMedicationDialog setClinicalInformationDetails={setClinicalInformationDetails}\n                                     clinicalInfoData={clinicalInfoData} handleClose={handleAddMedicationClose}\n                                     open={addMedicationOpen}/>\n\n                <SubCard\n                    content={false}\n                    title=\"Current Medication\"\n                    secondary={\n                        <Tooltip title=\"Add Medication\">\n                            <Fab\n                                color=\"primary\"\n                                size=\"small\"\n                                onClick={handleMedicationAddClick}\n                                sx={{boxShadow: 'none', ml: 1, width: '32px', height: '32px', minHeight: '32px'}}\n                            >\n                                <AddIcon fontSize=\"small\"/>\n                            </Fab>\n                        </Tooltip>\n                    }\n                >\n\n                    <Grid container spacing={gridSpacing}>\n\n                        <Grid item xs={12} md={12} lg={12}>\n                            <Paper className={classes.paper}>\n                                <EnhancedTableToolbar numSelected={selected.length}/>\n\n                                {/* table */}\n                                <TableContainer>\n                                    <Table className={classes.table}\n                                           size={dense ? 'small' : 'medium'}>\n                                        <EnhancedTableHead\n                                            classes={classes}\n                                            numSelected={selected.length}\n                                            order={order}\n                                            orderBy={orderBy}\n                                            onSelectAllClick={handleSelectAllClick}\n                                            onRequestSort={handleRequestSort}\n                                            rowCount={formik.values.current_medication.length}\n                                        />\n                                        <TableBody>\n                                            {stableSort(formik.values.current_medication, getComparator(order, orderBy))\n                                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                                .map((row, index) => {\n                                                    const isItemSelected = isSelected(row.name);\n                                                    const labelId = `enhanced-table-checkbox-${index}`;\n\n                                                    return (\n                                                        <TableRow\n                                                            hover\n                                                            onClick={(event) => handleClick(event, row.name)}\n                                                            role=\"checkbox\"\n                                                            aria-checked={isItemSelected}\n                                                            tabIndex={-1}\n                                                            key={row.medication_name}\n                                                            selected={isItemSelected}\n                                                        >\n                                                            <TableCell padding=\"checkbox\" sx={{pl: 3}}>\n                                                                <Checkbox\n                                                                    color=\"primary\"\n                                                                    checked={isItemSelected}\n                                                                    inputProps={{\n                                                                        'aria-labelledby': labelId\n                                                                    }}\n                                                                />\n                                                            </TableCell>\n                                                            <TableCell component=\"th\" id={labelId} scope=\"row\"\n                                                                       padding=\"none\">\n                                                                {row.medication_name}\n                                                            </TableCell>\n                                                            <TableCell\n                                                                align=\"right\">{row.medication_start_date}</TableCell>\n                                                            <TableCell\n                                                                align=\"right\">{row.medication_end_date}</TableCell>\n                                                            <TableCell align=\"right\">{row.medication_dosage}</TableCell>\n                                                            <TableCell\n                                                                align=\"right\">{row.medication_frequency}</TableCell>\n                                                        </TableRow>\n                                                    );\n                                                })}\n                                            {emptyRows > 0 && (\n                                                <TableRow\n                                                    style={{\n                                                        height: (dense ? 33 : 53) * emptyRows\n                                                    }}\n                                                >\n                                                    <TableCell colSpan={6}/>\n                                                </TableRow>\n                                            )}\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n\n                                {/* table data */}\n                                <TablePagination\n                                    rowsPerPageOptions={[5, 10, 25]}\n                                    component=\"div\"\n                                    count={formik.values.current_medication.length}\n                                    rowsPerPage={rowsPerPage}\n                                    page={page}\n                                    onPageChange={handleChangePage}\n                                    onRowsPerPageChange={handleChangeRowsPerPage}\n                                />\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </SubCard>\n            </Grid>\n        </Grid>\n    );\n}\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/add/forms/client.js",["1764","1765","1766","1767","1768","1769","1770","1771","1772","1773","1774","1775","1776","1777","1778","1779","1780"],"import React, {useEffect, useState} from 'react';\n\n// material-ui\nimport {\n    CardContent,\n    FormControl,\n    FormControlLabel,\n    Grid,\n    MenuItem,\n    TextField,\n    Radio,\n    RadioGroup,\n    Autocomplete,\n    FormHelperText,\n    FormGroup,\n    Checkbox,\n    Typography,\n    Chip,\n    List,\n    ListItemIcon,\n    ListItemText,\n    ListItemSecondaryAction, Divider\n} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useFormik} from \"formik\";\nimport {\n    setAssessmentCaseManagerDetail,\n    setAssessmentClientDetail,\n    setAssessmentClientStatus\n} from \"store/actions/caseManager/clientAssessmentActions\";\nimport commonApi from \"store/api-calls/common\";\nimport {setSearchUsersList} from \"store/actions/messagingActions\";\nimport MainCard from 'ui-component/cards/MainCard';\nimport InputLabel from 'ui-component/extended/Form/InputLabel';\n\nimport ListItemButton from \"@material-ui/core/ListItemButton\";\nimport MailTwoToneIcon from \"@material-ui/icons/MailTwoTone\";\nimport PhonelinkRingTwoToneIcon from \"@material-ui/icons/PhonelinkRingTwoTone\";\nimport PinDropTwoToneIcon from \"@material-ui/icons/PinDropTwoTone\";\nimport JWTContext from \"contexts/JWTContext\";\nimport {SNACKBAR_OPEN} from \"store/actionTypes\";\n\nconst ClientSelect = () => {\n    const dispatch = useDispatch()\n    const [clientSelectValues, setClientSelectValues] = React.useState([]);\n    const [clientListOpen, setClientListOpen] = React.useState(false);\n    const [selectedClient, setSelectedClient] = React.useState('');\n    const [isRetrieveMode, setIsRetrieveMode] = useState(false);\n    const [title, setTitle] = useState(\"Select Client for Assessment\");\n    const {\n        user: {\n            user_type_pk: caseManagerUUID\n        }\n    } = React.useContext(JWTContext);\n    useEffect(() => {\n        dispatch(setAssessmentCaseManagerDetail(caseManagerUUID))\n    }, []);\n\n    // Redux data\n    const clientAssessmentStore = useSelector(state => state.caseManager.clientAssessment)\n    const clientAssessmentTypeStatus = clientAssessmentStore.add.assessment.assessment_status\n    const formik = useFormik({\n        initialValues: {\n            assessment_status: clientAssessmentTypeStatus\n        },\n        validate: values => {\n            // eslint-disable-next-line camelcase\n            const {assessment_status} = values;\n            dispatch(setAssessmentClientStatus(assessment_status));\n            dispatch(setAssessmentCaseManagerDetail(caseManagerUUID))\n        }\n    });\n\n\n    // Render Functions\n    const prepareClientList = (clientList) => {\n        if (clientList && clientList.length > 0) {\n            const clientListOptions = clientList.map((client, index) => (\n                {label: client.fullname, id: client.user_type_pk}\n            ))\n            return clientListOptions\n        }\n        return []\n    }\n\n    const handleClientKeyInput = async (event) => {\n        const searchValue = event.target.value;\n        if (searchValue.length > 0) {\n            setClientListOpen(true)\n            const response = await commonApi.searchClient(searchValue);\n            const clientListOptions = prepareClientList(response)\n            setClientSelectValues(clientListOptions)\n        } else {\n            setClientListOpen(false)\n            setClientSelectValues([])\n        }\n    }\n\n    const displayClientSelectAutoComplete = () => {\n        if (!isRetrieveMode) {\n            return (<Grid item xs={12}>\n                <Autocomplete\n                    open={clientListOpen}\n                    disablePortal\n                    options={clientSelectValues}\n                    name='referral_source'\n                    id='referral_source'\n                    noOptionsText='No client found with the provided value.'\n                    onKeyUp={handleClientKeyInput}\n                    onBlur={(event) => setClientListOpen(false)}\n                    onChange={(event, client) => {\n                        if (client) {\n                            const {id: clientUUID} = client;\n                            dispatch(setAssessmentClientDetail(clientUUID));\n                            setClientListOpen(false);\n                        }\n                    }}\n                    value={formik.values.client}\n                    renderInput={(params) => <TextField {...params} />}\n                />\n            </Grid>)\n        }\n        return <></>\n    }\n\n    const displaySelectedClientDetail = () => (<Grid item xs={12}>\n        <Grid item lg={12} xs={12} sm={12} md={12}>\n            <SubCard\n                title={\n                    <Grid container spacing={2} alignItems=\"center\">\n\n                        <Grid item xs zeroMinWidth>\n                            <Typography align=\"left\" variant=\"subtitle1\">\n                                Client Name Placeholder\n                            </Typography>\n                            <Typography align=\"left\" variant=\"subtitle2\">\n                                UI/UX Designer\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                }\n            >\n                <List component=\"nav\" aria-label=\"main mailbox folders\">\n                    <ListItemButton>\n                        <ListItemIcon>\n                            <MailTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                        </ListItemIcon>\n                        <ListItemText primary={<Typography variant=\"subtitle1\">Email</Typography>}/>\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"subtitle2\" align=\"right\">\n                                Client Email Placeholder\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItemButton>\n                    <Divider/>\n                    <ListItemButton>\n                        <ListItemIcon>\n                            <PhonelinkRingTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                        </ListItemIcon>\n                        <ListItemText primary={<Typography variant=\"subtitle1\">Phone</Typography>}/>\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"subtitle2\" align=\"right\">\n                                (+99) 9999 999 999\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItemButton>\n                    <Divider/>\n                    <ListItemButton>\n                        <ListItemIcon>\n                            <PinDropTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                        </ListItemIcon>\n                        <ListItemText\n                            primary={<Typography variant=\"subtitle1\">Location</Typography>}/>\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"subtitle2\" align=\"right\">\n                                Client location Placeholder\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItemButton>\n                </List>\n            </SubCard>\n        </Grid>\n\n    </Grid>)\n\n    const displayAssessmentTypeRadioOptions = () => (<Grid container spacing={2} alignItems=\"center\">\n        <Grid item xs={12} md={12}>\n            <SubCard title='Client Status'>\n                <Grid container spacing={12}>\n                    <Grid item xs={12} sm={12} lg={12} md={12}>\n                        <FormControl>\n                            <RadioGroup\n                                row\n                                aria-label='client-status'\n                                name='assessment_status'\n                                id=\"assessment_status\"\n                                onChange={formik.handleChange}\n                                value={formik.values.assessment_status}\n                            >\n                                <FormControlLabel value='NEW_CASE_MANAGEMENT_CLIENT'\n                                                  control={<Radio/>}\n                                                  label='New Case Management Client'/>\n                                <FormControlLabel value='EXISTING_CASE_MANAGEMENT_CLIENT'\n                                                  control={<Radio/>}\n                                                  label='Existing Case Management Client'/>\n                            </RadioGroup>\n                        </FormControl>\n                    </Grid>\n                </Grid>\n            </SubCard>\n        </Grid>\n\n\n    </Grid>)\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} lg={7}>\n                <SubCard title={title}>\n                    <Grid container spacing={2} alignItems=\"center\">\n                        {displayClientSelectAutoComplete()}\n                        {displaySelectedClientDetail()}\n                    </Grid>\n                </SubCard>\n            </Grid>\n\n            <Grid item xs={12} lg={5}>\n                {displayAssessmentTypeRadioOptions()}\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ClientSelect;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/add/forms/conditional-display/existing-case-client.js",["1781","1782","1783","1784","1785","1786","1787"],"import React from 'react';\n\n// material-ui\nimport {CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport ProviderSpecificForms from 'views/roles/common/provider-specific-forms';\nimport AssessmentFormsCP from 'views/roles/common/assessment-forms-cp';\nimport MaskedInput from 'react-text-mask';\n\nimport DatePicker from '@material-ui/lab/DatePicker';\nimport AdapterDateFns from '@material-ui/lab/AdapterDateFns';\nimport LocalizationProvider from '@material-ui/lab/LocalizationProvider';\n\n// Redux\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    setNewEMAssessmentDetails,\n    setNewEMProviderSpecificFormUUID,\n    setNewEMGeneralAssessmentFormUUID\n} from \"store/actions/caseManager/clientAssessmentActions\";\n\nconst ExistingCaseClient = () => {\n    const assessmentData = useSelector(state => state.caseManager.clientAssessment.add.assessment_type_data)\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            date: assessmentData.date,\n            total_time: assessmentData.total_time,\n            mode_of_assessment: assessmentData.mode_of_assessment\n        },\n        validate: values => {\n            dispatch(setNewEMAssessmentDetails(values));\n        }\n    });\n\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} sm={12} lg={4} md={6}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                    <DatePicker\n                        renderInput={(props) => <TextField fullWidth {...props} />}\n                        label=\"Date & Time\"\n                        value={formik.values.daily_workload_date}\n                        name='daily_workload_date'\n                        id=\"daily_workload_date\"\n                        format=\"YYYY-MM-DD\"\n                    />\n                </LocalizationProvider>\n            </Grid>\n\n            <Grid item xs={12} sm={12} lg={4} md={8}>\n                <MaskedInput\n                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                    className=\"form-control\"\n                    label=\"Arrival time at Client's home\"\n                    guide={false}\n\n                    onChange={formik.handleChange}\n                    name='total_time'\n                    id=\"total_time\"\n                    value={formik.values.total_time}\n\n                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props} defaultValue=\"\"/>}\n                />\n            </Grid>\n\n\n            <Grid item xs={12} sm={12} lg={4} md={8}>\n                <MaskedInput\n                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                    className=\"form-control\"\n                    label=\"Departure time from Client's home\"\n                    guide={false}\n\n                    onChange={formik.handleChange}\n                    name='total_time'\n                    id=\"total_time\"\n                    value={formik.values.total_time}\n\n                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props} defaultValue=\"\"/>}\n                />\n            </Grid>\n\n\n            <Grid item xs={12} lg={12} sm={12}>\n                <AssessmentFormsCP documentType='TYPE_CASE_MANAGER_ASSESSMENT'\n                                   generalAssessmentFormAction={setNewEMGeneralAssessmentFormUUID}/>\n            </Grid>\n\n        </Grid>\n    );\n};\n\nexport default ExistingCaseClient;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/add/forms/conditional-display/home-safety.js",["1788","1789","1790","1791","1792","1793","1794","1795","1796","1797","1798","1799","1800","1801","1802","1803"],"import React from 'react';\n\n// material-ui\nimport {makeStyles, useTheme} from '@material-ui/styles';\nimport {\n    CardContent,\n    Button,\n    Divider, FormControl,\n    FormControlLabel,\n    Grid,\n    IconButton,\n    MenuItem, Radio, RadioGroup, Slider,\n    Switch,\n    TextField,\n    Typography\n} from '@material-ui/core';\n\n// project imports\nimport SubCard from 'ui-component/cards/SubCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport {gridSpacing} from 'store/constant';\n\n// assets\nimport FaceTwoToneIcon from \"@material-ui/icons/FaceTwoTone\";\nimport DomainTwoToneIcon from \"@material-ui/icons/DomainTwoTone\";\nimport MonetizationOnTwoToneIcon from \"@material-ui/icons/MonetizationOnTwoTone\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport Accordion from 'ui-component/extended/Accordion';\nimport MainCard from \"ui-component/cards/MainCard\";\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    deviceName: {\n        '& >span': {\n            fontSize: '90%',\n            fontWeight: '400'\n        }\n    },\n    deviceState: {\n        display: 'inline-flex',\n        alignItems: 'center',\n        '& >svg': {\n            width: '0.7em',\n            height: '0.7em',\n            marginRight: '5px'\n        }\n    },\n    textActive: {\n        color: theme.palette.success.main\n    },\n    textMuted: {\n        color: theme.palette.grey[400]\n    }\n}));\n\n\nconst HomeSafetyAssessment = () => {\n    const theme = useTheme();\n    const [valueColor, setValueColor] = React.useState('default');\n    const assessmentQuestions = {\n        \"outside\": {\n            \"title\": \"Outside\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Are the paths around the property in good repair?\",\n                    \"radio_group_name\": \"outside-paths-around-property\"\n                },\n                {\n                    \"question_text\": \"Are the walkways clear of clutter? (i.e., ice and snow in Winter)\",\n                    \"radio_group_name\": \"outside-walkways-clear-clutter\"\n                },\n                {\n                    \"question_text\": \"Are the paths and entrances well lit?\",\n                    \"radio_group_name\": \"outside-paths-entrances-well-lit\"\n                },\n                {\n                    \"question_text\": \"Are the stairs leading to the property in good repair?\",\n                    \"radio_group_name\": \"outside-paths-stairs-good-repair\"\n                },\n                {\n                    \"question_text\": \"Are the edges of the outside steps slip-resistant?\",\n                    \"radio_group_name\": \"outside-paths-edges-outside-slip-resistant\"\n                },\n                {\n                    \"question_text\": \"Are you able to see the edges of the outside steps clearly?\",\n                    \"radio_group_name\": \"outside-paths-edges-outside-seen-clearly\"\n                },\n                {\n                    \"question_text\": \"Is the doorbell functioning?\",\n                    \"radio_group_name\": \"outside-paths-doorbell-functioning\"\n                }\n            ]\n        },\n        \"garage\": {\n            \"title\": \"Garage\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Can you easily enter or exit the vehicle in the garage?\",\n                    \"radio_group_name\": \"garage-easily-enter-exit-vehicle\"\n                },\n                {\n                    \"question_text\": \"Can you safely manoeuvre in your garage?\",\n                    \"radio_group_name\": \"garage-safely-manoeuvre\"\n                },\n                {\n                    \"question_text\": \"Is the garage well lit?\",\n                    \"radio_group_name\": \"garage-well-lit\"\n                },\n            ]\n        },\n        \"indoor-stairs\": {\n            \"title\": \"Indoor Stairs\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Are the stairs build in safe way?\",\n                    \"radio_group_name\": \"indoor-stairs-build-safe-way\"\n                }, {\n                    \"question_text\": \"Do all stairs have a sturdy handrail?\",\n                    \"radio_group_name\": \"indoor-stairs-sturdy-handrail\"\n                }, {\n                    \"question_text\": \"Are you able to see the edges of the steps clearly?\",\n                    \"radio_group_name\": \"indoor-stairs-edges-steps-seen-clearly\"\n                }, {\n                    \"question_text\": \"Are the stairs visible when the light is turned on?\",\n                    \"radio_group_name\": \"indoor-stairs-visible-light-turned-on\"\n                },\n            ]\n        },\n        \"floors-hallways\": {\n            \"title\": \"Floors and Hallways\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Are the floors and the hallways well lit?\",\n                    \"radio_group_name\": \"floors-hallways-well-lit\"\n                }, {\n                    \"question_text\": \"Do the carpets and mats lie flat without wrinkles or curled edges?\",\n                    \"radio_group_name\": \"floors-hallways-carpets-mats-wrinkles\"\n                }, {\n                    \"question_text\": \"Are the floors clear of clutter?\",\n                    \"radio_group_name\": \"floors-hallways-clear-of-clutter\"\n                }\n            ]\n        },\n        \"basement\": {\n            \"title\": \"Basement\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Is the basement properly lit?\",\n                    \"radio_group_name\": \"basement-properly-lit\"\n                },\n                {\n                    \"question_text\": \"Can you easily access the basement appliances?\",\n                    \"radio_group_name\": \"basement-easily-access-appliances\"\n                }\n            ]\n        },\n        \"bathroom\": {\n            \"title\": \"Bathroom\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Are there slip resistant mats in the bathroom?\",\n                    \"radio_group_name\": \"bathroom-slip-resistant-mats\"\n                },\n                {\n                    \"question_text\": \"Is there a slip resistant mat in the bathtub or shower?\",\n                    \"radio_group_name\": \"bathroom-slip-resistant-mat-bathtub-shower\"\n                },\n                {\n                    \"question_text\": \"Do you have assistive devices in the bathroom?\",\n                    \"radio_group_name\": \"bathroom-assistive-devices\"\n                },\n                {\n                    \"question_text\": \"Are there grab bars near the bathtub, shower, and toilet?\",\n                    \"radio_group_name\": \"bathroom-grab-bars-shower-toilet\"\n                },\n                {\n                    \"question_text\": \"Is there bath seat in the bathtub or shower?\",\n                    \"radio_group_name\": \"bathroom-bath-seat-bathtub\"\n                },\n                {\n                    \"question_text\": \"Do you have bathtub lift?\",\n                    \"radio_group_name\": \"bathroom-lift\"\n                },\n                {\n                    \"question_text\": \"Is the shower build separately from the bathtub?\",\n                    \"radio_group_name\": \"bathroom-shower-build-separate\"\n                },\n                {\n                    \"question_text\": \"Is it easy to reach frequently used bathroom items?\",\n                    \"radio_group_name\": \"bathroom-reach-frequent-items\"\n                }\n            ]\n        },\n        \"toilet\": {\n            \"title\": \"Toilet\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Are all toilets in the house easily accessible?\",\n                    \"radio_group_name\": \"toilet-house-easily-accessible\"\n                },\n                {\n                    \"question_text\": \"o Are you using a toilet seat riser?\",\n                    \"radio_group_name\": \"toilet-seat-riser\"\n                },\n            ]\n        },\n        \"living-room\": {\n            \"title\": \"Living Room\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Is the lounge chair safe? (Meaning is your chair at the correct height, and with adequate arm rests?)\",\n                    \"radio_group_name\": \"living-room-lounger-chair-safe\"\n                },\n                {\n                    \"question_text\": \"Is there adequate lighting in the living room?\",\n                    \"radio_group_name\": \"living-room-adequate-lighting\"\n                },\n                {\n                    \"question_text\": \"Is the doorbell functioning and easy to hear?\",\n                    \"radio_group_name\": \"living-room-doorbell-functioning\"\n                },\n            ]\n        },\n        \"telephone\": {\n            \"title\": \"Telephone\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Do you have a fixed home phone line?\",\n                    \"radio_group_name\": \"telephone-fixed-home-phone-line\"\n                },\n                {\n                    \"question_text\": \"Is the home phone line within easy reach?\",\n                    \"radio_group_name\": \"telephone-within-reach\"\n                },\n                {\n                    \"question_text\": \"Do you have a mobile phone?\",\n                    \"radio_group_name\": \"telephone-mobile-phone\"\n                },\n            ]\n        },\n        \"bedroom\": {\n            \"title\": \"Bedroom\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Are you able to turn on a light before getting out of bed?\",\n                    \"radio_group_name\": \"bedroom-turn-light-before-out-of-bed\"\n                },\n                {\n                    \"question_text\": \"Is it easy to get out of bed?\",\n                    \"radio_group_name\": \"bedroom-easy-out-of-bed\"\n                },\n                {\n                    \"question_text\": \"Is the path to the nearest toilet safe?\",\n                    \"radio_group_name\": \"bedroom-nearest-toilet-safe\"\n                },\n            ]\n        },\n        \"kitchen\": {\n            \"title\": \"Kitchen\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Do the cabinet doors and drawers close all the way?\",\n                    \"radio_group_name\": \"kitchen-cabinet-doors-close-allway\"\n                },\n                {\n                    \"question_text\": \"Is it easy to reach frequently used kitchen items?\",\n                    \"radio_group_name\": \"kitchen-easy-reach-frequent-items\"\n                },\n                {\n                    \"question_text\": \"Is there a step stool in the kitchen?\",\n                    \"radio_group_name\": \"kitchen-step-stool\"\n                },\n                {\n                    \"question_text\": \"Is there a slip resistant mat in front of the kitchen sink?\",\n                    \"radio_group_name\": \"kitchen-slip-resistant-mat-front-sink\"\n                },\n                {\n                    \"question_text\": \"Is the ventilation adequate?\",\n                    \"radio_group_name\": \"kitchen-ventilation-adequate\"\n                },\n            ]\n        },\n        \"first-safety-concerns\": {\n            \"title\": \"First Safety Concerns\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Are there smokers in the home?\",\n                    \"radio_group_name\": \"first-safety-concerns-smokers-home\"\n                },\n                {\n                    \"question_text\": \"Are smoke detectors functioning?\",\n                    \"radio_group_name\": \"first-safety-concerns-smoke-detectors-functioning\"\n                },\n                {\n                    \"question_text\": \"Are carbon monoxide detectors functioning?\",\n                    \"radio_group_name\": \"first-safety-concerns-carbon-monoxide-detectors\"\n                },\n                {\n                    \"question_text\": \"Is there a fire extinguisher in the home?\",\n                    \"radio_group_name\": \"first-safety-concerns-fire-extinguisher\"\n                },\n                {\n                    \"question_text\": \"Is the fireplace or wood stove safe?\",\n                    \"radio_group_name\": \"first-safety-concerns-fireplace-wood-stove-safe\"\n                },\n            ]\n        },\n        \"other-safety-concerns\": {\n            \"title\": \"Other Safety Concerns\",\n            \"questions\": [\n                {\n                    \"question_text\": \"Can a walking aid easily be used in the home?\",\n                    \"radio_group_name\": \"other-safety-concerns-walking-aid-easy-use\"\n                }, {\n                    \"question_text\": \"Are there pets in the home?\",\n                    \"radio_group_name\": \"other-safety-concerns-pets-at-home\"\n                }, {\n                    \"question_text\": \"Is an emergency contact list easily accessible if needed?\",\n                    \"radio_group_name\": \"other-safety-concerns-emergency-contact-available\"\n                }, {\n                    \"question_text\": \"Are there any water leaks inside the house?\",\n                    \"radio_group_name\": \"other-safety-concerns-water-leaks-inside-house\"\n                }, {\n                    \"question_text\": \"Is there mold in the house?\",\n                    \"radio_group_name\": \"other-safety-concerns-mold-house\"\n                }, {\n                    \"question_text\": \"Are there signs of pest infestation in the house?\",\n                    \"radio_group_name\": \"other-safety-concerns-pest-infestation-house\"\n                }, {\n                    \"question_text\": \"Does the heating system work properly?\",\n                    \"radio_group_name\": \"other-safety-concerns-heating-system-work-properly\"\n                }, {\n                    \"question_text\": \"Does the paint in the house contain lead?\",\n                    \"radio_group_name\": \"other-safety-concerns-paint-house-lead\"\n                }, {\n                    \"question_text\": \"Are the pipes in the house in good condition? (e.g., broken, eroded, etc.)\",\n                    \"radio_group_name\": \"other-safety-concerns-house-pipes-good-condition\"\n                },\n            ]\n        }\n    }\n\n    const safetyAssessmentQuestionsRender = Object.keys(assessmentQuestions).map((assessmentCategoryKey, index) => {\n        const {title: assessmentCategoryTitle, questions} = assessmentQuestions[assessmentCategoryKey];\n        const preparedAssessmentQuestionsRender = questions.map((question, index) => {\n            const {question_text: questionText, radio_group_name: radioGroupName} = question;\n\n            return <Grid container spacing={gridSpacing} direction=\"column\"\n                         alignItems=\"left\">\n\n\n                <Grid item xs={12}>\n                    <Typography variant=\"subtitle1\">{questionText}</Typography>\n\n                    <Divider />\n                    <FormControl>\n                        <RadioGroup\n                            row\n                            aria-label=\"gender\"\n                            value={valueColor}\n                            onChange={(e) => setValueColor(e.target.value)}\n                            name={radioGroupName}\n                        >\n                            <FormControlLabel\n                                value={`home-safety-assessment-${radioGroupName}-yes`}\n                                control={\n                                    <Radio\n                                        sx={{\n                                            color: theme.palette.primary.main,\n                                            '&.Mui-checked': {color: theme.palette.primary.main}\n                                        }}\n                                    />\n                                }\n                                label=\"Yes\"\n                            />\n\n                            <FormControlLabel\n                                value={`home-safety-assessment-${radioGroupName}-no`}\n                                control={\n                                    <Radio\n                                        sx={{\n                                            color: theme.palette.error.main,\n                                            '&.Mui-checked': {color: theme.palette.error.main}\n                                        }}\n                                    />\n                                }\n                                label=\"No\"\n                            />\n\n                            <FormControlLabel\n                                value={`home-safety-assessment-${radioGroupName}-na`}\n                                control={\n                                    <Radio\n                                        sx={{\n                                            color: theme.palette.success.main,\n                                            '&.Mui-checked': {color: theme.palette.success.main}\n                                        }}\n                                    />\n                                }\n                                label=\"N/A\"\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                    <Divider/>\n                </Grid>\n            </Grid>\n        })\n\n        return (\n            <Grid item xs={12} md={10} lg={12}>\n                <MainCard title={assessmentCategoryTitle}>\n                    <CardContent>\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item xs={10} sm={6} lg={10} md={6}>\n                                {preparedAssessmentQuestionsRender}\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </MainCard>\n            </Grid>\n        )\n    })\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12}>\n                <MainCard title=\"Home Safety Assessment\">\n                    <Grid container spacing={gridSpacing}>\n                        {safetyAssessmentQuestionsRender}\n                    </Grid>\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default HomeSafetyAssessment;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/add/forms/conditional-display/new-case-client-assessment.js",["1804","1805","1806","1807","1808","1809","1810"],"import React from 'react';\n\n// material-ui\nimport {Autocomplete, CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport ProviderSpecificForms from 'views/roles/common/provider-specific-forms';\nimport AssessmentFormsCP from 'views/roles/common/assessment-forms-cp';\nimport MaskedInput from 'react-text-mask';\n\n// Redux\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    setNewEMAssessmentDetails,\n    setNewEMProviderSpecificFormUUID,\n    setNewEMGeneralAssessmentFormUUID\n} from \"store/actions/caseManager/clientAssessmentActions\";\n\nimport MainCard from \"ui-component/cards/MainCard\";\n\n\nconst priorityProblemsList = [\n    {label: 'Increased risk of falls (1 fall in 3 months)', id: 1},\n    {label: 'Multiple co-morbidities (>3)', id: 2},\n    {label: 'No primary care provider', id: 2},\n    {label: 'No mode of transportation', id: 2},\n    {label: 'Polypharmacy issues', id: 2},\n    {label: 'Frequent 911 calls/ED visits', id: 2},\n    {label: 'Recent discharge from hospital', id: 2},\n    {label: 'Financial Vulnerabilities', id: 2},\n    {label: 'Food insecurity', id: 2},\n    {label: 'Social isolation or Living alone', id: 2},\n    {label: 'Cognitive Impairment', id: 2},\n    {label: 'Geographical Isolation', id: 2},\n    {label: 'Mobility Compromise', id: 2},\n    {label: 'No other support services', id: 2},\n    {label: 'Safety concerns or hoarding', id: 2},\n    {label: 'Unstable or precariously housed', id: 2},\n    {label: 'Other', id: 23}\n];\n\nconst clientInterventionsList = [\n    {label: 'Increased risk of falls (1 fall in 3 months)', id: 1},\n    {label: 'Alertness check (person, place, time)', id: 1},\n    {label: 'Blood glucose check', id: 1},\n    {label: 'Cap refill check', id: 1},\n    {label: 'ECG', id: 1},\n    {label: 'Education and health promotion', id: 1},\n    {label: 'Falls risk assessment', id: 1},\n    {label: 'Grip strength', id: 1},\n    {label: 'Hospital discharge follow-up', id: 1},\n    {label: 'Medication Reconciliation', id: 1},\n    {label: 'Medication Education', id: 1},\n    {label: 'Pupil Evaluation', id: 1},\n    {label: 'Telemonitoring education / enrollment', id: 1},\n    {label: 'Respiratory Assessment', id: 1},\n    {label: 'Safety Checklist', id: 1},\n    {label: 'Skin turgor evaluation', id: 1},\n    {label: 'Social discussion (chat)', id: 1},\n    {label: 'Swab testing', id: 1},\n    {label: 'Symptom relief', id: 1},\n    {label: 'Vaccination at home', id: 1},\n    {label: 'Vital signs assessment - Blood pressure', id: 1},\n    {label: 'Vital signs assessment - Pulse', id: 1},\n    {label: 'Vital signs assessment - Heart Rate', id: 1},\n    {label: 'Vital signs assessment - Respiration Rate', id: 1},\n    {label: 'Vital signs assessment - Temperature', id: 1},\n    {label: 'Vital signs assessment - Weight', id: 1},\n    {label: 'Wellness check', id: 1},\n    {label: 'Wound check', id: 1},\n    {label: 'Other', id: 23}\n];\n\nconst recommendationsList = [\n    {label: 'Continue current routine visits - no changes required', id: 1},\n    {label: 'Monitor vital signs', id: 1},\n    {label: 'Increased visits', id: 1},\n    {label: 'Lab Work', id: 1},\n    {label: 'X-Ray', id: 1},\n    {label: 'ECG', id: 1},\n    {label: 'Case Manager Visit', id: 1},\n    {label: 'Primary Provider Visit', id: 1},\n    {label: 'Transfer to the hospital', id: 1},\n    {label: 'Implement new care plan with EMP or External Case Manager', id: 1},\n    {label: 'Other', id: 23}\n];\n\nconst NewCaseClientAssessment = () => {\n\n    const assessmentData = useSelector(state => state.caseManager.clientAssessment.add.assessment_type_data)\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            date: assessmentData.date,\n            total_time: assessmentData.total_time,\n            mode_of_assessment: assessmentData.mode_of_assessment\n        },\n        validate: values => {\n            dispatch(setNewEMAssessmentDetails(values));\n        }\n    });\n\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} sm={12} lg={12} md={12}>\n                <SubCard title='Current Vital Signs'>\n                    <CardContent>\n                        <Grid container spacing={gridSpacing}>\n\n                            <Grid item xs={12} sm={12} lg={4} md={12}>\n                                <MaskedInput\n                                    mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                                    className=\"form-control\"\n                                    label=\"BP\"\n                                    guide={false}\n\n                                    onChange={formik.handleChange}\n                                    name='date'\n                                    id=\"date\"\n                                    value={formik.values.date}\n\n                                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                       defaultValue=\"\"/>}\n                                />\n                            </Grid>\n\n\n                            <Grid item xs={12} sm={12} lg={4} md={12}>\n                                <MaskedInput\n                                    mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                                    className=\"form-control\"\n                                    label=\"Pulse\"\n                                    guide={false}\n\n                                    onChange={formik.handleChange}\n                                    name='date'\n                                    id=\"date\"\n                                    value={formik.values.date}\n\n                                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                       defaultValue=\"\"/>}\n                                />\n                            </Grid>\n\n                            <Grid item xs={12} sm={12} lg={4} md={12}>\n                                <MaskedInput\n                                    mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                                    className=\"form-control\"\n                                    label=\"HR\"\n                                    guide={false}\n\n                                    onChange={formik.handleChange}\n                                    name='date'\n                                    id=\"date\"\n                                    value={formik.values.date}\n\n                                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                       defaultValue=\"\"/>}\n                                />\n                            </Grid>\n\n                            <Grid item xs={12} sm={12} lg={4} md={12}>\n                                <MaskedInput\n                                    mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                                    className=\"form-control\"\n                                    label=\"RR\"\n                                    guide={false}\n\n                                    onChange={formik.handleChange}\n                                    name='date'\n                                    id=\"date\"\n                                    value={formik.values.date}\n\n                                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                       defaultValue=\"\"/>}\n                                />\n                            </Grid>\n\n                            <Grid item xs={12} sm={12} lg={4} md={12}>\n                                <MaskedInput\n                                    mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                                    className=\"form-control\"\n                                    label=\"Temperature\"\n                                    guide={false}\n\n                                    onChange={formik.handleChange}\n                                    name='date'\n                                    id=\"date\"\n                                    value={formik.values.date}\n\n                                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                       defaultValue=\"\"/>}\n                                />\n                            </Grid>\n\n                            <Grid item xs={12} sm={12} lg={4} md={12}>\n                                <MaskedInput\n                                    mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                                    className=\"form-control\"\n                                    label=\"Weight\"\n                                    guide={false}\n\n                                    onChange={formik.handleChange}\n                                    name='date'\n                                    id=\"date\"\n                                    value={formik.values.date}\n\n                                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                       defaultValue=\"\"/>}\n                                />\n                            </Grid>\n\n                            <Grid item xs={12} sm={12} lg={4} md={12}>\n                                <MaskedInput\n                                    mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                                    className=\"form-control\"\n                                    label=\"Oximetry\"\n                                    guide={false}\n\n                                    onChange={formik.handleChange}\n                                    name='date'\n                                    id=\"date\"\n                                    value={formik.values.date}\n\n                                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                       defaultValue=\"\"/>}\n                                />\n                            </Grid>\n\n                            <Grid item xs={12} sm={12} lg={4} md={12}>\n                                <MaskedInput\n                                    mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                                    className=\"form-control\"\n                                    label=\"O2 (liters/minute)\"\n                                    guide={false}\n\n                                    onChange={formik.handleChange}\n                                    name='date'\n                                    id=\"date\"\n                                    value={formik.values.date}\n\n                                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                       defaultValue=\"\"/>}\n                                />\n                            </Grid>\n\n                        </Grid>\n                    </CardContent>\n                </SubCard>\n\n            </Grid>\n\n            <Grid item xs={12} sm={12} lg={12} md={12}>\n                <MainCard>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={12} sm={12} lg={8} md={12}>\n\n                            <Autocomplete\n                                multiple\n                                options={priorityProblemsList}\n                                // value={formik.values.organizations_upon_referral}\n                                // getOptionLabel={(option) => option.label}\n                                // onChange={(e, value) => {\n                                //     formik.setFieldValue('organizations_upon_referral', value)\n                                // }}\n\n                                renderInput={(params) => <TextField {...params} label='Priority Problems'/>}\n                                name='organizations_upon_referral'\n                                id='organizations_upon_referral'\n                                sx={{\n                                    '& .MuiOutlinedInput-root': {\n                                        pr: '30px !important'\n                                    }\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12} sm={12} lg={6} md={12}>\n                            <Autocomplete\n                                multiple\n                                options={clientInterventionsList}\n                                // value={formik.values.organizations_upon_referral}\n                                // getOptionLabel={(option) => option.label}\n                                // onChange={(e, value) => {\n                                //     formik.setFieldValue('organizations_upon_referral', value)\n                                // }}\n\n                                renderInput={(params) => <TextField {...params}\n                                                                    label='Client Interventions'/>}\n                                name='organizations_upon_referral'\n                                id='organizations_upon_referral'\n                                sx={{\n                                    '& .MuiOutlinedInput-root': {\n                                        pr: '30px !important'\n                                    }\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={12} sm={12} lg={6} md={12}>\n                            <Autocomplete\n                                multiple\n                                options={recommendationsList}\n                                // value={formik.values.organizations_upon_referral}\n                                // getOptionLabel={(option) => option.label}\n                                // onChange={(e, value) => {\n                                //     formik.setFieldValue('organizations_upon_referral', value)\n                                // }}\n\n                                renderInput={(params) => <TextField {...params} label='Recommendations'/>}\n                                name='organizations_upon_referral'\n                                id='organizations_upon_referral'\n                                sx={{\n                                    '& .MuiOutlinedInput-root': {\n                                        pr: '30px !important'\n                                    }\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default NewCaseClientAssessment;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/add/forms/conditional-display/existing-case-client-assessment.js",["1811","1812","1813","1814","1815","1816"],"import React from 'react';\n\n// material-ui\nimport {\n    Autocomplete,\n    CardContent,\n    Checkbox, Divider, FormControl,\n    FormControlLabel,\n    Grid,\n    MenuItem, Radio, RadioGroup,\n    TextField,\n    Typography\n} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport ProviderSpecificForms from 'views/roles/common/provider-specific-forms';\nimport AssessmentFormsCP from 'views/roles/common/assessment-forms-cp';\nimport MaskedInput from 'react-text-mask';\n\n// Redux\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    setNewEMAssessmentDetails,\n    setNewEMProviderSpecificFormUUID,\n    setNewEMGeneralAssessmentFormUUID\n} from \"store/actions/caseManager/clientAssessmentActions\";\n\nimport MainCard from \"ui-component/cards/MainCard\";\n\nimport DatePicker from '@material-ui/lab/DatePicker';\nimport AdapterDateFns from '@material-ui/lab/AdapterDateFns';\nimport LocalizationProvider from '@material-ui/lab/LocalizationProvider';\n\n\nconst priorityProblemsList = [\n    {label: 'Increased risk of falls (1 fall in 3 months)', id: 1},\n    {label: 'Multiple co-morbidities (>3)', id: 2},\n    {label: 'No primary care provider', id: 2},\n    {label: 'No mode of transportation', id: 2},\n    {label: 'Polypharmacy issues', id: 2},\n    {label: 'Frequent 911 calls/ED visits', id: 2},\n    {label: 'Recent discharge from hospital', id: 2},\n    {label: 'Financial Vulnerabilities', id: 2},\n    {label: 'Food insecurity', id: 2},\n    {label: 'Social isolation or Living alone', id: 2},\n    {label: 'Cognitive Impairment', id: 2},\n    {label: 'Geographical Isolation', id: 2},\n    {label: 'Mobility Compromise', id: 2},\n    {label: 'No other support services', id: 2},\n    {label: 'Safety concerns or hoarding', id: 2},\n    {label: 'Unstable or precariously housed', id: 2},\n    {label: 'Other', id: 23}\n];\n\nconst clientInterventionsList = [\n    {label: 'Increased risk of falls (1 fall in 3 months)', id: 1},\n    {label: 'Alertness check (person, place, time)', id: 1},\n    {label: 'Blood glucose check', id: 1},\n    {label: 'Cap refill check', id: 1},\n    {label: 'ECG', id: 1},\n    {label: 'Education and health promotion', id: 1},\n    {label: 'Falls risk assessment', id: 1},\n    {label: 'Grip strength', id: 1},\n    {label: 'Hospital discharge follow-up', id: 1},\n    {label: 'Medication Reconciliation', id: 1},\n    {label: 'Medication Education', id: 1},\n    {label: 'Pupil Evaluation', id: 1},\n    {label: 'Telemonitoring education / enrollment', id: 1},\n    {label: 'Respiratory Assessment', id: 1},\n    {label: 'Safety Checklist', id: 1},\n    {label: 'Skin turgor evaluation', id: 1},\n    {label: 'Social discussion (chat)', id: 1},\n    {label: 'Swab testing', id: 1},\n    {label: 'Symptom relief', id: 1},\n    {label: 'Vaccination at home', id: 1},\n    {label: 'Vital signs assessment - Blood pressure', id: 1},\n    {label: 'Vital signs assessment - Pulse', id: 1},\n    {label: 'Vital signs assessment - Heart Rate', id: 1},\n    {label: 'Vital signs assessment - Respiration Rate', id: 1},\n    {label: 'Vital signs assessment - Temperature', id: 1},\n    {label: 'Vital signs assessment - Weight', id: 1},\n    {label: 'Wellness check', id: 1},\n    {label: 'Wound check', id: 1},\n    {label: 'Other', id: 23}\n];\n\nconst recommendationsList = [\n    {label: 'Continue current routine visits - no changes required', id: 1},\n    {label: 'Monitor vital signs', id: 1},\n    {label: 'Increased visits', id: 1},\n    {label: 'Lab Work', id: 1},\n    {label: 'X-Ray', id: 1},\n    {label: 'ECG', id: 1},\n    {label: 'Case Manager Visit', id: 1},\n    {label: 'Primary Provider Visit', id: 1},\n    {label: 'Transfer to the hospital', id: 1},\n    {label: 'Implement new care plan with EMP or External Case Manager', id: 1},\n    {label: 'Other', id: 23}\n];\n\nconst mentalStatusChangesList = [\n    {label: 'Increased confusion', id: 1},\n    {label: 'New or worsening behavioral symptoms', id: 1},\n    {label: 'Decreased consciousness (sleepy, lethargic', id: 1},\n    {label: 'Unresponsiveness', id: 1},\n    {label: 'Other symptoms or signs of delirium (e.g. inability to pay attention, disorganized thinking)', id: 1},\n]\n\nconst functionalStatusChanges = [\n    {label: 'Needs more assistance with ADLs', id: 1},\n    {label: 'Decreased mobility', id: 1},\n    {label: 'Fall', id: 1},\n    {label: 'Other (describe)', id: 1},\n    {label: 'Weakness or hemiparesis', id: 1},\n    {label: 'Slurred speech', id: 1},\n    {label: 'Trouble swallowing', id: 1},\n]\n\n\nconst respiratoryChanges = [\n    {label: 'Shortness of breath', id: 1},\n    {label: 'Cough - Non-productive', id: 1},\n    {label: 'Cough - Productive', id: 1},\n    {label: 'Abnormal lung sounds', id: 1},\n    {label: 'Labored breathing', id: 1},\n]\n\nconst abdomenChanges = [\n    {label: 'Nausea', id: 1},\n    {label: 'Vomiting', id: 1},\n    {label: 'Diarrhea', id: 1},\n    {label: 'Decreased appetite', id: 1},\n    {label: 'Abdominal pain', id: 1},\n    {label: 'Distended abdomen', id: 1},\n    {label: 'Tenderness', id: 1},\n]\n\nconst urineChanges = [\n    {label: 'Decreased urine output', id: 1},\n    {label: 'Painful urination', id: 1},\n    {label: 'Urinating more frequently', id: 1},\n    {label: 'Needs to urinate more urgently', id: 1},\n    {label: 'Blood in urine', id: 1},\n    {label: 'Change in urine appearance', id: 1},\n    {label: 'Change in smell', id: 1},\n    {label: 'New or worsening incontinence', id: 1},\n]\n\n\n// o Date of last BM: (textbox to specify)\n\nconst ExistingCaseClientAssessment = () => {\n\n    const assessmentData = useSelector(state => state.caseManager.clientAssessment.add.assessment_type_data)\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            date: assessmentData.date,\n            total_time: assessmentData.total_time,\n            mode_of_assessment: assessmentData.mode_of_assessment\n        },\n        validate: values => {\n            dispatch(setNewEMAssessmentDetails(values));\n        }\n    });\n\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} sm={12} lg={12} md={12}>\n                <MainCard>\n                    <CardContent>\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item xs={12} sm={12} lg={6} md={12}>\n\n                                <Typography variant=\"subtitle1\">Has there been a change in the clients\n                                    condition</Typography>\n                                <Divider/>\n\n                                <FormControl>\n                                    <RadioGroup\n                                        row\n                                        aria-label=\"change-in-client-condition\"\n                                        name='change-in-client-condition'\n                                    >\n                                        <FormControlLabel\n                                            value='change-client-condition-yes'\n                                            control={\n                                                <Radio/>\n                                            }\n                                            label=\"Yes\"\n                                        />\n\n                                        <FormControlLabel\n                                            value='change-client-condition-no'\n                                            control={\n                                                <Radio/>\n                                            }\n                                            label=\"No\"\n                                        />\n\n                                        <FormControlLabel\n                                            value='change-client-condition-na'\n                                            control={<Radio/>}\n                                            label=\"N/A\"\n                                        />\n                                    </RadioGroup>\n                                </FormControl>\n                                <Divider/>\n\n                            </Grid>\n\n\n                            <Grid item xs={12} sm={12} lg={12} md={12}>\n                                <TextField\n                                    fullWidth\n                                    multiline\n                                    maxRows={20}\n                                    name='person_completing_detail'\n                                    id='person_completing_detail'\n                                    label='Change in the condition, symptoms, or signs is/are:'\n                                    value={formik.values.person_completing_detail}\n                                    onChange={formik.handleChange}\n                                />\n                            </Grid>\n\n                            <Grid item xs={12} sm={12} lg={6} md={12}>\n                                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                    <DatePicker\n                                        renderInput={(props) => <TextField fullWidth {...props} />}\n                                        label=\"Changes were perceived on:\"\n                                        value={formik.values.daily_workload_date}\n                                        name='daily_workload_date'\n                                        id=\"daily_workload_date\"\n                                        format=\"YYYY-MM-DD\"\n                                    />\n                                </LocalizationProvider>\n                            </Grid>\n\n                            <Grid item xs={12} sm={12} lg={12} md={12}>\n                                <TextField\n                                    fullWidth\n                                    multiline\n                                    maxRows={20}\n                                    name='person_completing_detail'\n                                    id='person_completing_detail'\n                                    label='Things that make the condition or symptom worse are:'\n                                    value={formik.values.person_completing_detail}\n                                    onChange={formik.handleChange}\n                                />\n                            </Grid>\n\n                            <Grid item xs={12} sm={12} lg={12} md={12}>\n                                <TextField\n                                    fullWidth\n                                    multiline\n                                    maxRows={20}\n                                    name='person_completing_detail'\n                                    id='person_completing_detail'\n                                    label='Things that make the condition or symptom better are:'\n                                    value={formik.values.person_completing_detail}\n                                    onChange={formik.handleChange}\n                                />\n                            </Grid>\n\n\n                            <Grid item xs={12} sm={12} lg={12} md={12}>\n\n                                <Typography variant=\"subtitle1\">This condition, symptom, or sign has occurred\n                                    before:</Typography>\n                                <Divider/>\n\n                                <FormControl>\n                                    <RadioGroup\n                                        row\n                                        aria-label=\"change-in-client-condition\"\n                                        name='change-in-client-condition'\n                                    >\n                                        <FormControlLabel\n                                            value='change-client-condition-yes'\n                                            control={\n                                                <Radio/>\n                                            }\n                                            label=\"Yes\"\n                                        />\n\n                                        <FormControlLabel\n                                            value='change-client-condition-no'\n                                            control={\n                                                <Radio/>\n                                            }\n                                            label=\"No\"\n                                        />\n                                    </RadioGroup>\n                                </FormControl>\n                                <Divider/>\n\n                            </Grid>\n\n                            <Grid item xs={12} sm={12} lg={12} md={12}>\n                                <TextField\n                                    fullWidth\n                                    multiline\n                                    maxRows={20}\n                                    name='person_completing_detail'\n                                    id='person_completing_detail'\n                                    label='Treatment for last episode (if applicable):'\n                                    value={formik.values.person_completing_detail}\n                                    onChange={formik.handleChange}\n                                />\n                            </Grid>\n\n                            <Grid item xs={12} sm={12} lg={12} md={12}>\n                                <TextField\n                                    fullWidth\n                                    multiline\n                                    maxRows={20}\n                                    name='person_completing_detail'\n                                    id='person_completing_detail'\n                                    label='Other relevant information:'\n                                    value={formik.values.person_completing_detail}\n                                    onChange={formik.handleChange}\n                                />\n                            </Grid>\n\n                        </Grid>\n                    </CardContent>\n                </MainCard>\n            </Grid>\n\n            <Grid item xs={12} sm={12} lg={12} md={12}>\n                <MainCard>\n                    <CardContent>\n                        <SubCard\n                            title='Complete only those relevant to the change in condition. If the item is not relevant, check ‘N/A’ for not applicable.'>\n                            <CardContent>\n                                <Grid container spacing={gridSpacing}>\n\n                                    <Grid item xs={12} sm={12} lg={4} md={12}>\n\n                                        <Autocomplete\n                                            multiple\n                                            options={mentalStatusChangesList}\n                                            renderInput={(params) => <TextField {...params}\n                                                                                label='Mental Status Changes'/>}\n                                            name='organizations_upon_referral'\n                                            id='organizations_upon_referral'\n                                            sx={{\n                                                '& .MuiOutlinedInput-root': {\n                                                    pr: '30px !important'\n                                                }\n                                            }}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} sm={12} lg={4} md={12}>\n                                        <Autocomplete\n                                            multiple\n                                            options={functionalStatusChanges}\n                                            renderInput={(params) => <TextField {...params}\n                                                                                label='Functional Status Changes'/>}\n                                            name='organizations_upon_referral'\n                                            id='organizations_upon_referral'\n                                            sx={{\n                                                '& .MuiOutlinedInput-root': {\n                                                    pr: '30px !important'\n                                                }\n                                            }}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} sm={12} lg={4} md={12}>\n                                        <Autocomplete\n                                            multiple\n                                            options={respiratoryChanges}\n                                            renderInput={(params) => <TextField {...params}\n                                                                                label='Respiratory Changes'/>}\n                                            name='organizations_upon_referral'\n                                            id='organizations_upon_referral'\n                                            sx={{\n                                                '& .MuiOutlinedInput-root': {\n                                                    pr: '30px !important'\n                                                }\n                                            }}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} sm={12} lg={4} md={12}>\n                                        <Autocomplete\n                                            multiple\n                                            options={abdomenChanges}\n                                            renderInput={(params) => <TextField {...params}\n                                                                                label='GI/Abdomen Changes'/>}\n                                            name='organizations_upon_referral'\n                                            id='organizations_upon_referral'\n                                            sx={{\n                                                '& .MuiOutlinedInput-root': {\n                                                    pr: '30px !important'\n                                                }\n                                            }}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} sm={12} lg={4} md={12}>\n                                        <Autocomplete\n                                            multiple\n                                            options={urineChanges}\n                                            renderInput={(params) => <TextField {...params} label='GU/Urine Changes'/>}\n                                            name='organizations_upon_referral'\n                                            id='organizations_upon_referral'\n                                            sx={{\n                                                '& .MuiOutlinedInput-root': {\n                                                    pr: '30px !important'\n                                                }\n                                            }}\n                                        />\n                                    </Grid>\n\n\n                                </Grid>\n                            </CardContent>\n                        </SubCard>\n                    </CardContent>\n                </MainCard>\n            </Grid>\n\n\n            <Grid item xs={12} sm={12} lg={12} md={12}>\n                <MainCard>\n                    <CardContent>\n\n                        <SubCard title='Current Vital Signs'>\n                            <CardContent>\n                                <Grid container spacing={gridSpacing}>\n\n                                    <Grid item xs={12} sm={12} lg={4} md={12}>\n                                        <MaskedInput\n                                            mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                                            className=\"form-control\"\n                                            label=\"BP\"\n                                            guide={false}\n\n                                            onChange={formik.handleChange}\n                                            name='date'\n                                            id=\"date\"\n                                            value={formik.values.date}\n\n                                            render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                               defaultValue=\"\"/>}\n                                        />\n                                    </Grid>\n\n\n                                    <Grid item xs={12} sm={12} lg={4} md={12}>\n                                        <MaskedInput\n                                            mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                                            className=\"form-control\"\n                                            label=\"Pulse\"\n                                            guide={false}\n\n                                            onChange={formik.handleChange}\n                                            name='date'\n                                            id=\"date\"\n                                            value={formik.values.date}\n\n                                            render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                               defaultValue=\"\"/>}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} sm={12} lg={4} md={12}>\n                                        <MaskedInput\n                                            mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                                            className=\"form-control\"\n                                            label=\"HR\"\n                                            guide={false}\n\n                                            onChange={formik.handleChange}\n                                            name='date'\n                                            id=\"date\"\n                                            value={formik.values.date}\n\n                                            render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                               defaultValue=\"\"/>}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} sm={12} lg={4} md={12}>\n                                        <MaskedInput\n                                            mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                                            className=\"form-control\"\n                                            label=\"RR\"\n                                            guide={false}\n\n                                            onChange={formik.handleChange}\n                                            name='date'\n                                            id=\"date\"\n                                            value={formik.values.date}\n\n                                            render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                               defaultValue=\"\"/>}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} sm={12} lg={4} md={12}>\n                                        <MaskedInput\n                                            mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                                            className=\"form-control\"\n                                            label=\"Temperature\"\n                                            guide={false}\n\n                                            onChange={formik.handleChange}\n                                            name='date'\n                                            id=\"date\"\n                                            value={formik.values.date}\n\n                                            render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                               defaultValue=\"\"/>}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} sm={12} lg={4} md={12}>\n                                        <MaskedInput\n                                            mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                                            className=\"form-control\"\n                                            label=\"Weight\"\n                                            guide={false}\n\n                                            onChange={formik.handleChange}\n                                            name='date'\n                                            id=\"date\"\n                                            value={formik.values.date}\n\n                                            render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                               defaultValue=\"\"/>}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} sm={12} lg={4} md={12}>\n                                        <MaskedInput\n                                            mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                                            className=\"form-control\"\n                                            label=\"Oximetry\"\n                                            guide={false}\n\n                                            onChange={formik.handleChange}\n                                            name='date'\n                                            id=\"date\"\n                                            value={formik.values.date}\n\n                                            render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                               defaultValue=\"\"/>}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} sm={12} lg={4} md={12}>\n                                        <MaskedInput\n                                            mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                                            className=\"form-control\"\n                                            label=\"O2 (liters/minute)\"\n                                            guide={false}\n\n                                            onChange={formik.handleChange}\n                                            name='date'\n                                            id=\"date\"\n                                            value={formik.values.date}\n\n                                            render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                               defaultValue=\"\"/>}\n                                        />\n                                    </Grid>\n\n                                </Grid>\n                            </CardContent>\n                        </SubCard>\n\n                    </CardContent>\n                </MainCard>\n            </Grid>\n\n\n            <Grid item xs={12} sm={12} lg={12} md={12}>\n\n                <MainCard>\n                    <CardContent>\n                        <SubCard>\n                            <CardContent>\n                                <Grid container spacing={gridSpacing}>\n\n                                    <Grid item xs={12} sm={12} lg={8} md={12}>\n                                        <Autocomplete\n                                            multiple\n                                            options={priorityProblemsList}\n                                            // value={formik.values.organizations_upon_referral}\n                                            // getOptionLabel={(option) => option.label}\n                                            // onChange={(e, value) => {\n                                            //     formik.setFieldValue('organizations_upon_referral', value)\n                                            // }}\n\n                                            renderInput={(params) => <TextField {...params} label='Priority Problems'/>}\n                                            name='organizations_upon_referral'\n                                            id='organizations_upon_referral'\n                                            sx={{\n                                                '& .MuiOutlinedInput-root': {\n                                                    pr: '30px !important'\n                                                }\n                                            }}\n                                        />\n                                    </Grid>\n\n                                    <Grid item xs={12} sm={12} lg={6} md={12}>\n\n                                        <Autocomplete\n                                            multiple\n                                            options={clientInterventionsList}\n                                            // value={formik.values.organizations_upon_referral}\n                                            // getOptionLabel={(option) => option.label}\n                                            // onChange={(e, value) => {\n                                            //     formik.setFieldValue('organizations_upon_referral', value)\n                                            // }}\n\n                                            renderInput={(params) => <TextField {...params}\n                                                                                label='Client Interventions'/>}\n                                            name='organizations_upon_referral'\n                                            id='organizations_upon_referral'\n                                            sx={{\n                                                '& .MuiOutlinedInput-root': {\n                                                    pr: '30px !important'\n                                                }\n                                            }}\n                                        />\n\n                                    </Grid>\n\n                                    <Grid item xs={12} sm={12} lg={6} md={12}>\n                                        <Autocomplete\n                                            multiple\n                                            options={recommendationsList}\n                                            // value={formik.values.organizations_upon_referral}\n                                            // getOptionLabel={(option) => option.label}\n                                            // onChange={(e, value) => {\n                                            //     formik.setFieldValue('organizations_upon_referral', value)\n                                            // }}\n\n                                            renderInput={(params) => <TextField {...params} label='Recommendations'/>}\n                                            name='organizations_upon_referral'\n                                            id='organizations_upon_referral'\n                                            sx={{\n                                                '& .MuiOutlinedInput-root': {\n                                                    pr: '30px !important'\n                                                }\n                                            }}\n                                        />\n                                    </Grid>\n                                </Grid>\n\n                            </CardContent>\n                        </SubCard>\n                    </CardContent>\n                </MainCard>\n            </Grid>\n\n\n        </Grid>\n    );\n};\n\nexport default ExistingCaseClientAssessment;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/add/forms/conditional-display/existing-extra-mural.js",["1817","1818","1819","1820","1821","1822"],"import React from 'react';\n\n// material-ui\nimport { CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField } from '@material-ui/core';\n\n// project imports\nimport { gridSpacing } from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport MaskedInput from 'react-text-mask';\nimport FileInput from 'views/roles/common/file-input';\n\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    setExistingEMAssessmentDetails,\n    setExistingEMProviderSpecificFormUUID,\n    setExistingEMGeneralAssessmentFormUUID,\n} from \"store/actions/caseManager/clientAssessmentActions\";\nimport ProviderSpecificForms from \"views/roles/common/provider-specific-forms\";\nimport AssessmentForms from \"views/roles/common/assessment-forms\";\n\nconst ExistingExtraMural = () => {\n    const clientAssessmentTypeData = useSelector(state => state.caseManager.clientAssessment.add.assessment_type_data)\n    const existingEMAssessmentData = clientAssessmentTypeData.existing_assessment.data\n\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            date: existingEMAssessmentData.date\n        },\n        validate: values => {\n            dispatch(setExistingEMAssessmentDetails(values));\n        }\n    });\n\n    return (\n        <Grid container spacing={gridSpacing}>\n\n            <Grid item xs={12} sm={12} lg={6} md={6}>\n                <MaskedInput\n                    mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                    className=\"form-control\"\n                    label=\"Date\"\n                    guide={false}\n\n                    onChange={formik.handleChange}\n                    name='date'\n                    id=\"date\"\n                    value={formik.values.date}\n\n                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props} defaultValue=\"\" />}\n                />\n            </Grid>\n\n            <Grid item xs={12} sm={8} lg={12}>\n                <ProviderSpecificForms documentType='TYPE_CASE_MANAGER_ASSESSMENT'\n                                       providerSpecificFormAction={setExistingEMProviderSpecificFormUUID}/>\n            </Grid>\n\n            <Grid item xs={12} sm={10} md={10} lg={12}>\n                <AssessmentForms documentType='TYPE_CASE_MANAGER_ASSESSMENT'\n                                 generalAssessmentFormAction={setExistingEMGeneralAssessmentFormUUID}/>\n            </Grid>\n\n        </Grid>\n    );\n};\n\nexport default ExistingExtraMural;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/add/forms/conditional-display/new-case-client.js",["1823","1824","1825","1826","1827","1828","1829","1830"],"import React from 'react';\n\n// material-ui\nimport {CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport ProviderSpecificForms from 'views/roles/common/provider-specific-forms';\nimport AssessmentFormsCP from 'views/roles/common/assessment-forms-cp';\nimport MaskedInput from 'react-text-mask';\n\nimport DatePicker from '@material-ui/lab/DatePicker';\nimport AdapterDateFns from '@material-ui/lab/AdapterDateFns';\nimport LocalizationProvider from '@material-ui/lab/LocalizationProvider';\n\n// Redux\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    setNewEMAssessmentDetails,\n    setNewEMProviderSpecificFormUUID,\n    setNewEMGeneralAssessmentFormUUID\n} from \"store/actions/caseManager/clientAssessmentActions\";\n\nconst modeOfAssessmentSelectList = [\n    {\n        value: 'in-person-home',\n        label: 'In-Person Visit - Home'\n    },\n    {\n        value: 'in-person-nursing-home',\n        label: 'In-Person Visit - Nursing Home '\n    },\n    {\n        value: 'in-person-residential-facility',\n        label: 'In-Person Visit - Residential Facility '\n    },\n    {\n        value: 'in-person-work',\n        label: 'In-Person Visit - Work'\n    },\n    {\n        value: 'in-person-other',\n        label: 'In-Person Visit - Other'\n    },\n    {\n        value: 'telephone',\n        label: 'Telephone'\n    },\n    {\n        value: 'videoconferencing',\n        label: 'Videoconferencing'\n    },\n    {\n        value: 'other',\n        label: 'Other'\n    }\n];\n\nconst NewCaseClient = () => {\n\n    const assessmentData = useSelector(state => state.caseManager.clientAssessment.add.assessment_type_data)\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            date: assessmentData.date,\n            total_time: assessmentData.total_time,\n            mode_of_assessment: assessmentData.mode_of_assessment\n        },\n        validate: values => {\n            dispatch(setNewEMAssessmentDetails(values));\n        }\n    });\n\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} sm={12} lg={4} md={6}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                    <DatePicker\n                        renderInput={(props) => <TextField fullWidth {...props} />}\n                        label=\"Date\"\n                        value={formik.values.daily_workload_date}\n                        name='daily_workload_date'\n                        id=\"daily_workload_date\"\n                        format=\"YYYY-MM-DD\"\n                    />\n                </LocalizationProvider>\n            </Grid>\n\n            <Grid item xs={12} sm={12} lg={4} md={8}>\n                <MaskedInput\n                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                    className=\"form-control\"\n                    label=\"Arrival time at Client's home\"\n                    guide={false}\n\n                    onChange={formik.handleChange}\n                    name='total_time'\n                    id=\"total_time\"\n                    value={formik.values.total_time}\n\n                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props} defaultValue=\"\"/>}\n                />\n            </Grid>\n\n\n            <Grid item xs={12} sm={12} lg={4} md={8}>\n                <MaskedInput\n                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                    className=\"form-control\"\n                    label=\"Departure time from Client's home\"\n                    guide={false}\n\n                    onChange={formik.handleChange}\n                    name='total_time'\n                    id=\"total_time\"\n                    value={formik.values.total_time}\n\n                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props} defaultValue=\"\"/>}\n                />\n            </Grid>\n\n\n            <Grid item xs={12} lg={12} sm={12}>\n                <AssessmentFormsCP documentType='TYPE_CASE_MANAGER_ASSESSMENT'\n                                 generalAssessmentFormAction={setNewEMGeneralAssessmentFormUUID}/>\n            </Grid>\n\n        </Grid>\n    );\n};\n\nexport default NewCaseClient;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/daily-workload/forms/details.js",["1831","1832","1833","1834","1835"],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/daily-workload/edit/index.js",["1836","1837","1838","1839","1840"],"import PropTypes from 'prop-types';\nimport React, {useEffect} from 'react';\nimport JWTContext from 'contexts/JWTContext';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {\n    Button,\n    CardActions,\n    CircularProgress,\n    CardContent,\n    Divider,\n    Grid,\n    Tab,\n    Tabs,\n    Typography, IconButton\n} from '@material-ui/core';\n\n// project imports\nimport ClientCaseLoad from '../add/forms/client-caseload';\nimport Details from '../add/forms/details';\n\nimport {useSelector, useDispatch} from \"react-redux\";\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport {gridSpacing} from 'store/constant';\n\n// assets\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\nimport {SNACKBAR_OPEN} from 'store/actionTypes';\n\nimport clinicianApi from 'store/api-calls/clinician';\n\nimport ProgressCircularControlled from 'views/ui/ProgressCircularControlled';\nimport {\n    setDailyWorkLoadDetails,\n    resetDailyWorkLoad,\n    retrieveDailyWorkload,\n    setRetrievedDailyWorkLoadDetailsUpdate\n} from \"store/actions/clinician/dailyWorkloadActions\";\nimport {useNavigate, useParams} from \"react-router-dom\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport InfoTwoTone from \"@material-ui/icons/InfoTwoTone\";\n\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    profileTab: {\n        '& .MuiTabs-flexContainer': {\n            borderBottom: 'none'\n        },\n        '& button': {\n            color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[600],\n            minHeight: 'auto',\n            minWidth: '100%',\n            padding: '12px 16px',\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n            textAlign: 'left',\n            justifyContent: 'flex-start'\n        },\n        '& button.Mui-selected': {\n            color: theme.palette.primary.main,\n            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50]\n        },\n        '& button > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px',\n            marginTop: '10px',\n            height: '20px',\n            width: '20px'\n        },\n        '& button > div > span': {\n            display: 'block'\n        },\n        '& > div > span': {\n            display: 'none'\n        }\n    },\n    cardPanels: {\n        borderLeft: '1px solid',\n        borderLeftColor: theme.palette.mode === 'dark' ? '#333d5e' : '#eeeeee',\n        height: '100%'\n    }\n}));\n\n// tabs\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <div role='tabpanel' hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && <div>{children}</div>}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n// tabs option\nconst tabsOption = [\n    {\n        label: 'Details',\n        icon: <DescriptionTwoToneIcon/>,\n        caption: 'Workload Information'\n    },\n    {\n        label: 'Client Caseload',\n        icon: <DescriptionTwoToneIcon/>,\n        caption: 'Caseload Information'\n    },\n];\n\n// ===========================|| PROFILE 2 ||=========================== //\n\nconst DailyWorkloadEdit = () => {\n    const classes = useStyles();\n    const navigate = useNavigate();\n    const customization = useSelector((state) => state.customization);\n    const dispatch = useDispatch();\n\n    const [value, setValue] = React.useState(0);\n    const [progressLoader, setProgressLoader] = React.useState(false);\n\n    const userAuthContext = React.useContext(JWTContext)\n    const {\n        user: {\n            user_type_pk: clinicianUUID\n        }\n    } = userAuthContext;\n\n    const {workload_id} = useParams();\n    const dailyWorkloadDataEdit = useSelector(state => state.clinician.dailyWorkload.add)\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const navigateWorkloadDetail = () => {\n        navigate(`/workload/${workload_id}`)\n    }\n\n    useEffect(async () => {\n        setProgressLoader(true);\n        const response = await clinicianApi.retrieveDailyWorkload(workload_id);\n\n        if ('result' in response && response.result === true && 'data' in response) {\n            dispatch(setRetrievedDailyWorkLoadDetailsUpdate(response.data))\n        }\n        setProgressLoader(false);\n    }, []);\n\n    const handleWorkloadUpdate = async (e) => {\n        setProgressLoader(true);  // Call this to show the loader for the current tab\n        dispatch(setDailyWorkLoadDetails({\n            clinician: clinicianUUID\n        }))\n        const response = await clinicianApi.updateDailyWorkload(workload_id, dailyWorkloadDataEdit);\n        setProgressLoader(false);\n\n        if ('result' in response === true) {\n            if (response.result === true) {\n                navigate(`/workload/${workload_id}`)\n\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Your Daily Workload entry has been updated.',\n                    variant: 'alert',\n                    alertSeverity: 'success', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n                dispatch(resetDailyWorkLoad())\n            } else {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Your Daily workload could not be updated. Please try again',\n                    variant: 'alert',\n                    alertSeverity: 'error', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            }\n        }\n\n        if ('errors' in response === true) {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Please provide all the fields with valid values and try submit again.',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n\n        if ('status' in response === true && response.status > 200) {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Please provide all the fields with valid values and try submit again.',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n    }\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12}>\n                <MainCard title={\n                    <>\n                        <>Edit Daily Workload</>\n                        <ProgressCircularControlled display={progressLoader}/>\n                    </>\n                } secondary={\n                    <>\n                        <Tooltip title=\"View Workload Detail\" onClick={navigateWorkloadDetail}>\n                            <IconButton color=\"secondary\">\n                                <InfoTwoTone sx={{fontSize: '1.5rem'}}/>\n                            </IconButton>\n                        </Tooltip>\n                    </>\n                }\n                          content={false}>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={12} lg={4}>\n                            <CardContent>\n                                <Tabs\n                                    value={value}\n                                    onChange={handleChange}\n                                    orientation='vertical'\n                                    className={classes.profileTab}\n                                    variant='scrollable'\n                                    sx={{\n                                        '& button': {\n                                            borderRadius: `${customization.borderRadius}px`\n                                        }\n                                    }}\n                                >\n                                    {tabsOption.map((tab, index) => (\n                                        <Tab\n                                            key={index}\n                                            icon={tab.icon}\n                                            label={\n                                                <Grid container direction='column'>\n                                                    <Typography sx={{textTransform: 'capitalize'}} variant='subtitle1'\n                                                                color='inherit'>\n                                                        {tab.label}\n                                                    </Typography>\n                                                    <Typography component='div' variant='caption'\n                                                                sx={{textTransform: 'capitalize'}}>\n                                                        {tab.caption}\n                                                    </Typography>\n                                                </Grid>\n                                            }\n                                            {...a11yProps(index)}\n                                        />\n                                    ))}\n                                </Tabs>\n                            </CardContent>\n                        </Grid>\n                        <Grid item xs={12} lg={8}>\n                            <CardContent className={classes.cardPanels}>\n                                <TabPanel value={value} index={0}>\n                                    <Details editMode/>\n                                </TabPanel>\n                                <TabPanel value={value} index={1}>\n                                    <ClientCaseLoad editMode/>\n                                </TabPanel>\n                            </CardContent>\n                        </Grid>\n                    </Grid>\n                    <Divider/>\n                    <CardActions>\n                        <Grid container justifyContent='space-between' spacing={0}>\n                            <Grid item>\n                                <Grid container justifyContent='space-between' spacing={1}>\n                                    <Grid item>\n                                        {value < 1 && (\n                                            <AnimateButton>\n                                                <Button variant='contained' size='large'\n                                                        onClick={(e) => handleChange(e, 1 + parseInt(value, 10))}>\n                                                    Continue\n                                                </Button>\n                                            </AnimateButton>\n                                        )}\n                                    </Grid>\n\n                                    <Grid item>\n                                        {value > 0 && (\n                                            <AnimateButton>\n                                                <Button variant='outlined' size='large'\n                                                        onClick={(e) => handleChange(e, parseInt(value, 10) - 1)}>\n                                                    Back\n                                                </Button>\n                                            </AnimateButton>\n                                        )}\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n\n                            <Grid item alignContent='end'>\n                                {value === 1 && (\n                                    <AnimateButton>\n                                        <Button color='secondary' variant='contained' size='large'\n                                                onClick={handleWorkloadUpdate}>\n                                            Update <ProgressCircularControlled display={progressLoader}/>\n                                        </Button>\n                                    </AnimateButton>\n                                )}\n                            </Grid>\n\n                        </Grid>\n                    </CardActions>\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default DailyWorkloadEdit;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-assessment/list/index.js",["1841","1842","1843","1844","1845","1846","1847","1848","1849","1850","1851"],"import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {listReferralsByReviewBoardID} from 'store/actions/reviewBoard/referralActions';\nimport {useNavigate} from 'react-router-dom';\n\n// material-ui\nimport {makeStyles, useTheme} from '@material-ui/styles';\nimport {\n    CardContent,\n    Checkbox,\n    Fab,\n    Grid,\n    IconButton,\n    InputAdornment,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TablePagination,\n    TableRow,\n    TableSortLabel,\n    TextField,\n    Toolbar,\n    Tooltip,\n    Typography\n} from '@material-ui/core';\nimport {visuallyHidden} from '@material-ui/utils';\n\n// third-party\nimport clsx from 'clsx';\n\n// project imports\n\nimport MainCard from 'ui-component/cards/MainCard';\n\n// assets\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterListTwoTone';\nimport PrintIcon from '@material-ui/icons/PrintTwoTone';\nimport FileCopyIcon from '@material-ui/icons/FileCopyTwoTone';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddIcon from '@material-ui/icons/AddTwoTone';\nimport MoreHorizOutlinedIcon from '@material-ui/icons/MoreHorizOutlined';\nimport {useContext, useEffect} from \"react\";\n\n// axios api\nimport caseManagerApi from 'store/api-calls/case-manager';\nimport JWTContext from \"contexts/JWTContext\";\nimport VisibilityTwoToneIcon from \"@material-ui/icons/VisibilityTwoTone\";\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\nimport {listCaseManagerClientAssessment} from \"store/actions/caseManager/clientAssessmentActions\";\n\n// table data\nfunction createData(id, name, category, price, date, qty) {\n    return {id, name, category, price, date, qty};\n}\n\n// table sort\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\n// table header options\nconst headCells = [\n    {\n        id: 'assessment_date',\n        numeric: false,\n        label: 'Assessment Date',\n        align: 'center'\n    },\n    {\n        id: 'assessment_client',\n        numeric: false,\n        label: 'Client',\n        align: 'left'\n    },\n    {\n        id: 'client_status',\n        numeric: false,\n        label: 'Client Status',\n        align: 'left'\n    },\n    {\n        id: 'assessment_type',\n        numeric: false,\n        label: 'Assessment Type',\n        align: 'left'\n    },\n];\n\n// style const\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%'\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2)\n    },\n    table: {\n        minWidth: 750\n    },\n    sortSpan: visuallyHidden\n}));\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        padding: 0,\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1)\n    },\n    highlight: {\n        color: theme.palette.secondary.main\n    },\n    title: {\n        flex: '1 1 100%'\n    }\n}));\n\n// ===========================|| TABLE HEADER ||=========================== //\n\nfunction EnhancedTableHead({classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort, theme,\n                               selected }) {\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                {numSelected > 0 && (\n                    <TableCell padding=\"none\" colSpan={7}>\n                        <EnhancedTableToolbar numSelected={selected.length}/>\n                    </TableCell>\n                )}\n                {numSelected <= 0 &&\n                headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.align}\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span\n                                    className={classes.sortSpan}>{order === 'desc' ? 'sorted descending' : 'sorted ascending'}</span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n                {numSelected <= 0 && (\n                    <TableCell sortDirection={false} align=\"center\" sx={{pr: 3}}>\n                        <Typography\n                            variant=\"subtitle1\"\n                            sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                        >\n                            Action\n                        </Typography>\n                    </TableCell>\n                )}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    theme: PropTypes.object,\n    selected: PropTypes.array,\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired\n};\n\n// ===========================|| TABLE HEADER TOOLBAR ||=========================== //\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const {numSelected} = props;\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"h4\" component=\"div\">\n                    {numSelected} Selected\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Nutrition\n                </Typography>\n            )}\n\n            {numSelected > 0 && (\n                <Tooltip title=\"Delete\">\n                    <IconButton>\n                        <DeleteIcon fontSize=\"small\"/>\n                    </IconButton>\n                </Tooltip>\n            )}\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired\n};\n\n// ===========================|| PRODUCT LIST ||=========================== //\n\nconst ReviewBoardReferralList = () => {\n    const userAuthContext = React.useContext(JWTContext)\n    const {\n        user: {\n            user_type_pk: caseManagerUUID\n        }\n    } = userAuthContext;\n\n    const navigate = useNavigate();\n    const reviewBoardRedux = useSelector(state => state.reviewBoard)\n    const dispatch = useDispatch();\n\n    const classes = useStyles();\n    const theme = useTheme();\n\n    // show a right sidebar when clicked on new product\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpenDialog = () => {\n        navigate('/assessment/add');\n    };\n    const handleCloseDialog = () => {\n        setOpen(false);\n    };\n\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [search, setSearch] = React.useState('');\n    const [rows, setRows] = React.useState([]);\n    const [rowsInitial, setRowsInitial] = React.useState([]);\n\n    const handleSearch = (event) => {\n        const newString = event.target.value;\n        setSearch(newString);\n\n        if (newString) {\n            const newRows = rows.filter((row) => {\n                let matches = true;\n\n                const properties = ['assessment_date', 'client_fullname'];\n                let containsQuery = false;\n\n                properties.forEach((property) => {\n                    if (row[property].toString().toLowerCase().includes(newString.toString().toLowerCase())) {\n                        containsQuery = true;\n                    }\n                });\n\n                if (!containsQuery) {\n                    matches = false;\n                }\n                return matches;\n            });\n            setRows(newRows);\n        } else {\n            setRows(rowsInitial);\n        }\n    };\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelectedId = rows.map((n) => n.name);\n            setSelected(newSelectedId);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, workloadUUID) => {\n        navigate(`/assessment/${workloadUUID}`)\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const fetchListData = async () => {\n        const response = await caseManagerApi.listClientAssessmentByCaseManagerID(caseManagerUUID);\n        if ('result' in response && response.result === true) {\n            setRows(response.data)\n            setRowsInitial(response.data)\n            dispatch(listCaseManagerClientAssessment(response.data))\n        }\n    }\n\n    useEffect(() => {\n        fetchListData()\n    }, [])\n\n    const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n    return (\n        <MainCard title=\"My Client Assessments\" content={false}>\n            <CardContent>\n                <Grid container justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\n                    <Grid item xs={8} sm={6}>\n                        <TextField\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <SearchIcon fontSize=\"small\"/>\n                                    </InputAdornment>\n                                )\n                            }}\n                            onChange={handleSearch}\n                            placeholder=\"Search Workload\"\n                            value={search}\n                            size=\"small\"\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={6} sx={{textAlign: 'right'}}>\n                        <Tooltip title=\"Copy\">\n                            <IconButton>\n                                <FileCopyIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Print\">\n                            <IconButton>\n                                <PrintIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Filter\">\n                            <IconButton>\n                                <FilterListIcon/>\n                            </IconButton>\n                        </Tooltip>\n\n                        {/* product add & dialog */}\n                        <Tooltip title=\"Add Assessment\">\n                            <Fab\n                                color=\"primary\"\n                                size=\"small\"\n                                onClick={handleClickOpenDialog}\n                                sx={{boxShadow: 'none', ml: 1, width: '32px', height: '32px', minHeight: '32px'}}\n                            >\n                                <AddIcon fontSize=\"small\"/>\n                            </Fab>\n                        </Tooltip>\n\n                    </Grid>\n                </Grid>\n            </CardContent>\n\n            {/* table */}\n            <TableContainer>\n                <Table className={classes.table} aria-labelledby=\"tableTitle\">\n                    <EnhancedTableHead\n                        classes={classes}\n                        numSelected={selected.length}\n                        order={order}\n                        orderBy={orderBy}\n                        onSelectAllClick={handleSelectAllClick}\n                        onRequestSort={handleRequestSort}\n                        rowCount={rows.length}\n                        theme={theme}\n                        selected={selected}\n                    />\n                    <TableBody>\n                        {stableSort(rows, getComparator(order, orderBy))\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map((row, index) => {\n                                const labelId = `enhanced-table-checkbox-${index}`;\n\n                                return (\n                                    <TableRow\n                                        hover\n                                        role=\"checkbox\"\n                                        tabIndex={-1}\n                                        key={index}\n                                    >\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"center\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row.assessment_date}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"left\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row?.client_fullname}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"left\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row?.client_status}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"left\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row?.assessment_status}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell align=\"center\" sx={{pr: 3}}>\n                                            <IconButton\n                                                color=\"primary\"\n                                                onClick={(event) => handleClick(event, row.client_assessment_id)}\n                                            >\n                                                <VisibilityTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                                            </IconButton>\n                                            <IconButton color=\"secondary\">\n                                                <EditTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                                            </IconButton>\n                                        </TableCell>\n\n\n                                    </TableRow>\n                                );\n                            })}\n                        {emptyRows > 0 && (\n                            <TableRow\n                                style={{\n                                    height: 53 * emptyRows\n                                }}\n                            >\n                                <TableCell colSpan={6}/>\n                            </TableRow>\n                        )}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n\n            {/* table pagination */}\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </MainCard>\n    );\n};\n\nexport default ReviewBoardReferralList;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/edit/index.js",["1852","1853","1854","1855","1856","1857"],"import PropTypes from 'prop-types';\nimport React, {useEffect} from 'react';\nimport JWTContext from 'contexts/JWTContext';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {\n    Button,\n    CardActions,\n    CircularProgress,\n    CardContent,\n    Divider,\n    Grid,\n    Tab,\n    Tabs,\n    Typography, IconButton\n} from '@material-ui/core';\n\n// project imports\nimport ClientCaseLoad from '../add/forms/client-caseload';\nimport ProjectClinicalActivities from '../add/forms/project-clinical-activities';\nimport ProjectActivities from '../add/forms/project-activities';\nimport Details from '../add/forms/details';\n\nimport {useSelector, useDispatch} from \"react-redux\";\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport {gridSpacing} from 'store/constant';\n\n// assets\nimport PersonOutlineTwoToneIcon from '@material-ui/icons/PersonOutlineTwoTone';\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\nimport CreditCardTwoToneIcon from '@material-ui/icons/CreditCardTwoTone';\nimport VpnKeyTwoToneIcon from '@material-ui/icons/VpnKeyTwoTone';\nimport {SNACKBAR_OPEN} from 'store/actionTypes';\n\nimport caseManagerApi from 'store/api-calls/case-manager';\n\nimport ProgressCircularControlled from 'views/ui/ProgressCircularControlled';\nimport {\n    setDailyWorkLoadDetails,\n    resetDailyWorkLoad,\n    retrieveDailyWorkload,\n    setRetrievedDailyWorkLoadDetailsUpdate\n} from \"store/actions/caseManager/dailyWorkloadActions\";\nimport {useNavigate, useParams} from \"react-router-dom\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport InfoTwoTone from \"@material-ui/icons/InfoTwoTone\";\n\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    profileTab: {\n        '& .MuiTabs-flexContainer': {\n            borderBottom: 'none'\n        },\n        '& button': {\n            color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[600],\n            minHeight: 'auto',\n            minWidth: '100%',\n            padding: '12px 16px',\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n            textAlign: 'left',\n            justifyContent: 'flex-start'\n        },\n        '& button.Mui-selected': {\n            color: theme.palette.primary.main,\n            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50]\n        },\n        '& button > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px',\n            marginTop: '10px',\n            height: '20px',\n            width: '20px'\n        },\n        '& button > div > span': {\n            display: 'block'\n        },\n        '& > div > span': {\n            display: 'none'\n        }\n    },\n    cardPanels: {\n        borderLeft: '1px solid',\n        borderLeftColor: theme.palette.mode === 'dark' ? '#333d5e' : '#eeeeee',\n        height: '100%'\n    }\n}));\n\n// tabs\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <div role='tabpanel' hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && <div>{children}</div>}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n// tabs option\nconst tabsOption = [\n    {\n        label: 'Details',\n        icon: <DescriptionTwoToneIcon/>,\n        caption: 'Caption here'\n    },\n    {\n        label: 'Client Caseload',\n        icon: <DescriptionTwoToneIcon/>,\n        caption: 'Billing Information'\n    },\n    {\n        label: 'Project Related Clinical Activities',\n        icon: <CreditCardTwoToneIcon/>,\n        caption: 'Add & Update Card'\n    },\n    {\n        label: 'Research Related Activities',\n        icon: <VpnKeyTwoToneIcon/>,\n        caption: 'Update Profile Security'\n    }\n];\n\n// ===========================|| PROFILE 2 ||=========================== //\n\nconst DailyWorkloadEdit = () => {\n    const classes = useStyles();\n    const navigate = useNavigate();\n    const customization = useSelector((state) => state.customization);\n    const dispatch = useDispatch();\n\n    const [value, setValue] = React.useState(0);\n    const [progressLoader, setProgressLoader] = React.useState(false);\n\n    const userAuthContext = React.useContext(JWTContext)\n    const {\n        user: {\n            user_type_pk: caseManagerUUID\n        }\n    } = userAuthContext;\n\n    const {workload_id} = useParams();\n    const dailyWorkloadDataEdit = useSelector(state => state.caseManager.dailyWorkload.add)\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const navigateWorkloadDetail = () => {\n        navigate(`/workload/${workload_id}`)\n    }\n\n    useEffect(async () => {\n        setProgressLoader(true);\n        const response = await caseManagerApi.retrieveDailyWorkload(workload_id);\n\n        if ('result' in response && response.result === true && 'data' in response) {\n            dispatch(setRetrievedDailyWorkLoadDetailsUpdate(response.data))\n            setProgressLoader(false);\n        }\n    }, []);\n\n    const handleWorkloadUpdate = async (e) => {\n        setProgressLoader(true);  // Call this to show the loader for the current tab\n        dispatch(setDailyWorkLoadDetails({\n            casemanager: caseManagerUUID\n        }))\n        const response = await caseManagerApi.updateDailyWorkload(workload_id, dailyWorkloadDataEdit);\n        setProgressLoader(false);\n\n        if ('result' in response === true) {\n            if (response.result === true) {\n                navigate(`/workload/${workload_id}`)\n\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Your Daily Workload entry has been updated.',\n                    variant: 'alert',\n                    alertSeverity: 'success', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n                dispatch(resetDailyWorkLoad())\n            } else {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Your Daily workload could not be updated. Please try again',\n                    variant: 'alert',\n                    alertSeverity: 'error', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            }\n        }\n\n        if ('errors' in response === true) {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Please provide all the fields with valid values and try submit again.',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n\n        if ('status' in response === true && response.status > 200) {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Please provide all the fields with valid values and try submit again.',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n    }\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12}>\n                <MainCard title={\n                    <>\n                        <>Edit Daily Workload</>\n                        <ProgressCircularControlled display={progressLoader}/>\n                    </>\n                } secondary={\n                    <>\n                        <Tooltip title=\"View Workload Detail\" onClick={navigateWorkloadDetail}>\n                            <IconButton color=\"secondary\">\n                                <InfoTwoTone sx={{fontSize: '1.5rem'}}/>\n                            </IconButton>\n                        </Tooltip>\n                    </>\n                }\n                          content={false}>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={12} lg={4}>\n                            <CardContent>\n                                <Tabs\n                                    value={value}\n                                    onChange={handleChange}\n                                    orientation='vertical'\n                                    className={classes.profileTab}\n                                    variant='scrollable'\n                                    sx={{\n                                        '& button': {\n                                            borderRadius: `${customization.borderRadius}px`\n                                        }\n                                    }}\n                                >\n                                    {tabsOption.map((tab, index) => (\n                                        <Tab\n                                            key={index}\n                                            icon={tab.icon}\n                                            label={\n                                                <Grid container direction='column'>\n                                                    <Typography sx={{textTransform: 'capitalize'}} variant='subtitle1'\n                                                                color='inherit'>\n                                                        {tab.label}\n                                                    </Typography>\n                                                    <Typography component='div' variant='caption'\n                                                                sx={{textTransform: 'capitalize'}}>\n                                                        {tab.caption}\n                                                    </Typography>\n                                                </Grid>\n                                            }\n                                            {...a11yProps(index)}\n                                        />\n                                    ))}\n                                </Tabs>\n                            </CardContent>\n                        </Grid>\n                        <Grid item xs={12} lg={8}>\n                            <CardContent className={classes.cardPanels}>\n                                <TabPanel value={value} index={0}>\n                                    <Details editMode/>\n                                </TabPanel>\n                                <TabPanel value={value} index={1}>\n                                    <ClientCaseLoad editMode/>\n                                </TabPanel>\n                                <TabPanel value={value} index={2}>\n                                    <ProjectClinicalActivities editMode/>\n                                </TabPanel>\n                                <TabPanel value={value} index={3}>\n                                    <ProjectActivities editMode/>\n                                </TabPanel>\n                            </CardContent>\n                        </Grid>\n                    </Grid>\n                    <Divider/>\n                    <CardActions>\n                        <Grid container justifyContent='space-between' spacing={0}>\n                            <Grid item>\n                                <Grid container justifyContent='space-between' spacing={1}>\n                                    <Grid item>\n                                        {value < 3 && (\n                                            <AnimateButton>\n                                                <Button variant='contained' size='large'\n                                                        onClick={(e) => handleChange(e, 1 + parseInt(value, 10))}>\n                                                    Continue\n                                                </Button>\n                                            </AnimateButton>\n                                        )}\n                                    </Grid>\n\n                                    <Grid item>\n                                        {value > 0 && (\n                                            <AnimateButton>\n                                                <Button variant='outlined' size='large'\n                                                        onClick={(e) => handleChange(e, parseInt(value, 10) - 1)}>\n                                                    Back\n                                                </Button>\n                                            </AnimateButton>\n                                        )}\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n\n                            <Grid item alignContent='end'>\n                                {value > 2 && (\n                                    <AnimateButton>\n                                        <Button color='secondary' variant='contained' size='large'\n                                                onClick={handleWorkloadUpdate}>\n                                            Update <ProgressCircularControlled display={progressLoader}/>\n                                        </Button>\n                                    </AnimateButton>\n                                )}\n                            </Grid>\n\n                        </Grid>\n                    </CardActions>\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default DailyWorkloadEdit;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-assessment/detail/index.js",["1858","1859","1860","1861","1862","1863","1864","1865","1866","1867"],"import PropTypes from 'prop-types';\nimport React, {useEffect} from 'react';\nimport {Link, useNavigate, useParams} from 'react-router-dom';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {Box, Grid, IconButton, Tab, Tabs} from '@material-ui/core';\n\n// project imports\nimport AssessmentData from './assessment-data';\nimport MainCard from 'ui-component/cards/MainCard';\nimport {gridSpacing, SHARE_INSTANCE_TYPE} from 'store/constant';\nimport caseManagerApi from 'store/api-calls/case-manager';\n\n// assets\nimport AccountCircleTwoToneIcon from '@material-ui/icons/AccountCircleTwoTone';\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\nimport {setRetrievedClientAssessmentData} from \"store/actions/caseManager/clientAssessmentActions\";\nimport {useDispatch} from \"react-redux\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\nimport IosShareOutlined  from \"@material-ui/icons/IosShareOutlined\";\nimport ShareIndex from \"../../../common/communication/share\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    accountTab: {\n        marginBottom: '24px',\n        '& a': {\n            minHeight: 'auto',\n            minWidth: '10px',\n            padding: '12px 8px',\n            marginRight: '18px',\n            color: theme.palette.grey[600],\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'center'\n        },\n        '& a.Mui-selected': {\n            color: theme.palette.primary.main\n        },\n        '& a > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px'\n        }\n    }\n}));\n\n// tabs panel\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n    return (\n        <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && (\n                <Box\n                    sx={{\n                        p: 0\n                    }}\n                >\n                    {children}\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n// tabs option\nconst tabsOption = [\n    {\n        label: 'Client',\n        icon: <DescriptionTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n    },\n    {\n        label: '-',\n        icon: <AccountCircleTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n    }\n];\n\n// ===========================|| PROFILE 1 ||=========================== //\n\nconst ClientAssessmentDetail = () => {\n    const classes = useStyles();\n    const [value, setValue] = React.useState();\n    const [assessmentDetailData, setAssessmentDetailData] = React.useState({});\n    const dispatch = useDispatch();\n    const {assessment_id} = useParams();\n    const navigate = useNavigate();\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const handleClientAssessmentEdit = () => (navigate(`/assessment/${assessment_id}/edit`));\n\n    const fetchClientAssessmentData = async () => {\n        const response = await caseManagerApi.retrieveClientAssessmentData(assessment_id)\n        if ('status' in response && response.status === 200) {\n            setAssessmentDetailData(response.data)\n            console.log(response.data)\n            dispatch(setRetrievedClientAssessmentData(response.data, assessment_id))\n        }\n    }\n\n    useEffect(() => {\n        fetchClientAssessmentData()\n    }, []);\n\n\n    return (\n        <MainCard title=\"Assessement Data\"\n                  secondary={\n                      <>\n                          <Tooltip title=\"Edit Assessment\">\n                              <IconButton color=\"secondary\" onClick={handleClientAssessmentEdit}>\n                                  <EditTwoToneIcon sx={{fontSize: '1.5rem'}}/>\n                              </IconButton>\n                          </Tooltip>\n                          <ShareIndex share_object_id={assessment_id}\n                                      instance_type={SHARE_INSTANCE_TYPE.CaseManagerClientAssessment}\n                                      followup_tooltip=\"Send Assessment Follow Up\"\n                                      referral_tooltip=\"Send Assessment Referral\"\n                          />\n                      </>\n                  }\n        >\n            <Grid container spacing={gridSpacing}>\n                <Grid item xs={12}>\n                    <AssessmentData assessmentDetailData={assessmentDetailData}/>\n                </Grid>\n            </Grid>\n        </MainCard>\n    );\n};\n\nexport default ClientAssessmentDetail;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/list/index.js",["1868","1869","1870","1871","1872","1873","1874","1875","1876","1877","1878","1879"],"import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {listReferralsByReviewBoardID} from 'store/actions/reviewBoard/referralActions';\nimport {useNavigate} from 'react-router-dom';\n\n// material-ui\nimport {makeStyles, useTheme} from '@material-ui/styles';\nimport {\n    CardContent,\n    Checkbox,\n    Fab,\n    Grid,\n    IconButton,\n    InputAdornment,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TablePagination,\n    TableRow,\n    TableSortLabel,\n    TextField,\n    Toolbar,\n    Tooltip,\n    Typography\n} from '@material-ui/core';\nimport {visuallyHidden} from '@material-ui/utils';\n\n// third-party\nimport clsx from 'clsx';\n\n// project imports\n\nimport MainCard from 'ui-component/cards/MainCard';\n\n// assets\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterListTwoTone';\nimport PrintIcon from '@material-ui/icons/PrintTwoTone';\nimport FileCopyIcon from '@material-ui/icons/FileCopyTwoTone';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddIcon from '@material-ui/icons/AddTwoTone';\nimport MoreHorizOutlinedIcon from '@material-ui/icons/MoreHorizOutlined';\nimport {useContext, useEffect} from \"react\";\n\n// axios api\nimport caseManagerApi from 'store/api-calls/case-manager';\nimport JWTContext from \"contexts/JWTContext\";\nimport VisibilityTwoToneIcon from \"@material-ui/icons/VisibilityTwoTone\";\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\nimport {listDailyWorkLoad} from \"../../../../../store/actions/caseManager/dailyWorkloadActions\";\n\n// table data\nfunction createData(id, name, category, price, date, qty) {\n    return {id, name, category, price, date, qty};\n}\n\n// table sort\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\n// table header options\nconst headCells = [\n    {\n        id: 'daily_workload_date',\n        numeric: false,\n        label: 'Workload Date',\n        align: 'center'\n    },\n    {\n        id: 'client_caseload_casemanagement_number_clients',\n        numeric: false,\n        label: '# Case Management Clients',\n        align: 'center'\n    },\n    {\n        id: 'client_caseload_regular_number_clients',\n        numeric: false,\n        label: '# Regular Clients',\n        align: 'center'\n    },\n];\n\n// style const\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%'\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2)\n    },\n    table: {\n        minWidth: 750\n    },\n    sortSpan: visuallyHidden\n}));\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        padding: 0,\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1)\n    },\n    highlight: {\n        color: theme.palette.secondary.main\n    },\n    title: {\n        flex: '1 1 100%'\n    }\n}));\n\n// ===========================|| TABLE HEADER ||=========================== //\n\nfunction EnhancedTableHead({\n                               classes,\n                               onSelectAllClick,\n                               order,\n                               orderBy,\n                               numSelected,\n                               rowCount,\n                               onRequestSort,\n                               theme,\n                               selected\n                           }) {\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                {numSelected > 0 && (\n                    <TableCell padding=\"none\" colSpan={7}>\n                        <EnhancedTableToolbar numSelected={selected.length}/>\n                    </TableCell>\n                )}\n                {numSelected <= 0 &&\n                headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.align}\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span\n                                    className={classes.sortSpan}>{order === 'desc' ? 'sorted descending' : 'sorted ascending'}</span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n                {numSelected <= 0 && (\n                    <TableCell sortDirection={false} align=\"center\" sx={{pr: 3}}>\n                        <Typography\n                            variant=\"subtitle1\"\n                            sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                        >\n                            Action\n                        </Typography>\n                    </TableCell>\n                )}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    theme: PropTypes.object,\n    selected: PropTypes.array,\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired\n};\n\n// ===========================|| TABLE HEADER TOOLBAR ||=========================== //\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const {numSelected} = props;\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"h4\" component=\"div\">\n                    {numSelected} Selected\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Nutrition\n                </Typography>\n            )}\n\n            {numSelected > 0 && (\n                <Tooltip title=\"Delete\">\n                    <IconButton>\n                        <DeleteIcon fontSize=\"small\"/>\n                    </IconButton>\n                </Tooltip>\n            )}\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired\n};\n\n// ===========================|| PRODUCT LIST ||=========================== //\n\nconst ReviewBoardReferralList = () => {\n    const userAuthContext = React.useContext(JWTContext)\n    const {\n        user: {\n            user_type_pk: caseManagerUUID\n        }\n    } = userAuthContext;\n\n    const navigate = useNavigate();\n    const reviewBoardRedux = useSelector(state => state.reviewBoard)\n    const dispatch = useDispatch();\n\n    const classes = useStyles();\n    const theme = useTheme();\n\n    // show a right sidebar when clicked on new product\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpenDialog = () => {\n        navigate('/workload/add');\n    };\n    const handleCloseDialog = () => {\n        setOpen(false);\n    };\n\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [search, setSearch] = React.useState('');\n    const [rows, setRows] = React.useState([]);\n    const [rowsInitial, setRowsInitial] = React.useState([]);\n\n    const handleSearch = (event) => {\n        const newString = event.target.value;\n        setSearch(newString);\n\n        if (newString) {\n            const newRows = rows.filter((row) => {\n                let matches = true;\n\n                const properties = ['daily_workload_date'];\n                let containsQuery = false;\n\n                properties.forEach((property) => {\n                    if (row[property].toString().toLowerCase().includes(newString.toString().toLowerCase())) {\n                        containsQuery = true;\n                    }\n                });\n\n                if (!containsQuery) {\n                    matches = false;\n                }\n                return matches;\n            });\n            setRows(newRows);\n        } else {\n            setRows(rowsInitial);\n        }\n    };\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelectedId = rows.map((n) => n.name);\n            setSelected(newSelectedId);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, workloadUUID) => {\n        navigate(`/workload/${workloadUUID}`)\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const fetchListData = async () => {\n        const response = await caseManagerApi.listDailyWorkloadByCaseManagerID(caseManagerUUID);\n        if ('result' in response && response.result === true) {\n            setRows(response.data)\n            setRowsInitial(response.data)\n            dispatch(listDailyWorkLoad(response.data))\n        }\n    }\n\n    useEffect(() => {\n        // eslint-disable-next-line camelcase\n        fetchListData()\n    }, [])\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n    const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n    return (\n        <MainCard title=\"My Daily Workload\" content={false}>\n            <CardContent>\n                <Grid container justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\n                    <Grid item xs={8} sm={6}>\n                        <TextField\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <SearchIcon fontSize=\"small\"/>\n                                    </InputAdornment>\n                                )\n                            }}\n                            onChange={handleSearch}\n                            placeholder=\"Search Workload\"\n                            value={search}\n                            size=\"small\"\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={6} sx={{textAlign: 'right'}}>\n                        <Tooltip title=\"Copy\">\n                            <IconButton>\n                                <FileCopyIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Print\">\n                            <IconButton>\n                                <PrintIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Filter\">\n                            <IconButton>\n                                <FilterListIcon/>\n                            </IconButton>\n                        </Tooltip>\n\n                        {/* product add & dialog */}\n                        <Tooltip title=\"Add Workload\">\n                            <Fab\n                                color=\"primary\"\n                                size=\"small\"\n                                onClick={handleClickOpenDialog}\n                                sx={{boxShadow: 'none', ml: 1, width: '32px', height: '32px', minHeight: '32px'}}\n                            >\n                                <AddIcon fontSize=\"small\"/>\n                            </Fab>\n                        </Tooltip>\n\n                    </Grid>\n                </Grid>\n            </CardContent>\n\n            {/* table */}\n            <TableContainer>\n                <Table className={classes.table} aria-labelledby=\"tableTitle\">\n                    <EnhancedTableHead\n                        classes={classes}\n                        numSelected={selected.length}\n                        order={order}\n                        orderBy={orderBy}\n                        onSelectAllClick={handleSelectAllClick}\n                        onRequestSort={handleRequestSort}\n                        rowCount={rows.length}\n                        theme={theme}\n                        selected={selected}\n                    />\n                    <TableBody>\n                        {stableSort(rows, getComparator(order, orderBy))\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map((row, index) => {\n                                const labelId = `enhanced-table-checkbox-${index}`;\n\n                                return (\n                                    <TableRow\n                                        hover\n                                        role=\"checkbox\"\n                                        tabIndex={-1}\n                                        key={index}\n                                    >\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"center\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row.daily_workload_date}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"center\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row.client_caseload_casemanagement_number_clients}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"center\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row.client_caseload_regular_number_clients}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell align=\"center\" sx={{pr: 3}}>\n                                            <IconButton\n                                                color=\"primary\"\n                                                onClick={(event) => handleClick(event, row.daily_workload_id)}\n                                            >\n                                                <VisibilityTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                                            </IconButton>\n                                            <IconButton color=\"secondary\">\n                                                <EditTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                                            </IconButton>\n                                        </TableCell>\n\n\n                                    </TableRow>\n                                );\n                            })}\n                        {emptyRows > 0 && (\n                            <TableRow\n                                style={{\n                                    height: 53 * emptyRows\n                                }}\n                            >\n                                <TableCell colSpan={6}/>\n                            </TableRow>\n                        )}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n\n            {/* table pagination */}\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </MainCard>\n    );\n};\n\nexport default ReviewBoardReferralList;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/detail/index.js",["1880","1881","1882","1883","1884","1885","1886","1887","1888","1889","1890","1891","1892","1893","1894","1895","1896","1897","1898","1899","1900","1901","1902"],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-interventions/add/index.js",["1903","1904"],"import PropTypes from 'prop-types';\nimport React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\n// material-ui\nimport { makeStyles } from '@material-ui/styles';\nimport { Button, CardActions, CardContent, Divider, Grid, Tab, Tabs, Typography } from '@material-ui/core';\n\n// project imports\nimport ClientSelect from './forms/client';\nimport InterventionDetails from './forms/intervention-details';\nimport InterventionAssessmentForms from './forms/assessment-forms';\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport { gridSpacing } from 'store/constant';\n\n// assets\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\nimport JWTContext from \"contexts/JWTContext\";\nimport {\n    setInterventionCaseManagerDetail,\n    setInterventionClientDetail\n} from \"store/actions/caseManager/clientInterventionActions\";\nimport caseManagerApi from \"store/api-calls/case-manager\";\nimport {SNACKBAR_OPEN} from \"store/actionTypes\";\nimport ProgressCircularControlled from \"../../../../ui/ProgressCircularControlled\";\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    profileTab: {\n        '& .MuiTabs-flexContainer': {\n            borderBottom: 'none'\n        },\n        '& button': {\n            color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[600],\n            minHeight: 'auto',\n            minWidth: '100%',\n            padding: '12px 16px',\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n            textAlign: 'left',\n            justifyContent: 'flex-start'\n        },\n        '& button.Mui-selected': {\n            color: theme.palette.primary.main,\n            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50]\n        },\n        '& button > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px',\n            marginTop: '10px',\n            height: '20px',\n            width: '20px'\n        },\n        '& button > div > span': {\n            display: 'block'\n        },\n        '& > div > span': {\n            display: 'none'\n        }\n    },\n    cardPanels: {\n        borderLeft: '1px solid',\n        borderLeftColor: theme.palette.mode === 'dark' ? '#333d5e' : '#eeeeee',\n        height: '100%'\n    }\n}));\n\n// tabs\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div role='tabpanel' hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && <div>{children}</div>}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n// tabs option\nconst tabsOption = [\n    {\n        label: 'Client Select',\n        icon: <DescriptionTwoToneIcon />,\n        caption: 'Select a client for intervention'\n    },\n    {\n        label: 'Intervention Details',\n        icon: <DescriptionTwoToneIcon />,\n        caption: 'Fill in the intervention details'\n    },\n    {\n        label: 'Assessment Forms',\n        icon: <DescriptionTwoToneIcon />,\n        caption: 'Add Assessment files'\n    }\n];\n\n\nconst ClientIntervention = () => {\n    const classes = useStyles();\n    const customization = useSelector((state) => state.customization);\n    const [value, setValue] = React.useState(0);\n    const dispatch = useDispatch();\n    const [progressLoader, setProgressLoader] = React.useState(false);\n\n    const clientInterventionData = useSelector(state => state.caseManager.clientIntervention.add)\n    const clientInterventionAddData = clientInterventionData.intervention\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n    const {\n        user: {\n            user_type_pk: caseManagerUUID\n        }\n    } = React.useContext(JWTContext);\n\n    useEffect(() => {\n        dispatch(setInterventionCaseManagerDetail(caseManagerUUID))\n    }, []);\n\n    const handleSubmit = async (event) => {\n        setProgressLoader(true);  // Call this to show the loader for the current tab\n\n        // Make a new helper method to validate if all the required fields are non empty\n\n        // temporary fix to put case manager id in the data\n\n        const response = await caseManagerApi.createClientIntervention(clientInterventionData);\n\n        if (response && 'result' in response) {\n            if (response.result === true) {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Client Intervention has been successfully added.',\n                    variant: 'alert',\n                    alertSeverity: 'success', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            } else {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Client Intervention could not be added. Please try again',\n                    variant: 'alert',\n                    alertSeverity: 'error', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            }\n        } else {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Client Intervention could not be added. Please try again',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n\n        setProgressLoader(false);\n    }\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12}>\n                <MainCard title='Client Intervention' content={false}>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={12} lg={3}>\n                            <CardContent>\n                                <Tabs\n                                    value={value}\n                                    onChange={handleChange}\n                                    orientation='vertical'\n                                    className={classes.profileTab}\n                                    variant='scrollable'\n                                    sx={{\n                                        '& button': {\n                                            borderRadius: `${customization.borderRadius}px`\n                                        }\n                                    }}\n                                >\n                                    {tabsOption.map((tab, index) => (\n                                        <Tab\n                                            key={index}\n                                            icon={tab.icon}\n                                            label={\n                                                <Grid container direction='column'>\n                                                    <Typography sx={{ textTransform: 'capitalize' }} variant='subtitle1'\n                                                                color='inherit'>\n                                                        {tab.label}\n                                                    </Typography>\n                                                    <Typography component='div' variant='caption'\n                                                                sx={{ textTransform: 'capitalize' }}>\n                                                        {tab.caption}\n                                                    </Typography>\n                                                </Grid>\n                                            }\n                                            {...a11yProps(index)}\n                                        />\n                                    ))}\n                                </Tabs>\n                            </CardContent>\n                        </Grid>\n                        <Grid item xs={12} lg={8}>\n                            <CardContent className={classes.cardPanels}>\n                                <TabPanel value={value} index={0}>\n                                    <ClientSelect setSelectedClientValueToStore={setInterventionClientDetail} storeData={clientInterventionAddData}/>\n                                </TabPanel>\n                                <TabPanel value={value} index={1}>\n                                    <InterventionDetails providerProfessionType=\"PROVIDER_TYPE_REGISTERED_NURSE\"/>\n                                </TabPanel>\n                                <TabPanel value={value} index={2}>\n                                    <InterventionAssessmentForms providerProfessionType=\"PROVIDER_TYPE_REGISTERED_NURSE\"/>\n                                </TabPanel>\n                            </CardContent>\n                        </Grid>\n                    </Grid>\n\n                    <Divider />\n\n                    <CardActions>\n                        <Grid container justifyContent='space-between' spacing={0}>\n                            <Grid item>\n                                {value > 0 && (\n                                    <AnimateButton>\n                                        <Button variant='outlined' size='large'\n                                                onClick={(e) => handleChange(e, parseInt(value, 10) - 1)}>\n                                            Back\n                                        </Button>\n                                    </AnimateButton>\n                                )}\n                            </Grid>\n                            <Grid item>\n                                {value < 2 && (\n                                    <AnimateButton>\n                                        <Button variant='contained' size='large'\n                                                onClick={(e) => handleChange(e, 1 + parseInt(value, 10))}>\n                                            Continue\n                                        </Button>\n                                    </AnimateButton>\n                                )}\n                                {value === 2 && (\n                                    <Grid container justify=\"space-around\" spacing={gridSpacing}>\n                                        <Grid item>\n                                            <ProgressCircularControlled display={progressLoader}/>\n                                        </Grid>\n                                        <Grid item>\n                                            <AnimateButton>\n                                                <Button variant='contained' size='large'\n                                                        onClick={handleSubmit}>\n                                                    Save\n                                                </Button>\n                                            </AnimateButton>\n                                        </Grid>\n                                    </Grid>\n                                )}\n                            </Grid>\n                        </Grid>\n                    </CardActions>\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ClientIntervention;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-interventions/list/index.js",["1905","1906","1907","1908","1909","1910","1911","1912","1913","1914"],"import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {listReferralsByReviewBoardID} from 'store/actions/reviewBoard/referralActions';\nimport {useNavigate} from 'react-router-dom';\n\n// material-ui\nimport {makeStyles, useTheme} from '@material-ui/styles';\nimport {\n    CardContent,\n    Checkbox,\n    Fab,\n    Grid,\n    IconButton,\n    InputAdornment,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TablePagination,\n    TableRow,\n    TableSortLabel,\n    TextField,\n    Toolbar,\n    Tooltip,\n    Typography\n} from '@material-ui/core';\nimport {visuallyHidden} from '@material-ui/utils';\n\n// third-party\nimport clsx from 'clsx';\n\n// project imports\n\nimport MainCard from 'ui-component/cards/MainCard';\n\n// assets\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterListTwoTone';\nimport PrintIcon from '@material-ui/icons/PrintTwoTone';\nimport FileCopyIcon from '@material-ui/icons/FileCopyTwoTone';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddIcon from '@material-ui/icons/AddTwoTone';\nimport MoreHorizOutlinedIcon from '@material-ui/icons/MoreHorizOutlined';\nimport {useContext, useEffect} from \"react\";\n\n// axios api\nimport caseManagerApi from 'store/api-calls/case-manager';\nimport JWTContext from \"contexts/JWTContext\";\nimport VisibilityTwoToneIcon from \"@material-ui/icons/VisibilityTwoTone\";\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\nimport {listCaseManagerClientAssessment} from \"store/actions/caseManager/clientAssessmentActions\";\nimport {listCaseManagerClientInterventions} from \"../../../../../store/actions/caseManager/clientInterventionActions\";\n\n// table data\nfunction createData(id, name, category, price, date, qty) {\n    return {id, name, category, price, date, qty};\n}\n\n// table sort\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\n// table header options\nconst headCells = [\n    {\n        id: 'intervention_date',\n        numeric: false,\n        label: 'Intervention Date',\n        align: 'center'\n    },\n    {\n        id: 'intervention_client',\n        numeric: false,\n        label: 'Client',\n        align: 'left'\n    },\n    {\n        id: 'intervention_total_time',\n        numeric: false,\n        label: 'Total Time Spent',\n        align: 'left'\n    },\n];\n\n// style const\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%'\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2)\n    },\n    table: {\n        minWidth: 750\n    },\n    sortSpan: visuallyHidden\n}));\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        padding: 0,\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1)\n    },\n    highlight: {\n        color: theme.palette.secondary.main\n    },\n    title: {\n        flex: '1 1 100%'\n    }\n}));\n\n// ===========================|| TABLE HEADER ||=========================== //\n\nfunction EnhancedTableHead({\n                               classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort, theme,\n                               selected\n                           }) {\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                {numSelected > 0 && (\n                    <TableCell padding=\"none\" colSpan={7}>\n                        <EnhancedTableToolbar numSelected={selected.length}/>\n                    </TableCell>\n                )}\n                {numSelected <= 0 &&\n                headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.align}\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span\n                                    className={classes.sortSpan}>{order === 'desc' ? 'sorted descending' : 'sorted ascending'}</span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n                {numSelected <= 0 && (\n                    <TableCell sortDirection={false} align=\"center\" sx={{pr: 3}}>\n                        <Typography\n                            variant=\"subtitle1\"\n                            sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                        >\n                            Action\n                        </Typography>\n                    </TableCell>\n                )}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    theme: PropTypes.object,\n    selected: PropTypes.array,\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired\n};\n\n// ===========================|| TABLE HEADER TOOLBAR ||=========================== //\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const {numSelected} = props;\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"h4\" component=\"div\">\n                    {numSelected} Selected\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Nutrition\n                </Typography>\n            )}\n\n            {numSelected > 0 && (\n                <Tooltip title=\"Delete\">\n                    <IconButton>\n                        <DeleteIcon fontSize=\"small\"/>\n                    </IconButton>\n                </Tooltip>\n            )}\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired\n};\n\n// ===========================|| PRODUCT LIST ||=========================== //\n\nconst CaseManagerClientInterventionList = () => {\n    const userAuthContext = React.useContext(JWTContext)\n    const {\n        user: {\n            user_type_pk: caseManagerUUID\n        }\n    } = userAuthContext;\n\n    const navigate = useNavigate();\n    const reviewBoardRedux = useSelector(state => state.reviewBoard)\n    const dispatch = useDispatch();\n\n    const classes = useStyles();\n    const theme = useTheme();\n\n    const handleClickOpenDialog = () => {\n        navigate('/intervention/add');\n    };\n\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [search, setSearch] = React.useState('');\n    const [rows, setRows] = React.useState([]);\n    const [rowsInitial, setRowsInitial] = React.useState([]);\n\n    const handleSearch = (event) => {\n        const newString = event.target.value;\n        setSearch(newString);\n\n        if (newString) {\n            const newRows = rows.filter((row) => {\n                let matches = true;\n\n                const properties = ['assessment_date', 'client_fullname'];\n                let containsQuery = false;\n\n                properties.forEach((property) => {\n                    if (row[property].toString().toLowerCase().includes(newString.toString().toLowerCase())) {\n                        containsQuery = true;\n                    }\n                });\n\n                if (!containsQuery) {\n                    matches = false;\n                }\n                return matches;\n            });\n            setRows(newRows);\n        } else {\n            setRows(rowsInitial);\n        }\n    };\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelectedId = rows.map((n) => n.name);\n            setSelected(newSelectedId);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, interventionUUID) => {\n        navigate(`/intervetion/${interventionUUID}`)\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const fetchListData = async () => {\n        const response = await caseManagerApi.listClientInterventionByCaseManagerID(caseManagerUUID);\n        if ('result' in response && response.result === true) {\n            setRows(response.data)\n            setRowsInitial(response.data)\n            dispatch(listCaseManagerClientInterventions(response.data))\n        } else {\n            // console.log(\"Could not fetch list\")\n            setRows([])\n            setRowsInitial([])\n        }\n    }\n\n    useEffect(() => {\n        fetchListData()\n    }, [])\n\n    const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n    return (\n        <MainCard title=\"My Client Interventions\" content={false}>\n            <CardContent>\n                <Grid container justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\n                    <Grid item xs={8} sm={6}>\n                        <TextField\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <SearchIcon fontSize=\"small\"/>\n                                    </InputAdornment>\n                                )\n                            }}\n                            onChange={handleSearch}\n                            placeholder=\"Search Workload\"\n                            value={search}\n                            size=\"small\"\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={6} sx={{textAlign: 'right'}}>\n                        <Tooltip title=\"Copy\">\n                            <IconButton>\n                                <FileCopyIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Print\">\n                            <IconButton>\n                                <PrintIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Filter\">\n                            <IconButton>\n                                <FilterListIcon/>\n                            </IconButton>\n                        </Tooltip>\n\n                        {/* product add & dialog */}\n                        <Tooltip title=\"Add Assessment\">\n                            <Fab\n                                color=\"primary\"\n                                size=\"small\"\n                                onClick={handleClickOpenDialog}\n                                sx={{boxShadow: 'none', ml: 1, width: '32px', height: '32px', minHeight: '32px'}}\n                            >\n                                <AddIcon fontSize=\"small\"/>\n                            </Fab>\n                        </Tooltip>\n\n                    </Grid>\n                </Grid>\n            </CardContent>\n\n            {/* table */}\n            <TableContainer>\n                <Table className={classes.table} aria-labelledby=\"tableTitle\">\n                    <EnhancedTableHead\n                        classes={classes}\n                        numSelected={selected.length}\n                        order={order}\n                        orderBy={orderBy}\n                        onSelectAllClick={handleSelectAllClick}\n                        onRequestSort={handleRequestSort}\n                        rowCount={rows.length}\n                        theme={theme}\n                        selected={selected}\n                    />\n                    <TableBody>\n                        {stableSort(rows, getComparator(order, orderBy))\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map((row, index) => {\n                                const labelId = `enhanced-table-checkbox-${index}`;\n\n                                return (\n                                    <TableRow\n                                        hover\n                                        role=\"checkbox\"\n                                        tabIndex={-1}\n                                        key={index}\n                                    >\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"center\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row.date}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"left\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row?.client?.user?.fullname}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"left\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row?.total_time}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n\n                                        <TableCell align=\"center\" sx={{pr: 3}}>\n                                            <IconButton\n                                                color=\"primary\"\n                                                onClick={(event) => handleClick(event, row.intervention_id)}\n                                            >\n                                                <VisibilityTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                                            </IconButton>\n                                            <IconButton color=\"secondary\">\n                                                <EditTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                                            </IconButton>\n                                        </TableCell>\n\n\n                                    </TableRow>\n                                );\n                            })}\n                        {emptyRows > 0 && (\n                            <TableRow\n                                style={{\n                                    height: 53 * emptyRows\n                                }}\n                            >\n                                <TableCell colSpan={6}/>\n                            </TableRow>\n                        )}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n\n            {/* table pagination */}\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </MainCard>\n    );\n};\n\nexport default CaseManagerClientInterventionList;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/external-partner/client-interventions/list/index.js",["1915","1916","1917","1918","1919","1920","1921"],"import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {useNavigate} from 'react-router-dom';\n\n// material-ui\nimport {makeStyles, useTheme} from '@material-ui/styles';\nimport {\n    CardContent,\n    Checkbox,\n    Fab,\n    Grid,\n    IconButton,\n    InputAdornment,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TablePagination,\n    TableRow,\n    TableSortLabel,\n    TextField,\n    Toolbar,\n    Tooltip,\n    Typography\n} from '@material-ui/core';\nimport {visuallyHidden} from '@material-ui/utils';\n\n// third-party\nimport clsx from 'clsx';\n\n// project imports\n\nimport MainCard from 'ui-component/cards/MainCard';\n\n// assets\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterListTwoTone';\nimport PrintIcon from '@material-ui/icons/PrintTwoTone';\nimport FileCopyIcon from '@material-ui/icons/FileCopyTwoTone';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddIcon from '@material-ui/icons/AddTwoTone';\nimport {useContext, useEffect} from \"react\";\n\n// axios api\nimport externalPartnerApi from 'store/api-calls/external-partner';\nimport JWTContext from \"contexts/JWTContext\";\nimport VisibilityTwoToneIcon from \"@material-ui/icons/VisibilityTwoTone\";\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\nimport {listExternalPartnerClientInterventions} from \"store/actions/externalPartner/clientInterventionActions\";\n\n// table data\nfunction createData(id, name, category, price, date, qty) {\n    return {id, name, category, price, date, qty};\n}\n\n// table sort\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\n// table header options\nconst headCells = [\n    {\n        id: 'intervention_date',\n        numeric: false,\n        label: 'Intervention Date',\n        align: 'center'\n    },\n    {\n        id: 'intervention_client',\n        numeric: false,\n        label: 'Client',\n        align: 'left'\n    },\n    {\n        id: 'assessment_status',\n        numeric: false,\n        label: 'Intervention Type',\n        align: 'left'\n    },\n];\n\n// style const\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%'\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2)\n    },\n    table: {\n        minWidth: 750\n    },\n    sortSpan: visuallyHidden\n}));\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        padding: 0,\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1)\n    },\n    highlight: {\n        color: theme.palette.secondary.main\n    },\n    title: {\n        flex: '1 1 100%'\n    }\n}));\n\n// ===========================|| TABLE HEADER ||=========================== //\n\nfunction EnhancedTableHead({\n                               classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort, theme,\n                               selected\n                           }) {\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                {numSelected > 0 && (\n                    <TableCell padding=\"none\" colSpan={7}>\n                        <EnhancedTableToolbar numSelected={selected.length}/>\n                    </TableCell>\n                )}\n                {numSelected <= 0 &&\n                headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.align}\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span\n                                    className={classes.sortSpan}>{order === 'desc' ? 'sorted descending' : 'sorted ascending'}</span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n                {numSelected <= 0 && (\n                    <TableCell sortDirection={false} align=\"center\" sx={{pr: 3}}>\n                        <Typography\n                            variant=\"subtitle1\"\n                            sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                        >\n                            Action\n                        </Typography>\n                    </TableCell>\n                )}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    theme: PropTypes.object,\n    selected: PropTypes.array,\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired\n};\n\n// ===========================|| TABLE HEADER TOOLBAR ||=========================== //\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const {numSelected} = props;\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"h4\" component=\"div\">\n                    {numSelected} Selected\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Nutrition\n                </Typography>\n            )}\n\n            {numSelected > 0 && (\n                <Tooltip title=\"Delete\">\n                    <IconButton>\n                        <DeleteIcon fontSize=\"small\"/>\n                    </IconButton>\n                </Tooltip>\n            )}\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired\n};\n\n// ===========================|| PRODUCT LIST ||=========================== //\n\nconst CaseManagerClientInterventionList = () => {\n    const userAuthContext = React.useContext(JWTContext)\n    const {\n        user: {\n            user_type_pk: externalPartnerUUID\n        }\n    } = userAuthContext;\n\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n\n    const classes = useStyles();\n    const theme = useTheme();\n\n    const handleClickOpenDialog = () => {\n        navigate('/intervention/add');\n    };\n\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [search, setSearch] = React.useState('');\n    const [rows, setRows] = React.useState([]);\n    const [rowsInitial, setRowsInitial] = React.useState([]);\n\n    const handleSearch = (event) => {\n        const newString = event.target.value;\n        setSearch(newString);\n\n        if (newString) {\n            const newRows = rows.filter((row) => {\n                let matches = true;\n\n                const properties = ['intervention_date', 'client_fullname'];\n                let containsQuery = false;\n\n                properties.forEach((property) => {\n                    if (row[property].toString().toLowerCase().includes(newString.toString().toLowerCase())) {\n                        containsQuery = true;\n                    }\n                });\n\n                if (!containsQuery) {\n                    matches = false;\n                }\n                return matches;\n            });\n            setRows(newRows);\n        } else {\n            setRows(rowsInitial);\n        }\n    };\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelectedId = rows.map((n) => n.name);\n            setSelected(newSelectedId);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, interventionUUID) => {\n        navigate(`/intervention/${interventionUUID}`)\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const fetchListData = async () => {\n        const response = await externalPartnerApi.listClientInterventionByCaseManagerID(externalPartnerUUID);\n        if ('result' in response && response.result === true) {\n            setRows(response.data)\n            setRowsInitial(response.data)\n            dispatch(listExternalPartnerClientInterventions(response.data))\n        } else {\n            // console.log(\"Could not fetch list\")\n            setRows([])\n            setRowsInitial([])\n        }\n    }\n\n    useEffect(() => {\n        fetchListData()\n    }, [])\n\n    const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n    return (\n        <MainCard title=\"My Client Interventions\" content={false}>\n            <CardContent>\n                <Grid container justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\n                    <Grid item xs={8} sm={6}>\n                        <TextField\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <SearchIcon fontSize=\"small\"/>\n                                    </InputAdornment>\n                                )\n                            }}\n                            onChange={handleSearch}\n                            placeholder=\"Search Workload\"\n                            value={search}\n                            size=\"small\"\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={6} sx={{textAlign: 'right'}}>\n                        <Tooltip title=\"Copy\">\n                            <IconButton>\n                                <FileCopyIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Print\">\n                            <IconButton>\n                                <PrintIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Filter\">\n                            <IconButton>\n                                <FilterListIcon/>\n                            </IconButton>\n                        </Tooltip>\n\n                        {/* product add & dialog */}\n                        <Tooltip title=\"Add Assessment\">\n                            <Fab\n                                color=\"primary\"\n                                size=\"small\"\n                                onClick={handleClickOpenDialog}\n                                sx={{boxShadow: 'none', ml: 1, width: '32px', height: '32px', minHeight: '32px'}}\n                            >\n                                <AddIcon fontSize=\"small\"/>\n                            </Fab>\n                        </Tooltip>\n\n                    </Grid>\n                </Grid>\n            </CardContent>\n\n            {/* table */}\n            <TableContainer>\n                <Table className={classes.table} aria-labelledby=\"tableTitle\">\n                    <EnhancedTableHead\n                        classes={classes}\n                        numSelected={selected.length}\n                        order={order}\n                        orderBy={orderBy}\n                        onSelectAllClick={handleSelectAllClick}\n                        onRequestSort={handleRequestSort}\n                        rowCount={rows.length}\n                        theme={theme}\n                        selected={selected}\n                    />\n                    <TableBody>\n                        {stableSort(rows, getComparator(order, orderBy))\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map((row, index) => {\n                                const labelId = `enhanced-table-checkbox-${index}`;\n\n                                return (\n                                    <TableRow\n                                        hover\n                                        role=\"checkbox\"\n                                        tabIndex={-1}\n                                        key={index}\n                                    >\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"center\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row.intervention_date}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"left\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row?.client?.user?.fullname}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"left\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row?.assessment_status}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n\n                                        <TableCell align=\"center\" sx={{pr: 3}}>\n                                            <IconButton\n                                                color=\"primary\"\n                                                onClick={(event) => handleClick(event, row.intervention_id)}\n                                            >\n                                                <VisibilityTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                                            </IconButton>\n                                            <IconButton color=\"secondary\">\n                                                <EditTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                                            </IconButton>\n                                        </TableCell>\n\n\n                                    </TableRow>\n                                );\n                            })}\n                        {emptyRows > 0 && (\n                            <TableRow\n                                style={{\n                                    height: 53 * emptyRows\n                                }}\n                            >\n                                <TableCell colSpan={6}/>\n                            </TableRow>\n                        )}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n\n            {/* table pagination */}\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </MainCard>\n    );\n};\n\nexport default CaseManagerClientInterventionList;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/client/personalInformationActions.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-assessment/add/index.js",["1922","1923","1924","1925"],"import PropTypes from 'prop-types';\nimport React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {Button, CardActions, CardContent, Divider, Grid, Tab, Tabs, Typography} from '@material-ui/core';\n\n// project imports\nimport ClientSelect from './forms/client';\nimport ExistingExtraMural from './forms/conditional-display/existing-extra-mural';\nimport NewExtraMural from './forms/conditional-display/new-extra-mural';\nimport ClientReasessment from './forms/conditional-display/client-reassessment';\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport {gridSpacing} from 'store/constant';\n\n// assets\nimport PersonOutlineTwoToneIcon from '@material-ui/icons/PersonOutlineTwoTone';\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\nimport CreditCardTwoToneIcon from '@material-ui/icons/CreditCardTwoTone';\nimport VpnKeyTwoToneIcon from '@material-ui/icons/VpnKeyTwoTone';\nimport {setDailyWorkLoadDetails} from \"store/actions/caseManager/dailyWorkloadActions\";\nimport caseManagerApi from \"store/api-calls/case-manager\";\nimport ProgressCircularControlled from 'views/ui/ProgressCircularControlled';\nimport {SNACKBAR_OPEN} from \"store/actionTypes\";\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    profileTab: {\n        '& .MuiTabs-flexContainer': {\n            borderBottom: 'none'\n        },\n        '& button': {\n            color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[600],\n            minHeight: 'auto',\n            minWidth: '100%',\n            padding: '12px 16px',\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n            textAlign: 'left',\n            justifyContent: 'flex-start'\n        },\n        '& button.Mui-selected': {\n            color: theme.palette.primary.main,\n            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50]\n        },\n        '& button > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px',\n            marginTop: '10px',\n            height: '20px',\n            width: '20px'\n        },\n        '& button > div > span': {\n            display: 'block'\n        },\n        '& > div > span': {\n            display: 'none'\n        }\n    },\n    cardPanels: {\n        borderLeft: '1px solid',\n        borderLeftColor: theme.palette.mode === 'dark' ? '#333d5e' : '#eeeeee',\n        height: '100%'\n    }\n}));\n\n// tabs\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <div role='tabpanel' hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && <div>{children}</div>}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n// tabs option\nconst tabsOption = [];\n\n// ===========================|| PROFILE 2 ||=========================== //\n\nconst ClientAssessment = () => {\n    const classes = useStyles();\n    const customization = useSelector((state) => state.customization);\n    const [value, setValue] = React.useState(0);\n    const [progressLoader, setProgressLoader] = React.useState(false);\n\n    // Redux\n    const clientAssessmentStore = useSelector(state => state.caseManager.clientAssessment)\n    const dispatch = useDispatch();\n    const clientAssessmentTypeStatus = clientAssessmentStore.add.assessment.assessment_status;\n    const clientAssessmentAddData = clientAssessmentStore.add;\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const prepareAssessmentRequestData = (clientAssessmentAddData) => {\n        let requestData = {}\n        switch (clientAssessmentTypeStatus) {\n            case 'NEW_CASE_CLIENT_EXISTING_EMC_NO_REASSESS':\n                requestData = {\n                    assessment: {\n                        ...clientAssessmentAddData.assessment\n                    },\n                    assessment_type_data: {\n                        ...clientAssessmentAddData.assessment_type_data.existing_assessment.data\n                    },\n                    assessment_type_forms: {\n                        ...clientAssessmentAddData.assessment_type_forms.existing_assessment\n                    }\n                }\n                break;\n            case 'NEW_CASE_CLIENT_EXISTING_EMC_REASSESS':\n                requestData = {\n                    assessment: {\n                        ...clientAssessmentAddData.assessment\n                    },\n                    assessment_type_data: {\n                        existing_assessment: {\n                            ...clientAssessmentAddData.assessment_type_data.existing_assessment,\n                            assessment_type_forms: {\n                                ...clientAssessmentAddData.assessment_type_forms.existing_assessment\n                            }\n                        },\n                        reassessment: {\n                            ...clientAssessmentAddData.assessment_type_data.reassessment,\n                            assessment_type_forms: {\n                                ...clientAssessmentAddData.assessment_type_forms.reassessment\n                            }\n                        }\n                    }\n                }\n                break;\n            case 'NEW_CASE_CLIENT_NEW_EXTRA_MURAL_CLIENT':\n                delete clientAssessmentAddData.assessment_type_data.existing_assessment\n                delete clientAssessmentAddData.assessment_type_forms.existing_assessment\n                delete clientAssessmentAddData.assessment_type_data.reassessment\n                delete clientAssessmentAddData.assessment_type_forms.reassessment\n\n                requestData = {\n                    assessment: {\n                        ...clientAssessmentAddData.assessment\n                    },\n                    assessment_type_data: {\n                        ...clientAssessmentAddData.assessment_type_data\n                    },\n                    assessment_type_forms:{\n                        ...clientAssessmentAddData.assessment_type_forms\n                    }\n                }\n                break;\n            case 'EXISTING_CASE_CLIENT_REASSESS':\n                requestData = {\n                    assessment: {\n                        ...clientAssessmentAddData.assessment\n                    },\n                    assessment_type_data: {\n                        ...clientAssessmentAddData.assessment_type_data.reassessment.data\n                    },\n                    assessment_type_forms: {\n                        ...clientAssessmentAddData.assessment_type_forms.reassessment\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n        return requestData;\n    }\n\n    const handleSubmit = async (event) => {\n        setProgressLoader(true);  // Call this to show the loader for the current tab\n        const response = await caseManagerApi.createClientAssessment(prepareAssessmentRequestData(clientAssessmentAddData));\n\n        if (response && 'result' in response) {\n            if (response.result === true) {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Client Assessment has been successfully added.',\n                    variant: 'alert',\n                    alertSeverity: 'success', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            } else {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Client Assessment could not be added. Please try again',\n                    variant: 'alert',\n                    alertSeverity: 'error', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            }\n        } else {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Client Assessment could not be added. Please try again',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n\n        setProgressLoader(false);\n    }\n\n\n    const setAssessmentTypeOptions = () => {\n        tabsOption.length = 0;\n\n        tabsOption.push(\n            {\n                label: 'Client',\n                icon: <DescriptionTwoToneIcon/>,\n                caption: 'Enter Client Details'\n            }\n        )\n\n        switch (clientAssessmentTypeStatus) {\n            case 'NEW_CASE_CLIENT_EXISTING_EMC_NO_REASSESS':\n                return tabsOption.push(\n                    {\n                        label: 'Existing Extra-Mural Client',\n                        icon: <DescriptionTwoToneIcon/>,\n                        caption: 'Existing Client Details'\n                    }\n                )\n\n            case 'NEW_CASE_CLIENT_EXISTING_EMC_REASSESS':\n                return tabsOption.push(\n                    {\n                        label: 'Existing Extra-Mural Client',\n                        icon: <DescriptionTwoToneIcon/>,\n                        caption: 'Existing Client Details'\n                    },\n                    {\n                        label: 'Client Re-Assessment',\n                        icon: <DescriptionTwoToneIcon/>,\n                        caption: 'Client Reassessment Details'\n                    }\n                )\n\n\n            case 'NEW_CASE_CLIENT_NEW_EXTRA_MURAL_CLIENT':\n                return tabsOption.push(\n                    {\n                        label: 'New Extra-Mural Client',\n                        icon: <CreditCardTwoToneIcon/>,\n                        caption: 'New Client Details'\n                    }\n                )\n\n            case 'EXISTING_CASE_CLIENT_REASSESS':\n                return tabsOption.push(\n                    {\n                        label: 'Client Re-Assessment',\n                        icon: <DescriptionTwoToneIcon/>,\n                        caption: 'Client Reassessment Details'\n                    }\n                )\n            default:\n                return false\n        }\n    }\n\n    const switchAssessmentTypeRender = () => {\n        switch (clientAssessmentTypeStatus) {\n            case 'NEW_CASE_CLIENT_EXISTING_EMC_NO_REASSESS':\n                return <fragment>\n                    <TabPanel value={value} index={1}>\n                        <ExistingExtraMural/>\n                    </TabPanel>\n                </fragment>\n            case 'NEW_CASE_CLIENT_EXISTING_EMC_REASSESS':\n                return <fragment>\n                    <TabPanel value={value} index={1}>\n                        <ExistingExtraMural/>\n                    </TabPanel>\n                    <TabPanel value={value} index={2}>\n                        <ClientReasessment/>\n                    </TabPanel>\n                </fragment>\n\n            case 'NEW_CASE_CLIENT_NEW_EXTRA_MURAL_CLIENT':\n                return <fragment><TabPanel value={value} index={1}>\n                    <NewExtraMural/>\n                </TabPanel>\n                </fragment>\n\n            case 'EXISTING_CASE_CLIENT_REASSESS':\n                return <fragment>\n                    <TabPanel value={value} index={1}>\n                        <ClientReasessment/>\n                    </TabPanel>\n                </fragment>\n            default:\n                return false\n        }\n    }\n\n    setAssessmentTypeOptions();\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12}>\n                <MainCard title='Client Assessment' content={false}>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={6} lg={3}>\n                            <CardContent>\n                                <Tabs\n                                    value={value}\n                                    onChange={handleChange}\n                                    orientation='vertical'\n                                    className={classes.profileTab}\n                                    variant='scrollable'\n                                    sx={{\n                                        '& button': {\n                                            borderRadius: `${customization.borderRadius}px`\n                                        }\n                                    }}\n                                >\n                                    {tabsOption.map((tab, index) => (\n                                        <Tab\n                                            key={index}\n                                            icon={tab.icon}\n                                            label={\n                                                <Grid container direction='column'>\n                                                    <Typography sx={{textTransform: 'capitalize'}} variant='subtitle1'\n                                                                color='inherit'>\n                                                        {tab.label}\n                                                    </Typography>\n                                                    <Typography component='div' variant='caption'\n                                                                sx={{textTransform: 'capitalize'}}>\n                                                        {tab.caption}\n                                                    </Typography>\n                                                </Grid>\n                                            }\n                                            {...a11yProps(index)}\n                                        />\n                                    ))}\n                                </Tabs>\n                            </CardContent>\n                        </Grid>\n                        <Grid item xs={12} lg={9}>\n                            <CardContent className={classes.cardPanels}>\n                                <TabPanel value={value} index={0}>\n                                    <ClientSelect/>\n                                </TabPanel>\n\n                                {switchAssessmentTypeRender()}\n                            </CardContent>\n                        </Grid>\n                    </Grid>\n\n                    <Divider/>\n\n                    <CardActions>\n                        <Grid container justifyContent='space-between' spacing={0}>\n                            <Grid item>\n                                {value > 0 && (\n                                    <AnimateButton>\n                                        <Button variant='outlined' size='large'\n                                                onClick={(e) => handleChange(e, parseInt(value, 10) - 1)}>\n                                            Back\n                                        </Button>\n                                    </AnimateButton>\n                                )}\n                            </Grid>\n                            <Grid item>\n                                {value < (tabsOption.length - 1) && (\n                                    <AnimateButton>\n                                        <Button variant='contained' size='large'\n                                                onClick={(e) => handleChange(e, 1 + parseInt(value, 10))}>\n                                            Continue\n                                        </Button>\n                                    </AnimateButton>\n                                )}\n                                {value === (tabsOption.length - 1) && (\n                                    <Grid container justify=\"space-around\" spacing={gridSpacing}>\n                                        <Grid item>\n                                            <ProgressCircularControlled display={progressLoader}/>\n                                        </Grid>\n                                        <Grid item>\n                                            <AnimateButton>\n                                                <Button variant='contained' size='large'\n                                                        onClick={handleSubmit}>\n                                                    Save\n                                                </Button>\n                                            </AnimateButton>\n                                        </Grid>\n                                    </Grid>\n                                )}\n                            </Grid>\n                        </Grid>\n                    </CardActions>\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ClientAssessment;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/client/clinicalInformationActions.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/external-partner/client-interventions/add/index.js",["1926","1927","1928"],"import PropTypes from 'prop-types';\nimport React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\n// material-ui\nimport { makeStyles } from '@material-ui/styles';\nimport { Button, CardActions, CardContent, Divider, Grid, Tab, Tabs, Typography } from '@material-ui/core';\n\n// project imports\nimport ClientSelect from './forms/client';\nimport PartnerInternalCommunication from './forms/partner-internal-communication';\nimport PartnerExternalCommunication from \"./forms/partner-external-communication\";\nimport InterventionAssessmentForms from './forms/assessment-forms';\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport { gridSpacing } from 'store/constant';\n\n// assets\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\nimport JWTContext from \"contexts/JWTContext\";\nimport {\n    setInterventionCaseManagerDetail,\n    setInterventionClientDetail\n} from \"store/actions/caseManager/clientInterventionActions\";\nimport caseManagerApi from \"store/api-calls/case-manager\";\nimport {SNACKBAR_OPEN} from \"store/actionTypes\";\nimport ProgressCircularControlled from \"views/ui/ProgressCircularControlled\";\n\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    profileTab: {\n        '& .MuiTabs-flexContainer': {\n            borderBottom: 'none'\n        },\n        '& button': {\n            color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[600],\n            minHeight: 'auto',\n            minWidth: '100%',\n            padding: '12px 16px',\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n            textAlign: 'left',\n            justifyContent: 'flex-start'\n        },\n        '& button.Mui-selected': {\n            color: theme.palette.primary.main,\n            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50]\n        },\n        '& button > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px',\n            marginTop: '10px',\n            height: '20px',\n            width: '20px'\n        },\n        '& button > div > span': {\n            display: 'block'\n        },\n        '& > div > span': {\n            display: 'none'\n        }\n    },\n    cardPanels: {\n        borderLeft: '1px solid',\n        borderLeftColor: theme.palette.mode === 'dark' ? '#333d5e' : '#eeeeee',\n        height: '100%'\n    }\n}));\n\n// tabs\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div role='tabpanel' hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && <div>{children}</div>}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n// tabs option\nconst tabsOption = [\n    {\n        label: 'Intervention Details',\n        icon: <DescriptionTwoToneIcon />,\n        caption: 'Select a client and a date of intervention'\n    },\n    {\n        label: 'Partner Internal Communication',\n        icon: <DescriptionTwoToneIcon />,\n        caption: 'Add Internal Communication Details'\n    },\n    {\n        label: 'Intervention Forms',\n        icon: <DescriptionTwoToneIcon />,\n        caption: 'Add Intervention files'\n    }\n];\n\n\nconst ClientIntervention = () => {\n    const classes = useStyles();\n    const customization = useSelector((state) => state.customization);\n    const [value, setValue] = React.useState(0);\n    const dispatch = useDispatch();\n    const [progressLoader, setProgressLoader] = React.useState(false);\n\n    const clientInterventionData = useSelector(state => state.externalPartner.clientIntervention.add)\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n    const {\n        user: {\n            user_type_pk: externalPartnerID\n        }\n    } = React.useContext(JWTContext);\n\n    useEffect(() => {\n        dispatch(setInterventionCaseManagerDetail(externalPartnerID))\n    }, []);\n\n    const handleSubmit = async (event) => {\n        setProgressLoader(true);  // Call this to show the loader for the current tab\n\n        // Make a new helper method to validate if all the required fields are non empty\n\n        // temporary fix to put case manager id in the data\n\n        const response = await caseManagerApi.createClientIntervention(clientInterventionData);\n\n        if (response && 'result' in response) {\n            if (response.result === true) {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Client Intervention has been successfully added.',\n                    variant: 'alert',\n                    alertSeverity: 'success', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            } else {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Client Intervention could not be added. Please try again',\n                    variant: 'alert',\n                    alertSeverity: 'error', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            }\n        } else {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Client Intervention could not be added. Please try again',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n\n        setProgressLoader(false);\n    }\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12}>\n                <MainCard title='Client Intervention' content={false}>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={12} lg={3}>\n                            <CardContent>\n                                <Tabs\n                                    value={value}\n                                    onChange={handleChange}\n                                    orientation='vertical'\n                                    className={classes.profileTab}\n                                    variant='scrollable'\n                                    sx={{\n                                        '& button': {\n                                            borderRadius: `${customization.borderRadius}px`\n                                        }\n                                    }}\n                                >\n                                    {tabsOption.map((tab, index) => (\n                                        <Tab\n                                            key={index}\n                                            icon={tab.icon}\n                                            label={\n                                                <Grid container direction='column'>\n                                                    <Typography sx={{ textTransform: 'capitalize' }} variant='subtitle1'\n                                                                color='inherit'>\n                                                        {tab.label}\n                                                    </Typography>\n                                                    <Typography component='div' variant='caption'\n                                                                sx={{ textTransform: 'capitalize' }}>\n                                                        {tab.caption}\n                                                    </Typography>\n                                                </Grid>\n                                            }\n                                            {...a11yProps(index)}\n                                        />\n                                    ))}\n                                </Tabs>\n                            </CardContent>\n                        </Grid>\n                        <Grid item xs={12} lg={8}>\n                            <CardContent className={classes.cardPanels}>\n                                <TabPanel value={value} index={0}>\n                                    <ClientSelect setSelectedClientValueToStore={setInterventionClientDetail} storeData={clientInterventionData}/>\n                                </TabPanel>\n                                <TabPanel value={value} index={1}>\n                                    <PartnerInternalCommunication />\n                                </TabPanel>\n                                <TabPanel value={value} index={2}>\n                                    <InterventionAssessmentForms providerProfessionType=\"PROVIDER_TYPE_REGISTERED_NURSE\"/>\n                                </TabPanel>\n                            </CardContent>\n                        </Grid>\n                    </Grid>\n\n                    <Divider />\n\n                    <CardActions>\n                        <Grid container justifyContent='space-between' spacing={0}>\n                            <Grid item>\n                                {value > 0 && (\n                                    <AnimateButton>\n                                        <Button variant='outlined' size='large'\n                                                onClick={(e) => handleChange(e, parseInt(value, 10) - 1)}>\n                                            Back\n                                        </Button>\n                                    </AnimateButton>\n                                )}\n                            </Grid>\n                            <Grid item>\n                                {value < 2 && (\n                                    <AnimateButton>\n                                        <Button variant='contained' size='large'\n                                                onClick={(e) => handleChange(e, 1 + parseInt(value, 10))}>\n                                            Continue\n                                        </Button>\n                                    </AnimateButton>\n                                )}\n                                {value === 2 && (\n                                    <Grid container justify=\"space-around\" spacing={gridSpacing}>\n                                        <Grid item>\n                                            <ProgressCircularControlled display={progressLoader}/>\n                                        </Grid>\n                                        <Grid item>\n                                            <AnimateButton>\n                                                <Button variant='contained' size='large'\n                                                        onClick={handleSubmit}>\n                                                    Save\n                                                </Button>\n                                            </AnimateButton>\n                                        </Grid>\n                                    </Grid>\n                                )}\n                            </Grid>\n                        </Grid>\n                    </CardActions>\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ClientIntervention;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/add/index.js",["1929","1930","1931","1932"],"import PropTypes from 'prop-types';\nimport React, {useEffect} from 'react';\nimport JWTContext from 'contexts/JWTContext';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {\n    Button,\n    CardActions,\n    CircularProgress,\n    CardContent,\n    Divider,\n    Grid,\n    Tab,\n    Tabs,\n    Typography\n} from '@material-ui/core';\n\n// project imports\nimport ClientCaseLoad from './forms/client-caseload';\nimport ProjectClinicalActivities from './forms/project-clinical-activities';\nimport ProjectActivities from './forms/project-activities';\nimport Details from './forms/details';\n\nimport {useSelector, useDispatch} from \"react-redux\";\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport {gridSpacing} from 'store/constant';\n\n// assets\nimport PersonOutlineTwoToneIcon from '@material-ui/icons/PersonOutlineTwoTone';\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\nimport CreditCardTwoToneIcon from '@material-ui/icons/CreditCardTwoTone';\nimport VpnKeyTwoToneIcon from '@material-ui/icons/VpnKeyTwoTone';\nimport {SNACKBAR_OPEN} from 'store/actionTypes';\n\nimport caseManagerApi from 'store/api-calls/case-manager';\n\nimport ProgressCircularControlled from 'views/ui/ProgressCircularControlled';\nimport {setDailyWorkLoadDetails, resetDailyWorkLoad} from \"store/actions/caseManager/dailyWorkloadActions\";\nimport {useNavigate} from \"react-router-dom\";\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    profileTab: {\n        '& .MuiTabs-flexContainer': {\n            borderBottom: 'none'\n        },\n        '& button': {\n            color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[600],\n            minHeight: 'auto',\n            minWidth: '100%',\n            padding: '12px 16px',\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n            textAlign: 'left',\n            justifyContent: 'flex-start'\n        },\n        '& button.Mui-selected': {\n            color: theme.palette.primary.main,\n            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50]\n        },\n        '& button > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px',\n            marginTop: '10px',\n            height: '20px',\n            width: '20px'\n        },\n        '& button > div > span': {\n            display: 'block'\n        },\n        '& > div > span': {\n            display: 'none'\n        }\n    },\n    cardPanels: {\n        borderLeft: '1px solid',\n        borderLeftColor: theme.palette.mode === 'dark' ? '#333d5e' : '#eeeeee',\n        height: '100%'\n    }\n}));\n\n// tabs\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <div role='tabpanel' hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && <div>{children}</div>}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n// tabs option\nconst tabsOption = [\n    {\n        label: 'Details',\n        icon: <DescriptionTwoToneIcon/>,\n        caption: 'Workload Details'\n    },\n    {\n        label: 'Client Caseload',\n        icon: <DescriptionTwoToneIcon/>,\n        caption: 'Caseload Information'\n    },\n    {\n        label: 'Project Related Clinical Activities',\n        icon: <CreditCardTwoToneIcon/>,\n        caption: 'Project Information'\n    },\n    {\n        label: 'Research Related Activities',\n        icon: <VpnKeyTwoToneIcon/>,\n        caption: 'Research Information'\n    }\n];\n\n// ===========================|| PROFILE 2 ||=========================== //\n\nconst DailyWorkload = () => {\n    const classes = useStyles();\n    const customization = useSelector((state) => state.customization);\n\n    const [value, setValue] = React.useState(0);\n    const [progressLoader, setProgressLoader] = React.useState(false);\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    const dailyWorkloadData = useSelector(state => state.caseManager.dailyWorkload.add)\n\n    const userAuthContext = React.useContext(JWTContext)\n    const {\n        user: {\n            user_type_pk: caseManagerUUID\n        }\n    } = userAuthContext;\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    useEffect(() => {\n        dispatch(resetDailyWorkLoad())\n        dispatch(setDailyWorkLoadDetails({\n            casemanager: caseManagerUUID\n        }))\n    }, []);\n\n    const handleWorkloadSubmit = async (e) => {\n        setProgressLoader(true);  // Call this to show the loader for the current tab\n        dispatch(setDailyWorkLoadDetails({\n            casemanager: caseManagerUUID\n        }))\n        const response = await caseManagerApi.createDailyWorkload(dailyWorkloadData);\n        setProgressLoader(false);\n\n        if ('result' in response === true) {\n            if (response.result === true) {\n                const createdWorkloadID = response.data.daily_workload_id;\n                navigate(`/workload/${createdWorkloadID}`)\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Your Daily Workload entry has been created.',\n                    variant: 'alert',\n                    alertSeverity: 'success', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n                dispatch(resetDailyWorkLoad())\n            } else {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Your Daily workload could not be added. Please try again',\n                    variant: 'alert',\n                    alertSeverity: 'error', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            }\n        }\n\n        if ('errors' in response === true) {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Please provide all the fields with valid values and try submit again.',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n\n        if ('status' in response === true && response.status > 200) {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Please provide all the fields with valid values and try submit again.',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n    }\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12}>\n                <MainCard title='Daily Workload ' secondary={<ProgressCircularControlled display={progressLoader}/>}\n                          content={false}>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={12} lg={4}>\n                            <CardContent>\n                                <Tabs\n                                    value={value}\n                                    onChange={handleChange}\n                                    orientation='vertical'\n                                    className={classes.profileTab}\n                                    variant='scrollable'\n                                    sx={{\n                                        '& button': {\n                                            borderRadius: `${customization.borderRadius}px`\n                                        }\n                                    }}\n                                >\n                                    {tabsOption.map((tab, index) => (\n                                        <Tab\n                                            key={index}\n                                            icon={tab.icon}\n                                            label={\n                                                <Grid container direction='column'>\n                                                    <Typography sx={{textTransform: 'capitalize'}} variant='subtitle1'\n                                                                color='inherit'>\n                                                        {tab.label}\n                                                    </Typography>\n                                                    <Typography component='div' variant='caption'\n                                                                sx={{textTransform: 'capitalize'}}>\n                                                        {tab.caption}\n                                                    </Typography>\n                                                </Grid>\n                                            }\n                                            {...a11yProps(index)}\n                                        />\n                                    ))}\n                                </Tabs>\n                            </CardContent>\n                        </Grid>\n                        <Grid item xs={12} lg={8}>\n                            <CardContent className={classes.cardPanels}>\n                                <TabPanel value={value} index={0}>\n                                    <Details/>\n                                </TabPanel>\n                                <TabPanel value={value} index={1}>\n                                    <ClientCaseLoad/>\n                                </TabPanel>\n                                <TabPanel value={value} index={2}>\n                                    <ProjectClinicalActivities/>\n                                </TabPanel>\n                                <TabPanel value={value} index={3}>\n                                    <ProjectActivities/>\n                                </TabPanel>\n                            </CardContent>\n                        </Grid>\n                    </Grid>\n                    <Divider/>\n                    <CardActions>\n                        <Grid container justifyContent='space-between' spacing={0}>\n                            <Grid item>\n                                <Grid container justifyContent='space-between' spacing={1}>\n                                    <Grid item>\n                                        {value < 3 && (\n                                            <AnimateButton>\n                                                <Button variant='contained' size='large'\n                                                        onClick={(e) => handleChange(e, 1 + parseInt(value, 10))}>\n                                                    Continue\n                                                </Button>\n                                            </AnimateButton>\n                                        )}\n                                    </Grid>\n\n                                    <Grid item>\n                                        {value > 0 && (\n                                            <AnimateButton>\n                                                <Button variant='outlined' size='large'\n                                                        onClick={(e) => handleChange(e, parseInt(value, 10) - 1)}>\n                                                    Back\n                                                </Button>\n                                            </AnimateButton>\n                                        )}\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n\n                            <Grid item alignContent='end'>\n                                {value > 2 && (\n                                    <AnimateButton>\n                                        <Button color='secondary' variant='contained' size='large'\n                                                onClick={handleWorkloadSubmit}>\n                                            Submit <ProgressCircularControlled display={progressLoader}/>\n                                        </Button>\n                                    </AnimateButton>\n                                )}\n                            </Grid>\n\n                        </Grid>\n                    </CardActions>\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default DailyWorkload;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/community-paramedic/client-assessment/detail/assessment-forms.js",["1933","1934","1935","1936","1937","1938","1939"],"import React from 'react';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {\n    AppBar,\n    Button,\n    Dialog,\n    Divider,\n    IconButton,\n    ListItemText,\n    List,\n    Slide,\n    Toolbar,\n    Typography,\n    Grid, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, Tooltip\n} from '@material-ui/core';\nimport ListItemButton from '@material-ui/core/ListItemButton';\n\n// assets\nimport CloseIcon from '@material-ui/icons/Close';\nimport PageViewIcon from \"@material-ui/icons/PageviewTwoTone\";\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative'\n    },\n\n    title: {\n        marginLeft: theme.spacing(2),\n        flex: 1\n    },\n    fulldialog: {\n        '& .MuiPaper-root': {\n            padding: '0px'\n        }\n    }\n}));\n\n// slide animation\nconst Transition = React.forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\n\n// ===============================|| UI DIALOG - FULL SCREEN ||=============================== //\n\nexport default function FullScreenDialog({forms}) {\n    const classes = useStyles();\n\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div>\n            <Tooltip title=\"View Attached Assessment Forms\">\n                <Button variant=\"contained\" onClick={handleClickOpen}\n                        startIcon={<PageViewIcon/>}>\n                    View Assessment Forms\n                </Button>\n            </Tooltip>\n            <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}\n                    className={classes.fulldialog}>\n                <AppBar className={classes.appBar}>\n                    <Toolbar>\n                        <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n                            <CloseIcon/>\n                        </IconButton>\n                        <Typography variant=\"h3\" color=\"inherit\" className={classes.title}>\n                            Assessment Forms\n                        </Typography>\n                        <Button autoFocus color=\"inherit\" onClick={handleClose}>\n                            Close\n                        </Button>\n                    </Toolbar>\n                </AppBar>\n\n                <TableContainer>\n                    <Table aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell sx={{pl: 3}}>File Name</TableCell>\n                                <TableCell sx={{pl: 3}}>Assessment Type</TableCell>\n                                <TableCell align=\"left\">Upload Time</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {forms.map((row) => (\n                                <TableRow hover  key={row.assessment_form_id}>\n                                    <TableCell sx={{pl: 3}} component=\"th\" scope=\"row\">\n                                        {row.document.name}\n                                    </TableCell>\n                                    <TableCell align=\"left\">{row.assessment_type}</TableCell>\n                                    <TableCell align=\"left\">{row.document.uploaded_at}</TableCell>\n                                    <TableCell align=\"left\">\n                                        <Button>\n                                            Download\n                                        </Button>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n\n            </Dialog>\n        </div>\n    );\n}\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/daily-workload/detail/index.js",["1940","1941","1942","1943","1944","1945","1946","1947","1948","1949","1950","1951","1952","1953","1954","1955","1956","1957","1958","1959","1960","1961","1962"],"import PropTypes from 'prop-types';\nimport React, {useEffect} from 'react';\nimport JWTContext from 'contexts/JWTContext';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {\n    Button,\n    CardActions,\n    CircularProgress,\n    CardContent,\n    Divider,\n    Grid,\n    Tab,\n    Tabs,\n    Typography, IconButton, List, ListItemIcon, ListItemText, ListItemSecondaryAction\n} from '@material-ui/core';\n\nimport {useNavigate, useParams} from 'react-router-dom';\n\n// project imports\nimport Details from '../forms/details';\n\nimport {useSelector, useDispatch} from \"react-redux\";\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport {gridSpacing} from 'store/constant';\n\n// assets\nimport PersonOutlineTwoToneIcon from '@material-ui/icons/PersonOutlineTwoTone';\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\nimport CreditCardTwoToneIcon from '@material-ui/icons/CreditCardTwoTone';\nimport VpnKeyTwoToneIcon from '@material-ui/icons/VpnKeyTwoTone';\nimport {SNACKBAR_OPEN} from 'store/actionTypes';\n\nimport clinicianApi from 'store/api-calls/clinician';\n\n\nimport {retrieveDailyWorkload} from \"store/actions/clinician/dailyWorkloadActions\";\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\nimport Tooltip from '@material-ui/core/Tooltip';\nimport SubCard from \"ui-component/cards/SubCard\";\nimport ListItemButton from \"@material-ui/core/ListItemButton\";\nimport IosShareOutlined from \"@material-ui/icons/IosShareOutlined\";\nimport { FormattedMessage } from 'react-intl';\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    profileTab: {\n        '& .MuiTabs-flexContainer': {\n            borderBottom: 'none'\n        },\n        '& button': {\n            color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[600],\n            minHeight: 'auto',\n            minWidth: '100%',\n            padding: '12px 16px',\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n            textAlign: 'left',\n            justifyContent: 'flex-start'\n        },\n        '& button.Mui-selected': {\n            color: theme.palette.primary.main,\n            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50]\n        },\n        '& button > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px',\n            marginTop: '10px',\n            height: '20px',\n            width: '20px'\n        },\n        '& button > div > span': {\n            display: 'block'\n        },\n        '& > div > span': {\n            display: 'none'\n        }\n    },\n    cardPanels: {\n        borderLeft: '1px solid',\n        borderLeftColor: theme.palette.mode === 'dark' ? '#333d5e' : '#eeeeee',\n        height: '100%'\n    }\n}));\n\n// tabs\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <div role='tabpanel' hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && <div>{children}</div>}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\nconst DailyWorkload = () => {\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n\n    const [progressLoader, setProgressLoader] = React.useState(false);\n    const [retrievedItemDailyWorkload, setRetrievedItemDailyWorkload] = React.useState(false);\n\n    const {workload_id} = useParams();\n\n    const workloadValueFields = {\n        \"workload_details\": [\n            \"daily_workload_date\",\n            \"service_recipient_travel\",\n            \"functional_center\"\n        ],\n        \"workload-caseload\": [\n            \"client_caseload_casemanagement_number_clients\",\n            \"client_caseload_casemanagement_total_time\",\n            \"client_caseload_regular_number_clients\",\n            \"client_caseload_regular_total_time\",\n        ]\n    }\n\n    useEffect(async () => {\n        const response = await clinicianApi.retrieveDailyWorkload(workload_id);\n\n        if ('result' in response && response.result === true && 'data' in response) {\n            dispatch(retrieveDailyWorkload(workload_id, response.data))\n            setRetrievedItemDailyWorkload(response.data)\n        }\n    }, []);\n\n    const handleEdit = (event) => {\n        navigate(`/workload/${workload_id}/edit`)\n    };\n\n    const renderDetail = () => {\n        const fieldsMap = (fields) => (\n            fields.map(field => (\n                <ListItemButton>\n                    <ListItemText primary={<Typography variant=\"subtitle1\"><FormattedMessage id={field} /></Typography>}/>\n                    <ListItemSecondaryAction>\n                        <Typography variant=\"body1\" align=\"right\">\n                            {retrievedItemDailyWorkload[field]}\n                        </Typography>\n                    </ListItemSecondaryAction>\n                </ListItemButton>\n            ))\n        )\n\n        return Object.keys(workloadValueFields).map(workloadKey => {\n            const fields = workloadValueFields[workloadKey];\n            return (\n                <Grid item lg={6} xs={8}>\n                    <SubCard title={<FormattedMessage id={workloadKey} />}>\n                        <List component=\"nav\">\n                            {fieldsMap(fields)}\n                            <Divider/>\n                        </List>\n                    </SubCard>\n                </Grid>\n            )\n        })\n    }\n\n    return (\n        <MainCard title=\"Workload Detail\"\n                  secondary={\n                      <>\n                          <Tooltip title=\"Edit Workload\">\n                              <IconButton color=\"secondary\" onClick={handleEdit}>\n                                  <EditTwoToneIcon sx={{fontSize: '1.5rem'}}/>\n                              </IconButton>\n                          </Tooltip>\n                          <Tooltip title=\"Send Workload\">\n                              <IconButton color=\"secondary\">\n                                  <IosShareOutlined sx={{fontSize: '1.5rem'}}/>\n                              </IconButton>\n                          </Tooltip>\n                      </>\n                  }\n        >\n            <Grid container spacing={gridSpacing}>\n                {renderDetail()}\n            </Grid>\n        </MainCard>\n    )\n};\n\nexport default DailyWorkload;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/daily-workload/list/index.js",["1963","1964","1965","1966","1967","1968","1969","1970","1971","1972","1973","1974"],"import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {listReferralsByReviewBoardID} from 'store/actions/reviewBoard/referralActions';\nimport {useNavigate} from 'react-router-dom';\n\n// material-ui\nimport {makeStyles, useTheme} from '@material-ui/styles';\nimport {\n    CardContent,\n    Checkbox,\n    Fab,\n    Grid,\n    IconButton,\n    InputAdornment,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TablePagination,\n    TableRow,\n    TableSortLabel,\n    TextField,\n    Toolbar,\n    Tooltip,\n    Typography\n} from '@material-ui/core';\nimport {visuallyHidden} from '@material-ui/utils';\n\n// third-party\nimport clsx from 'clsx';\n\n// project imports\n\nimport MainCard from 'ui-component/cards/MainCard';\n\n// assets\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterListTwoTone';\nimport PrintIcon from '@material-ui/icons/PrintTwoTone';\nimport FileCopyIcon from '@material-ui/icons/FileCopyTwoTone';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddIcon from '@material-ui/icons/AddTwoTone';\nimport MoreHorizOutlinedIcon from '@material-ui/icons/MoreHorizOutlined';\nimport {useContext, useEffect} from \"react\";\n\n// axios api\nimport clinicianApi from 'store/api-calls/clinician';\nimport JWTContext from \"contexts/JWTContext\";\nimport VisibilityTwoToneIcon from \"@material-ui/icons/VisibilityTwoTone\";\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\nimport {listDailyWorkLoad} from \"store/actions/clinician/dailyWorkloadActions\";\n\n// table data\nfunction createData(id, name, category, price, date, qty) {\n    return {id, name, category, price, date, qty};\n}\n\n// table sort\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\n// table header options\nconst headCells = [\n    {\n        id: 'daily_workload_date',\n        numeric: false,\n        label: 'Workload Date',\n        align: 'center'\n    },\n    {\n        id: 'client_caseload_casemanagement_number_clients',\n        numeric: false,\n        label: '# Case Management Clients',\n        align: 'center'\n    },\n    {\n        id: 'client_caseload_regular_number_clients',\n        numeric: false,\n        label: '# Regular Clients',\n        align: 'center'\n    },\n];\n\n// style const\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%'\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2)\n    },\n    table: {\n        minWidth: 750\n    },\n    sortSpan: visuallyHidden\n}));\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        padding: 0,\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1)\n    },\n    highlight: {\n        color: theme.palette.secondary.main\n    },\n    title: {\n        flex: '1 1 100%'\n    }\n}));\n\n// ===========================|| TABLE HEADER ||=========================== //\n\nfunction EnhancedTableHead({\n                               classes,\n                               onSelectAllClick,\n                               order,\n                               orderBy,\n                               numSelected,\n                               rowCount,\n                               onRequestSort,\n                               theme,\n                               selected\n                           }) {\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                {numSelected > 0 && (\n                    <TableCell padding=\"none\" colSpan={7}>\n                        <EnhancedTableToolbar numSelected={selected.length}/>\n                    </TableCell>\n                )}\n                {numSelected <= 0 &&\n                headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.align}\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span\n                                    className={classes.sortSpan}>{order === 'desc' ? 'sorted descending' : 'sorted ascending'}</span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n                {numSelected <= 0 && (\n                    <TableCell sortDirection={false} align=\"center\" sx={{pr: 3}}>\n                        <Typography\n                            variant=\"subtitle1\"\n                            sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                        >\n                            Action\n                        </Typography>\n                    </TableCell>\n                )}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    theme: PropTypes.object,\n    selected: PropTypes.array,\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired\n};\n\n// ===========================|| TABLE HEADER TOOLBAR ||=========================== //\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const {numSelected} = props;\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"h4\" component=\"div\">\n                    {numSelected} Selected\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Nutrition\n                </Typography>\n            )}\n\n            {numSelected > 0 && (\n                <Tooltip title=\"Delete\">\n                    <IconButton>\n                        <DeleteIcon fontSize=\"small\"/>\n                    </IconButton>\n                </Tooltip>\n            )}\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired\n};\n\n// ===========================|| PRODUCT LIST ||=========================== //\n\nconst ReviewBoardReferralList = () => {\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const theme = useTheme();\n\n    const userAuthContext = React.useContext(JWTContext)\n    const {\n        user: {\n            user_type_pk: clinicianUUID\n        }\n    } = userAuthContext;\n\n    // show a right sidebar when clicked on new product\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpenDialog = () => {\n        navigate('/workload/add');\n    };\n    const handleCloseDialog = () => {\n        setOpen(false);\n    };\n\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [search, setSearch] = React.useState('');\n    const [rows, setRows] = React.useState([]);\n    const [rowsInitial, setRowsInitial] = React.useState([]);\n\n    const handleSearch = (event) => {\n        const newString = event.target.value;\n        setSearch(newString);\n\n        if (newString) {\n            const newRows = rows.filter((row) => {\n                let matches = true;\n\n                const properties = ['daily_workload_date'];\n                let containsQuery = false;\n\n                properties.forEach((property) => {\n                    if (row[property].toString().toLowerCase().includes(newString.toString().toLowerCase())) {\n                        containsQuery = true;\n                    }\n                });\n\n                if (!containsQuery) {\n                    matches = false;\n                }\n                return matches;\n            });\n            setRows(newRows);\n        } else {\n            setRows(rowsInitial);\n        }\n    };\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelectedId = rows.map((n) => n.name);\n            setSelected(newSelectedId);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, workloadUUID) => {\n        navigate(`/workload/${workloadUUID}`)\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const fetchListData = async () => {\n        const response = await clinicianApi.listDailyWorkloadByCaseManagerID(clinicianUUID);\n        if ('result' in response && response.result === true) {\n            setRows(response.data)\n            setRowsInitial(response.data)\n            dispatch(listDailyWorkLoad(response.data))\n        }\n    }\n\n    useEffect(() => {\n        // eslint-disable-next-line camelcase\n        fetchListData()\n    }, [])\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n    const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n    return (\n        <MainCard title=\"My Daily Workload\" content={false}>\n            <CardContent>\n                <Grid container justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\n                    <Grid item xs={8} sm={6}>\n                        <TextField\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <SearchIcon fontSize=\"small\"/>\n                                    </InputAdornment>\n                                )\n                            }}\n                            onChange={handleSearch}\n                            placeholder=\"Search Workload\"\n                            value={search}\n                            size=\"small\"\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={6} sx={{textAlign: 'right'}}>\n                        <Tooltip title=\"Copy\">\n                            <IconButton>\n                                <FileCopyIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Print\">\n                            <IconButton>\n                                <PrintIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Filter\">\n                            <IconButton>\n                                <FilterListIcon/>\n                            </IconButton>\n                        </Tooltip>\n\n                        {/* product add & dialog */}\n                        <Tooltip title=\"Add Workload\">\n                            <Fab\n                                color=\"primary\"\n                                size=\"small\"\n                                onClick={handleClickOpenDialog}\n                                sx={{boxShadow: 'none', ml: 1, width: '32px', height: '32px', minHeight: '32px'}}\n                            >\n                                <AddIcon fontSize=\"small\"/>\n                            </Fab>\n                        </Tooltip>\n\n                    </Grid>\n                </Grid>\n            </CardContent>\n\n            {/* table */}\n            <TableContainer>\n                <Table className={classes.table} aria-labelledby=\"tableTitle\">\n                    <EnhancedTableHead\n                        classes={classes}\n                        numSelected={selected.length}\n                        order={order}\n                        orderBy={orderBy}\n                        onSelectAllClick={handleSelectAllClick}\n                        onRequestSort={handleRequestSort}\n                        rowCount={rows.length}\n                        theme={theme}\n                        selected={selected}\n                    />\n                    <TableBody>\n                        {stableSort(rows, getComparator(order, orderBy))\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map((row, index) => {\n                                const labelId = `enhanced-table-checkbox-${index}`;\n\n                                return (\n                                    <TableRow\n                                        hover\n                                        role=\"checkbox\"\n                                        tabIndex={-1}\n                                        key={index}\n                                    >\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"center\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row.daily_workload_date}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"center\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row.client_caseload_casemanagement_number_clients}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"center\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row.client_caseload_regular_number_clients}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell align=\"center\" sx={{pr: 3}}>\n                                            <IconButton\n                                                color=\"primary\"\n                                                onClick={(event) => handleClick(event, row.daily_workload_id)}\n                                            >\n                                                <VisibilityTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                                            </IconButton>\n                                            <IconButton color=\"secondary\">\n                                                <EditTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                                            </IconButton>\n                                        </TableCell>\n\n\n                                    </TableRow>\n                                );\n                            })}\n                        {emptyRows > 0 && (\n                            <TableRow\n                                style={{\n                                    height: 53 * emptyRows\n                                }}\n                            >\n                                <TableCell colSpan={6}/>\n                            </TableRow>\n                        )}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n\n            {/* table pagination */}\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </MainCard>\n    );\n};\n\nexport default ReviewBoardReferralList;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/client/clinical-information/add-medication.js",["1975","1976","1977","1978","1979"],"import React from 'react';\n\n// material-ui\nimport {useTheme} from '@material-ui/styles';\nimport {\n    Button,\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    Grid, TextField,\n    useMediaQuery,\n    CardContent,\n    CardActions\n} from '@material-ui/core';\nimport {gridSpacing} from \"store/constant\";\nimport SubCard from \"ui-component/cards/SubCard\";\nimport {useDispatch} from \"react-redux\";\nimport {useFormik} from \"formik\";\nimport * as yup from \"yup\";\n\nconst validationSchema = yup.object({\n    medication_name: yup.string('Enter the name of the medication').required('Medication Name is required'),\n    medication_start_date: yup.string('Enter the name of the medication').required('Medication start date is required'),\n    medication_end_date: yup.string('Enter the name of the medication').required('Medication end date is required'),\n    medication_dosage: yup.string('Enter the name of the medication').required('Medication dosage value is required'),\n    medication_frequency: yup.string('Enter the name of the medication').required('Medication frequency is required'),\n});\n\nexport default function AddMedicationDialog({open, handleClose, clinicalInfoData, setClinicalInformationDetails}) {\n    const theme = useTheme();\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            medication_name: '',\n            medication_start_date: '',\n            medication_end_date: '',\n            medication_dosage: '',\n            medication_frequency: '',\n        },\n        validationSchema,\n        onSubmit: (values) => {\n            dispatch(setClinicalInformationDetails({\n                ...clinicalInfoData,\n                current_medication: [\n                    ...clinicalInfoData.current_medication,\n                    {\n                        ...values\n                    }\n                ]\n            }))\n            handleClose();\n        }\n    });\n\n    return (\n        <div>\n            <Dialog fullScreen={fullScreen} open={open} aria-labelledby=\"add-medication-dialog\">\n                <DialogTitle id=\"responsive-dialog-title\">Add New Medication</DialogTitle>\n                <DialogContent>\n                    <form onSubmit={formik.handleSubmit}>\n                        <SubCard>\n                            <CardContent>\n                                <Grid container spacing={gridSpacing}>\n                                    <Grid item xs={4} lg={12}>\n                                        <TextField\n                                            error={formik.touched.medication_name && Boolean(formik.errors.medication_name)}\n                                            helperText={formik.touched.medication_name && formik.errors.medication_name}\n                                            value={formik.values.medication_name}\n                                            onChange={formik.handleChange}\n                                            autoFocus\n                                            fullWidth\n                                            label=\"Medication Name\"\n                                            id='medication_name'\n                                            name='medication_name'\n                                        />\n                                    </Grid>\n                                    <Grid item xs={4} lg={12}>\n                                        <TextField\n                                            error={formik.touched.medication_start_date && Boolean(formik.errors.medication_start_date)}\n                                            helperText={formik.touched.medication_start_date && formik.errors.medication_start_date}\n                                            onChange={formik.handleChange}\n                                            fullWidth\n                                            label=\"Start Date\"\n                                            id='medication_start_date'\n                                            name='medication_start_date'\n                                        />\n                                    </Grid>\n                                    <Grid item xs={4} lg={12}>\n                                        <TextField\n                                            error={formik.touched.medication_end_date && Boolean(formik.errors.medication_end_date)}\n                                            helperText={formik.touched.medication_end_date && formik.errors.medication_end_date}\n                                            onChange={formik.handleChange}\n                                            fullWidth\n                                            label=\"End Date\"\n                                            id='medication_end_date'\n                                            name='medication_end_date'\n                                        />\n                                    </Grid>\n                                    <Grid item xs={4} lg={12}>\n                                        <TextField\n                                            error={formik.touched.medication_dosage && Boolean(formik.errors.medication_dosage)}\n                                            helperText={formik.touched.medication_dosage && formik.errors.medication_dosage}\n                                            onChange={formik.handleChange}\n                                            fullWidth\n                                            label=\"Dosage\"\n                                            id='medication_dosage'\n                                            name='medication_dosage'\n                                        />\n                                    </Grid>\n                                    <Grid item xs={4} lg={12}>\n                                        <TextField\n                                            error={formik.touched.medication_frequency && Boolean(formik.errors.medication_frequency)}\n                                            helperText={formik.touched.medication_frequency && formik.errors.medication_frequency}\n                                            onChange={formik.handleChange}\n                                            fullWidth\n                                            label=\"Frequency\"\n                                            id='medication_frequency'\n                                            name='medication_frequency'\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </CardContent>\n                            <CardActions sx={{ justifyContent: 'flex-end' }}>\n                                <Button autoFocus onClick={handleClose} color=\"error\">\n                                    Close\n                                </Button>\n                                <Button variant=\"contained\" size=\"small\" type='submit'>\n                                    Save\n                                </Button>\n                            </CardActions>\n                        </SubCard>\n                    </form>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n}\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-interventions/list/index.js",["1980","1981","1982","1983","1984","1985","1986","1987","1988"],"import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {listReferralsByReviewBoardID} from 'store/actions/reviewBoard/referralActions';\nimport {useNavigate} from 'react-router-dom';\n\n// material-ui\nimport {makeStyles, useTheme} from '@material-ui/styles';\nimport {\n    CardContent,\n    Checkbox,\n    Fab,\n    Grid,\n    IconButton,\n    InputAdornment,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TablePagination,\n    TableRow,\n    TableSortLabel,\n    TextField,\n    Toolbar,\n    Tooltip,\n    Typography\n} from '@material-ui/core';\nimport {visuallyHidden} from '@material-ui/utils';\n\n// third-party\nimport clsx from 'clsx';\n\n// project imports\n\nimport MainCard from 'ui-component/cards/MainCard';\n\n// assets\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterListTwoTone';\nimport PrintIcon from '@material-ui/icons/PrintTwoTone';\nimport FileCopyIcon from '@material-ui/icons/FileCopyTwoTone';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddIcon from '@material-ui/icons/AddTwoTone';\nimport MoreHorizOutlinedIcon from '@material-ui/icons/MoreHorizOutlined';\nimport {useContext, useEffect} from \"react\";\n\n// axios api\nimport clinicianApi from 'store/api-calls/clinician';\nimport JWTContext from \"contexts/JWTContext\";\nimport VisibilityTwoToneIcon from \"@material-ui/icons/VisibilityTwoTone\";\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\nimport {\n    listClinicianClientInterventions\n} from \"store/actions/clinician/clientInterventionActions\";\n\n// table data\nfunction createData(id, name, category, price, date, qty) {\n    return {id, name, category, price, date, qty};\n}\n\n// table sort\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\n// table header options\nconst headCells = [\n    {\n        id: 'intervention_date',\n        numeric: false,\n        label: 'Intervention Date',\n        align: 'center'\n    },\n    {\n        id: 'intervention_client',\n        numeric: false,\n        label: 'Client',\n        align: 'left'\n    },\n    {\n        id: 'intervention_total_time',\n        numeric: false,\n        label: 'Total Time Spent',\n        align: 'left'\n    },\n];\n\n// style const\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%'\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2)\n    },\n    table: {\n        minWidth: 750\n    },\n    sortSpan: visuallyHidden\n}));\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        padding: 0,\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1)\n    },\n    highlight: {\n        color: theme.palette.secondary.main\n    },\n    title: {\n        flex: '1 1 100%'\n    }\n}));\n\n// ===========================|| TABLE HEADER ||=========================== //\n\nfunction EnhancedTableHead({\n                               classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort, theme,\n                               selected\n                           }) {\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                {numSelected > 0 && (\n                    <TableCell padding=\"none\" colSpan={7}>\n                        <EnhancedTableToolbar numSelected={selected.length}/>\n                    </TableCell>\n                )}\n                {numSelected <= 0 &&\n                headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.align}\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span\n                                    className={classes.sortSpan}>{order === 'desc' ? 'sorted descending' : 'sorted ascending'}</span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n                {numSelected <= 0 && (\n                    <TableCell sortDirection={false} align=\"center\" sx={{pr: 3}}>\n                        <Typography\n                            variant=\"subtitle1\"\n                            sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                        >\n                            Action\n                        </Typography>\n                    </TableCell>\n                )}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    theme: PropTypes.object,\n    selected: PropTypes.array,\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired\n};\n\n// ===========================|| TABLE HEADER TOOLBAR ||=========================== //\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const {numSelected} = props;\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"h4\" component=\"div\">\n                    {numSelected} Selected\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Nutrition\n                </Typography>\n            )}\n\n            {numSelected > 0 && (\n                <Tooltip title=\"Delete\">\n                    <IconButton>\n                        <DeleteIcon fontSize=\"small\"/>\n                    </IconButton>\n                </Tooltip>\n            )}\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired\n};\n\n// ===========================|| PRODUCT LIST ||=========================== //\n\nconst CaseManagerClientInterventionList = () => {\n    const userAuthContext = React.useContext(JWTContext)\n    const {\n        user: {\n            user_type_pk: clinicianUUID\n        }\n    } = userAuthContext;\n\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n\n    const classes = useStyles();\n    const theme = useTheme();\n\n    const handleClickOpenDialog = () => {\n        navigate('/intervention/add');\n    };\n\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [search, setSearch] = React.useState('');\n    const [rows, setRows] = React.useState([]);\n    const [rowsInitial, setRowsInitial] = React.useState([]);\n\n    const handleSearch = (event) => {\n        const newString = event.target.value;\n        setSearch(newString);\n\n        if (newString) {\n            const newRows = rows.filter((row) => {\n                let matches = true;\n\n                const properties = ['date', 'client_fullname'];\n                let containsQuery = false;\n\n                properties.forEach((property) => {\n                    if (row[property].toString().toLowerCase().includes(newString.toString().toLowerCase())) {\n                        containsQuery = true;\n                    }\n                });\n\n                if (!containsQuery) {\n                    matches = false;\n                }\n                return matches;\n            });\n            setRows(newRows);\n        } else {\n            setRows(rowsInitial);\n        }\n    };\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelectedId = rows.map((n) => n.name);\n            setSelected(newSelectedId);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, interventionUUID) => {\n        navigate(`/intervetion/${interventionUUID}`)\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const fetchListData = async () => {\n        const response = await clinicianApi.listClientInterventionByClinicianID(clinicianUUID);\n        if ('result' in response && response.result === true) {\n            setRows(response.data)\n            setRowsInitial(response.data)\n            dispatch(listClinicianClientInterventions(response.data))\n        } else {\n            setRows([])\n            setRowsInitial([])\n        }\n    }\n\n    useEffect(() => {\n        fetchListData()\n    }, [])\n\n    const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n    return (\n        <MainCard title=\"My Client Interventions\" content={false}>\n            <CardContent>\n                <Grid container justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\n                    <Grid item xs={8} sm={6}>\n                        <TextField\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <SearchIcon fontSize=\"small\"/>\n                                    </InputAdornment>\n                                )\n                            }}\n                            onChange={handleSearch}\n                            placeholder=\"Search Workload\"\n                            value={search}\n                            size=\"small\"\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={6} sx={{textAlign: 'right'}}>\n                        <Tooltip title=\"Copy\">\n                            <IconButton>\n                                <FileCopyIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Print\">\n                            <IconButton>\n                                <PrintIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Filter\">\n                            <IconButton>\n                                <FilterListIcon/>\n                            </IconButton>\n                        </Tooltip>\n\n                        {/* product add & dialog */}\n                        <Tooltip title=\"Add Assessment\">\n                            <Fab\n                                color=\"primary\"\n                                size=\"small\"\n                                onClick={handleClickOpenDialog}\n                                sx={{boxShadow: 'none', ml: 1, width: '32px', height: '32px', minHeight: '32px'}}\n                            >\n                                <AddIcon fontSize=\"small\"/>\n                            </Fab>\n                        </Tooltip>\n\n                    </Grid>\n                </Grid>\n            </CardContent>\n\n            {/* table */}\n            <TableContainer>\n                <Table className={classes.table} aria-labelledby=\"tableTitle\">\n                    <EnhancedTableHead\n                        classes={classes}\n                        numSelected={selected.length}\n                        order={order}\n                        orderBy={orderBy}\n                        onSelectAllClick={handleSelectAllClick}\n                        onRequestSort={handleRequestSort}\n                        rowCount={rows.length}\n                        theme={theme}\n                        selected={selected}\n                    />\n                    <TableBody>\n                        {stableSort(rows, getComparator(order, orderBy))\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map((row, index) => {\n                                const labelId = `enhanced-table-checkbox-${index}`;\n\n                                return (\n                                    <TableRow\n                                        hover\n                                        role=\"checkbox\"\n                                        tabIndex={-1}\n                                        key={index}\n                                    >\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"center\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row.date}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"left\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row?.client?.user?.fullname}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"left\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row?.total_time}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n\n                                        <TableCell align=\"center\" sx={{pr: 3}}>\n                                            <IconButton\n                                                color=\"primary\"\n                                                onClick={(event) => handleClick(event, row.intervention_id)}\n                                            >\n                                                <VisibilityTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                                            </IconButton>\n                                            <IconButton color=\"secondary\">\n                                                <EditTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                                            </IconButton>\n                                        </TableCell>\n\n\n                                    </TableRow>\n                                );\n                            })}\n                        {emptyRows > 0 && (\n                            <TableRow\n                                style={{\n                                    height: 53 * emptyRows\n                                }}\n                            >\n                                <TableCell colSpan={6}/>\n                            </TableRow>\n                        )}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n\n            {/* table pagination */}\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </MainCard>\n    );\n};\n\nexport default CaseManagerClientInterventionList;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-interventions/add/index.js",["1989","1990"],"import PropTypes from 'prop-types';\nimport React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\n// material-ui\nimport { makeStyles } from '@material-ui/styles';\nimport { Button, CardActions, CardContent, Divider, Grid, Tab, Tabs, Typography } from '@material-ui/core';\nimport {SNACKBAR_OPEN} from \"store/actionTypes\";\nimport ProgressCircularControlled from \"views/ui/ProgressCircularControlled\";\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\nimport MainCard from 'ui-component/cards/MainCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport { gridSpacing } from 'store/constant';\n\n// project imports\nimport ClientSelect from './forms/client';\nimport InterventionDetails from './forms/intervention-details';\nimport InterventionAssessmentForms from './forms/assessment-forms';\n\n// assets\nimport JWTContext from \"contexts/JWTContext\";\nimport {\n    setInterventionCaseManagerDetail,\n    setInterventionClientDetail\n} from \"store/actions/clinician/clientInterventionActions\";\nimport clinicianApi from \"store/api-calls/clinician\";\n\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    profileTab: {\n        '& .MuiTabs-flexContainer': {\n            borderBottom: 'none'\n        },\n        '& button': {\n            color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[600],\n            minHeight: 'auto',\n            minWidth: '100%',\n            padding: '12px 16px',\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n            textAlign: 'left',\n            justifyContent: 'flex-start'\n        },\n        '& button.Mui-selected': {\n            color: theme.palette.primary.main,\n            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50]\n        },\n        '& button > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px',\n            marginTop: '10px',\n            height: '20px',\n            width: '20px'\n        },\n        '& button > div > span': {\n            display: 'block'\n        },\n        '& > div > span': {\n            display: 'none'\n        }\n    },\n    cardPanels: {\n        borderLeft: '1px solid',\n        borderLeftColor: theme.palette.mode === 'dark' ? '#333d5e' : '#eeeeee',\n        height: '100%'\n    }\n}));\n\n// tabs\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div role='tabpanel' hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && <div>{children}</div>}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n// tabs option\nconst tabsOption = [\n    {\n        label: 'Client Select',\n        icon: <DescriptionTwoToneIcon />,\n        caption: 'Select a client for intervention'\n    },\n    {\n        label: 'Intervention Details',\n        icon: <DescriptionTwoToneIcon />,\n        caption: 'Fill in the intervention details'\n    },\n    {\n        label: 'Assessment Forms',\n        icon: <DescriptionTwoToneIcon />,\n        caption: 'Add Assessment files'\n    }\n];\n\n\nconst ClientIntervention = () => {\n    const classes = useStyles();\n    const customization = useSelector((state) => state.customization);\n    const [value, setValue] = React.useState(0);\n    const dispatch = useDispatch();\n    const [progressLoader, setProgressLoader] = React.useState(false);\n\n    const clientInterventionData = useSelector(state => state.clinician.clientIntervention.add)\n    const clientInterventionAddData = clientInterventionData.intervention\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n    const {\n        user: {\n            user_type_pk: clinicianUUID\n        }\n    } = React.useContext(JWTContext);\n\n    useEffect(() => {\n        dispatch(setInterventionCaseManagerDetail(clinicianUUID))\n    }, []);\n\n    const handleSubmit = async (event) => {\n        setProgressLoader(true);  // Call this to show the loader for the current tab\n        const response = await clinicianApi.createClientIntervention(clientInterventionData);\n\n        if (response && 'result' in response) {\n            if (response.result === true) {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Client Intervention has been successfully added.',\n                    variant: 'alert',\n                    alertSeverity: 'success', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            } else {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Client Intervention could not be added. Please try again',\n                    variant: 'alert',\n                    alertSeverity: 'error', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            }\n        } else {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Client Intervention could not be added. Please try again',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n\n        setProgressLoader(false);\n    }\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12}>\n                <MainCard title='Client Intervention' content={false}>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={12} lg={3}>\n                            <CardContent>\n                                <Tabs\n                                    value={value}\n                                    onChange={handleChange}\n                                    orientation='vertical'\n                                    className={classes.profileTab}\n                                    variant='scrollable'\n                                    sx={{\n                                        '& button': {\n                                            borderRadius: `${customization.borderRadius}px`\n                                        }\n                                    }}\n                                >\n                                    {tabsOption.map((tab, index) => (\n                                        <Tab\n                                            key={index}\n                                            icon={tab.icon}\n                                            label={\n                                                <Grid container direction='column'>\n                                                    <Typography sx={{ textTransform: 'capitalize' }} variant='subtitle1'\n                                                                color='inherit'>\n                                                        {tab.label}\n                                                    </Typography>\n                                                    <Typography component='div' variant='caption'\n                                                                sx={{ textTransform: 'capitalize' }}>\n                                                        {tab.caption}\n                                                    </Typography>\n                                                </Grid>\n                                            }\n                                            {...a11yProps(index)}\n                                        />\n                                    ))}\n                                </Tabs>\n                            </CardContent>\n                        </Grid>\n                        <Grid item xs={12} lg={8}>\n                            <CardContent className={classes.cardPanels}>\n                                <TabPanel value={value} index={0}>\n                                    <ClientSelect setSelectedClientValueToStore={setInterventionClientDetail} storeData={clientInterventionAddData}/>\n                                </TabPanel>\n                                <TabPanel value={value} index={1}>\n                                    <InterventionDetails providerProfessionType=\"PROVIDER_TYPE_REGISTERED_NURSE\"/>\n                                </TabPanel>\n                                <TabPanel value={value} index={2}>\n                                    <InterventionAssessmentForms providerProfessionType=\"PROVIDER_TYPE_REGISTERED_NURSE\"/>\n                                </TabPanel>\n                            </CardContent>\n                        </Grid>\n                    </Grid>\n\n                    <Divider />\n\n                    <CardActions>\n                        <Grid container justifyContent='space-between' spacing={0}>\n                            <Grid item>\n                                {value > 0 && (\n                                    <AnimateButton>\n                                        <Button variant='outlined' size='large'\n                                                onClick={(e) => handleChange(e, parseInt(value, 10) - 1)}>\n                                            Back\n                                        </Button>\n                                    </AnimateButton>\n                                )}\n                            </Grid>\n                            <Grid item>\n                                {value < 2 && (\n                                    <AnimateButton>\n                                        <Button variant='contained' size='large'\n                                                onClick={(e) => handleChange(e, 1 + parseInt(value, 10))}>\n                                            Continue\n                                        </Button>\n                                    </AnimateButton>\n                                )}\n                                {value === 2 && (\n                                    <Grid container justify=\"space-around\" spacing={gridSpacing}>\n                                        <Grid item>\n                                            <ProgressCircularControlled display={progressLoader}/>\n                                        </Grid>\n                                        <Grid item>\n                                            <AnimateButton>\n                                                <Button variant='contained' size='large'\n                                                        onClick={handleSubmit}>\n                                                    Save\n                                                </Button>\n                                            </AnimateButton>\n                                        </Grid>\n                                    </Grid>\n                                )}\n                            </Grid>\n                        </Grid>\n                    </CardActions>\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ClientIntervention;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-assessment/add/index.js",["1991"],"import PropTypes from 'prop-types';\nimport React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {Button, CardActions, CardContent, Divider, Grid, Tab, Tabs, Typography} from '@material-ui/core';\n\n// project imports\nimport ClientSelect from './forms/client';\nimport ExistingExtraMural from './forms/conditional-display/existing-extra-mural';\nimport NewExtraMural from './forms/conditional-display/new-extra-mural';\nimport ClientReasessment from './forms/conditional-display/client-reassessment';\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport {gridSpacing} from 'store/constant';\n\n// assets\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\nimport CreditCardTwoToneIcon from '@material-ui/icons/CreditCardTwoTone';\nimport {SNACKBAR_OPEN} from \"store/actionTypes\";\n\n// API\nimport clinicianApi from \"store/api-calls/clinician\";\nimport ProgressCircularControlled from 'views/ui/ProgressCircularControlled';\n\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    profileTab: {\n        '& .MuiTabs-flexContainer': {\n            borderBottom: 'none'\n        },\n        '& button': {\n            color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[600],\n            minHeight: 'auto',\n            minWidth: '100%',\n            padding: '12px 16px',\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n            textAlign: 'left',\n            justifyContent: 'flex-start'\n        },\n        '& button.Mui-selected': {\n            color: theme.palette.primary.main,\n            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50]\n        },\n        '& button > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px',\n            marginTop: '10px',\n            height: '20px',\n            width: '20px'\n        },\n        '& button > div > span': {\n            display: 'block'\n        },\n        '& > div > span': {\n            display: 'none'\n        }\n    },\n    cardPanels: {\n        borderLeft: '1px solid',\n        borderLeftColor: theme.palette.mode === 'dark' ? '#333d5e' : '#eeeeee',\n        height: '100%'\n    }\n}));\n\n// tabs\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <div role='tabpanel' hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && <div>{children}</div>}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n// tabs option\nconst tabsOption = [];\n\n// ===========================|| PROFILE 2 ||=========================== //\n\nconst ClientAssessment = () => {\n    const classes = useStyles();\n    const customization = useSelector((state) => state.customization);\n    const [value, setValue] = React.useState(0);\n    const [progressLoader, setProgressLoader] = React.useState(false);\n\n    // Redux\n    const clientAssessmentStore = useSelector(state => state.clinician.clientAssessment)\n    const dispatch = useDispatch();\n    const clientAssessmentTypeStatus = clientAssessmentStore.add.assessment.assessment_status;\n    const clientAssessmentAddData = clientAssessmentStore.add;\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const prepareAssessmentRequestData = (clientAssessmentAddData) => {\n        let requestData = {}\n        switch (clientAssessmentTypeStatus) {\n            case 'NEW_CASE_CLIENT_EXISTING_EMC_NO_REASSESS':\n                requestData = {\n                    assessment: {\n                        ...clientAssessmentAddData.assessment\n                    },\n                    assessment_type_data: {\n                        ...clientAssessmentAddData.assessment_type_data.existing_assessment.data\n                    },\n                    assessment_type_forms: {\n                        ...clientAssessmentAddData.assessment_type_forms.existing_assessment\n                    }\n                }\n                break;\n            case 'NEW_CASE_CLIENT_EXISTING_EMC_REASSESS':\n                requestData = {\n                    assessment: {\n                        ...clientAssessmentAddData.assessment\n                    },\n                    assessment_type_data: {\n                        existing_assessment: {\n                            ...clientAssessmentAddData.assessment_type_data.existing_assessment,\n                            assessment_type_forms: {\n                                ...clientAssessmentAddData.assessment_type_forms.existing_assessment\n                            }\n                        },\n                        reassessment: {\n                            ...clientAssessmentAddData.assessment_type_data.reassessment,\n                            assessment_type_forms: {\n                                ...clientAssessmentAddData.assessment_type_forms.reassessment\n                            }\n                        }\n                    }\n                }\n                break;\n            case 'NEW_CASE_CLIENT_NEW_EXTRA_MURAL_CLIENT':\n                delete clientAssessmentAddData.assessment_type_data.existing_assessment\n                delete clientAssessmentAddData.assessment_type_forms.existing_assessment\n                delete clientAssessmentAddData.assessment_type_data.reassessment\n                delete clientAssessmentAddData.assessment_type_forms.reassessment\n\n                requestData = {\n                    assessment: {\n                        ...clientAssessmentAddData.assessment\n                    },\n                    assessment_type_data: {\n                        ...clientAssessmentAddData.assessment_type_data\n                    },\n                    assessment_type_forms: {\n                        ...clientAssessmentAddData.assessment_type_forms\n                    }\n                }\n                break;\n            case 'EXISTING_CASE_CLIENT_REASSESS':\n                requestData = {\n                    assessment: {\n                        ...clientAssessmentAddData.assessment\n                    },\n                    assessment_type_data: {\n                        ...clientAssessmentAddData.assessment_type_data.reassessment.data\n                    },\n                    assessment_type_forms: {\n                        ...clientAssessmentAddData.assessment_type_forms.reassessment\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n        return requestData;\n    }\n\n    const handleSubmit = async (event) => {\n        setProgressLoader(true);  // Call this to show the loader for the current tab\n        const response = await clinicianApi.createClientAssessment(prepareAssessmentRequestData(clientAssessmentAddData));\n\n        if (response && 'result' in response) {\n            if (response.result === true) {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Client Assessment has been successfully added.',\n                    variant: 'alert',\n                    alertSeverity: 'success', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            } else {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Client Assessment could not be added. Please try again',\n                    variant: 'alert',\n                    alertSeverity: 'error', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            }\n        } else {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Client Assessment could not be added. Please try again',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n\n        setProgressLoader(false);\n    }\n\n\n    const setAssessmentTypeOptions = () => {\n        tabsOption.length = 0;\n\n        tabsOption.push(\n            {\n                label: 'Client',\n                icon: <DescriptionTwoToneIcon/>,\n                caption: 'Enter Client Details'\n            }\n        )\n\n        switch (clientAssessmentTypeStatus) {\n            case 'NEW_CASE_CLIENT_EXISTING_EMC_NO_REASSESS':\n                return tabsOption.push(\n                    {\n                        label: 'Existing Extra-Mural Client',\n                        icon: <DescriptionTwoToneIcon/>,\n                        caption: 'Existing Client Details'\n                    }\n                )\n\n            case 'NEW_CASE_CLIENT_EXISTING_EMC_REASSESS':\n                return tabsOption.push(\n                    {\n                        label: 'Existing Extra-Mural Client',\n                        icon: <DescriptionTwoToneIcon/>,\n                        caption: 'Existing Client Details'\n                    },\n                    {\n                        label: 'Client Re-Assessment',\n                        icon: <DescriptionTwoToneIcon/>,\n                        caption: 'Client Reassessment Details'\n                    }\n                )\n\n\n            case 'NEW_CASE_CLIENT_NEW_EXTRA_MURAL_CLIENT':\n                return tabsOption.push(\n                    {\n                        label: 'New Extra-Mural Client',\n                        icon: <CreditCardTwoToneIcon/>,\n                        caption: 'New Client Details'\n                    }\n                )\n\n            case 'EXISTING_CASE_CLIENT_REASSESS':\n                return tabsOption.push(\n                    {\n                        label: 'Client Re-Assessment',\n                        icon: <DescriptionTwoToneIcon/>,\n                        caption: 'Client Reassessment Details'\n                    }\n                )\n            default:\n                return false\n        }\n    }\n\n    const switchAssessmentTypeRender = () => {\n        switch (clientAssessmentTypeStatus) {\n            case 'NEW_CASE_CLIENT_EXISTING_EMC_NO_REASSESS':\n                return <fragment>\n                    <TabPanel value={value} index={1}>\n                        <ExistingExtraMural/>\n                    </TabPanel>\n                </fragment>\n            case 'NEW_CASE_CLIENT_EXISTING_EMC_REASSESS':\n                return <fragment>\n                    <TabPanel value={value} index={1}>\n                        <ExistingExtraMural/>\n                    </TabPanel>\n                    <TabPanel value={value} index={2}>\n                        <ClientReasessment/>\n                    </TabPanel>\n                </fragment>\n\n            case 'NEW_CASE_CLIENT_NEW_EXTRA_MURAL_CLIENT':\n                return <fragment><TabPanel value={value} index={1}>\n                    <NewExtraMural/>\n                </TabPanel>\n                </fragment>\n\n            case 'EXISTING_CASE_CLIENT_REASSESS':\n                return <fragment>\n                    <TabPanel value={value} index={1}>\n                        <ClientReasessment/>\n                    </TabPanel>\n                </fragment>\n            default:\n                return false\n        }\n    }\n\n    setAssessmentTypeOptions();\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12}>\n                <MainCard title='Client Assessment' content={false}>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={6} lg={3}>\n                            <CardContent>\n                                <Tabs\n                                    value={value}\n                                    onChange={handleChange}\n                                    orientation='vertical'\n                                    className={classes.profileTab}\n                                    variant='scrollable'\n                                    sx={{\n                                        '& button': {\n                                            borderRadius: `${customization.borderRadius}px`\n                                        }\n                                    }}\n                                >\n                                    {tabsOption.map((tab, index) => (\n                                        <Tab\n                                            key={index}\n                                            icon={tab.icon}\n                                            label={\n                                                <Grid container direction='column'>\n                                                    <Typography sx={{textTransform: 'capitalize'}} variant='subtitle1'\n                                                                color='inherit'>\n                                                        {tab.label}\n                                                    </Typography>\n                                                    <Typography component='div' variant='caption'\n                                                                sx={{textTransform: 'capitalize'}}>\n                                                        {tab.caption}\n                                                    </Typography>\n                                                </Grid>\n                                            }\n                                            {...a11yProps(index)}\n                                        />\n                                    ))}\n                                </Tabs>\n                            </CardContent>\n                        </Grid>\n                        <Grid item xs={12} lg={9}>\n                            <CardContent className={classes.cardPanels}>\n                                <TabPanel value={value} index={0}>\n                                    <ClientSelect/>\n                                </TabPanel>\n\n                                {switchAssessmentTypeRender()}\n                            </CardContent>\n                        </Grid>\n                    </Grid>\n\n                    <Divider/>\n\n                    <CardActions>\n                        <Grid container justifyContent='space-between' spacing={0}>\n                            <Grid item>\n                                {value > 0 && (\n                                    <AnimateButton>\n                                        <Button variant='outlined' size='large'\n                                                onClick={(e) => handleChange(e, parseInt(value, 10) - 1)}>\n                                            Back\n                                        </Button>\n                                    </AnimateButton>\n                                )}\n                            </Grid>\n                            <Grid item>\n                                {value < (tabsOption.length - 1) && (\n                                    <AnimateButton>\n                                        <Button variant='contained' size='large'\n                                                onClick={(e) => handleChange(e, 1 + parseInt(value, 10))}>\n                                            Continue\n                                        </Button>\n                                    </AnimateButton>\n                                )}\n                                {value === (tabsOption.length - 1) && (\n                                    <Grid container justify=\"space-around\" spacing={gridSpacing}>\n                                        <Grid item>\n                                            <ProgressCircularControlled display={progressLoader}/>\n                                        </Grid>\n                                        <Grid item>\n                                            <AnimateButton>\n                                                <Button variant='contained' size='large'\n                                                        onClick={handleSubmit}>\n                                                    Save\n                                                </Button>\n                                            </AnimateButton>\n                                        </Grid>\n                                    </Grid>\n                                )}\n                            </Grid>\n                        </Grid>\n                    </CardActions>\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ClientAssessment;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-assessment/detail/index.js",["1992","1993","1994","1995","1996","1997","1998","1999","2000","2001"],"import PropTypes from 'prop-types';\nimport React, {useEffect} from 'react';\nimport {Link, useNavigate, useParams} from 'react-router-dom';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {Box, Grid, IconButton, Tab, Tabs} from '@material-ui/core';\n\n// project imports\nimport AssessmentData from './assessment-data';\nimport MainCard from 'ui-component/cards/MainCard';\nimport clinicianApi from 'store/api-calls/clinician';\nimport ShareIndex from 'views/roles/common/communication/share/index';\nimport {\n    gridSpacing,\n    SHARE_INSTANCE_TYPE\n} from \"store/constant\";\n\n// assets\nimport AccountCircleTwoToneIcon from '@material-ui/icons/AccountCircleTwoTone';\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\nimport {setRetrievedClientAssessmentData} from \"store/actions/clinician/clientAssessmentActions\";\nimport {useDispatch} from \"react-redux\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\nimport IosShareOutlined from \"@material-ui/icons/IosShareOutlined\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    accountTab: {\n        marginBottom: '24px',\n        '& a': {\n            minHeight: 'auto',\n            minWidth: '10px',\n            padding: '12px 8px',\n            marginRight: '18px',\n            color: theme.palette.grey[600],\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'center',\n            justifyContent: 'center'\n        },\n        '& a.Mui-selected': {\n            color: theme.palette.primary.main\n        },\n        '& a > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px'\n        }\n    }\n}));\n\n// tabs panel\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n    return (\n        <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && (\n                <Box\n                    sx={{\n                        p: 0\n                    }}\n                >\n                    {children}\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n// tabs option\nconst tabsOption = [\n    {\n        label: 'Client',\n        icon: <DescriptionTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n    },\n    {\n        label: '-',\n        icon: <AccountCircleTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n    }\n];\n\n// ===========================|| PROFILE 1 ||=========================== //\n\nconst ClientAssessmentDetail = () => {\n    const classes = useStyles();\n    const [value, setValue] = React.useState();\n    const [assessmentDetailData, setAssessmentDetailData] = React.useState({});\n    const dispatch = useDispatch();\n    const {assessment_id} = useParams();\n    const navigate = useNavigate();\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const handleClientAssessmentEdit = () => (navigate(`/assessment/${assessment_id}/edit`));\n\n    const fetchClientAssessmentData = async () => {\n        const response = await clinicianApi.retrieveClientAssessmentData(assessment_id)\n        if ('status' in response && response.status === 200) {\n            setAssessmentDetailData(response.data)\n            dispatch(setRetrievedClientAssessmentData(response.data, assessment_id))\n        }\n    }\n\n    useEffect(() => {\n        fetchClientAssessmentData()\n    }, []);\n\n    return (\n        <MainCard title=\"Assessement Data\"\n                  secondary={\n                      <>\n                          <Tooltip title=\"Edit Assessment\">\n                              <IconButton color=\"secondary\" onClick={handleClientAssessmentEdit}>\n                                  <EditTwoToneIcon sx={{fontSize: '1.5rem'}}/>\n                              </IconButton>\n                          </Tooltip>\n\n                          <ShareIndex share_object_id={assessment_id}\n                                      instance_type={SHARE_INSTANCE_TYPE.ClinicianClientAssessment}\n                                      followup_tooltip=\"Send Assessment Follow Up\"\n                                      referral_tooltip=\"Send Assessment Referral\"\n                          />\n                      </>\n                  }\n        >\n            <Grid container spacing={gridSpacing}>\n                <Grid item xs={12}>\n                    <AssessmentData assessmentDetailData={assessmentDetailData}/>\n                </Grid>\n            </Grid>\n        </MainCard>\n    );\n};\n\nexport default ClientAssessmentDetail;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-assessment/list/index.js",["2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012"],"import PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {listReferralsByReviewBoardID} from 'store/actions/reviewBoard/referralActions';\nimport {useNavigate} from 'react-router-dom';\n\n// material-ui\nimport {makeStyles, useTheme} from '@material-ui/styles';\nimport {\n    CardContent,\n    Checkbox,\n    Fab,\n    Grid,\n    IconButton,\n    InputAdornment,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TablePagination,\n    TableRow,\n    TableSortLabel,\n    TextField,\n    Toolbar,\n    Tooltip,\n    Typography\n} from '@material-ui/core';\nimport {visuallyHidden} from '@material-ui/utils';\n\n// third-party\nimport clsx from 'clsx';\n\n// project imports\n\nimport MainCard from 'ui-component/cards/MainCard';\n\n// assets\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterListTwoTone';\nimport PrintIcon from '@material-ui/icons/PrintTwoTone';\nimport FileCopyIcon from '@material-ui/icons/FileCopyTwoTone';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddIcon from '@material-ui/icons/AddTwoTone';\nimport MoreHorizOutlinedIcon from '@material-ui/icons/MoreHorizOutlined';\nimport {useContext, useEffect} from \"react\";\n\n// axios api\nimport clinicianApi from 'store/api-calls/clinician';\nimport JWTContext from \"contexts/JWTContext\";\nimport VisibilityTwoToneIcon from \"@material-ui/icons/VisibilityTwoTone\";\nimport EditTwoToneIcon from \"@material-ui/icons/EditTwoTone\";\nimport {\n    listClinicianClientAssessment,\n} from \"store/actions/clinician/clientAssessmentActions\";\n\n// table data\nfunction createData(id, name, category, price, date, qty) {\n    return {id, name, category, price, date, qty};\n}\n\n// table sort\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\n// table header options\nconst headCells = [\n    {\n        id: 'assessment_date',\n        numeric: false,\n        label: 'Assessment Date',\n        align: 'center'\n    },\n    {\n        id: 'assessment_client',\n        numeric: false,\n        label: 'Client',\n        align: 'left'\n    },\n    {\n        id: 'client_status',\n        numeric: false,\n        label: 'Client Status',\n        align: 'left'\n    },\n    {\n        id: 'assessment_type',\n        numeric: false,\n        label: 'Assessment Type',\n        align: 'left'\n    },\n];\n\n// style const\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%'\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2)\n    },\n    table: {\n        minWidth: 750\n    },\n    sortSpan: visuallyHidden\n}));\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        padding: 0,\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1)\n    },\n    highlight: {\n        color: theme.palette.secondary.main\n    },\n    title: {\n        flex: '1 1 100%'\n    }\n}));\n\n// ===========================|| TABLE HEADER ||=========================== //\n\nfunction EnhancedTableHead({classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort, theme,\n                               selected }) {\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                {numSelected > 0 && (\n                    <TableCell padding=\"none\" colSpan={7}>\n                        <EnhancedTableToolbar numSelected={selected.length}/>\n                    </TableCell>\n                )}\n                {numSelected <= 0 &&\n                headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.align}\n                        padding={headCell.disablePadding ? 'none' : 'normal'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span\n                                    className={classes.sortSpan}>{order === 'desc' ? 'sorted descending' : 'sorted ascending'}</span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n                {numSelected <= 0 && (\n                    <TableCell sortDirection={false} align=\"center\" sx={{pr: 3}}>\n                        <Typography\n                            variant=\"subtitle1\"\n                            sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                        >\n                            Action\n                        </Typography>\n                    </TableCell>\n                )}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    theme: PropTypes.object,\n    selected: PropTypes.array,\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired\n};\n\n// ===========================|| TABLE HEADER TOOLBAR ||=========================== //\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const {numSelected} = props;\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"h4\" component=\"div\">\n                    {numSelected} Selected\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Nutrition\n                </Typography>\n            )}\n\n            {numSelected > 0 && (\n                <Tooltip title=\"Delete\">\n                    <IconButton>\n                        <DeleteIcon fontSize=\"small\"/>\n                    </IconButton>\n                </Tooltip>\n            )}\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired\n};\n\n// ===========================|| PRODUCT LIST ||=========================== //\n\nconst ClientAssessmentList = () => {\n    const userAuthContext = React.useContext(JWTContext)\n    const {\n        user: {\n            user_type_pk: clinicianUUID\n        }\n    } = userAuthContext;\n\n    const navigate = useNavigate();\n    const dispatch = useDispatch();\n\n    const classes = useStyles();\n    const theme = useTheme();\n\n    // show a right sidebar when clicked on new product\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpenDialog = () => {\n        navigate('/assessment/add');\n    };\n    const handleCloseDialog = () => {\n        setOpen(false);\n    };\n\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('calories');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [search, setSearch] = React.useState('');\n    const [rows, setRows] = React.useState([]);\n    const [rowsInitial, setRowsInitial] = React.useState([]);\n\n    const handleSearch = (event) => {\n        const newString = event.target.value;\n        setSearch(newString);\n\n        if (newString) {\n            const newRows = rows.filter((row) => {\n                let matches = true;\n\n                const properties = ['assessment_date', 'client_fullname'];\n                let containsQuery = false;\n\n                properties.forEach((property) => {\n                    if (row[property].toString().toLowerCase().includes(newString.toString().toLowerCase())) {\n                        containsQuery = true;\n                    }\n                });\n\n                if (!containsQuery) {\n                    matches = false;\n                }\n                return matches;\n            });\n            setRows(newRows);\n        } else {\n            setRows(rowsInitial);\n        }\n    };\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelectedId = rows.map((n) => n.name);\n            setSelected(newSelectedId);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, workloadUUID) => {\n        navigate(`/assessment/${workloadUUID}`)\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const fetchListData = async () => {\n        const response = await clinicianApi.listClientAssessmentByCaseManagerID(clinicianUUID);\n        if ('result' in response && response.result === true) {\n            setRows(response.data)\n            setRowsInitial(response.data)\n            dispatch(listClinicianClientAssessment(response.data))\n        }\n    }\n\n    useEffect(() => {\n        fetchListData()\n    }, [])\n\n    const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n    return (\n        <MainCard title=\"My Client Assessments\" content={false}>\n            <CardContent>\n                <Grid container justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\n                    <Grid item xs={8} sm={6}>\n                        <TextField\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <SearchIcon fontSize=\"small\"/>\n                                    </InputAdornment>\n                                )\n                            }}\n                            onChange={handleSearch}\n                            placeholder=\"Search Workload\"\n                            value={search}\n                            size=\"small\"\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={6} sx={{textAlign: 'right'}}>\n                        <Tooltip title=\"Copy\">\n                            <IconButton>\n                                <FileCopyIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Print\">\n                            <IconButton>\n                                <PrintIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Filter\">\n                            <IconButton>\n                                <FilterListIcon/>\n                            </IconButton>\n                        </Tooltip>\n\n                        {/* product add & dialog */}\n                        <Tooltip title=\"Add Assessment\">\n                            <Fab\n                                color=\"primary\"\n                                size=\"small\"\n                                onClick={handleClickOpenDialog}\n                                sx={{boxShadow: 'none', ml: 1, width: '32px', height: '32px', minHeight: '32px'}}\n                            >\n                                <AddIcon fontSize=\"small\"/>\n                            </Fab>\n                        </Tooltip>\n\n                    </Grid>\n                </Grid>\n            </CardContent>\n\n            {/* table */}\n            <TableContainer>\n                <Table className={classes.table} aria-labelledby=\"tableTitle\">\n                    <EnhancedTableHead\n                        classes={classes}\n                        numSelected={selected.length}\n                        order={order}\n                        orderBy={orderBy}\n                        onSelectAllClick={handleSelectAllClick}\n                        onRequestSort={handleRequestSort}\n                        rowCount={rows.length}\n                        theme={theme}\n                        selected={selected}\n                    />\n                    <TableBody>\n                        {stableSort(rows, getComparator(order, orderBy))\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map((row, index) => {\n                                const labelId = `enhanced-table-checkbox-${index}`;\n\n                                return (\n                                    <TableRow\n                                        hover\n                                        role=\"checkbox\"\n                                        tabIndex={-1}\n                                        key={index}\n                                    >\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"center\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row.assessment_date}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"left\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row?.client_fullname}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"left\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row?.client_status}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell\n                                            component=\"th\"\n                                            align=\"left\"\n                                            id={labelId}\n                                            scope=\"row\"\n                                            sx={{cursor: 'pointer'}}\n                                        >\n                                            <Typography\n                                                variant=\"subtitle1\"\n                                                sx={{color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : 'grey.900'}}\n                                            >\n                                                {' '}\n                                                {row?.assessment_status}{' '}\n                                            </Typography>\n                                        </TableCell>\n\n                                        <TableCell align=\"center\" sx={{pr: 3}}>\n                                            <IconButton\n                                                color=\"primary\"\n                                                onClick={(event) => handleClick(event, row.client_assessment_id)}\n                                            >\n                                                <VisibilityTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                                            </IconButton>\n                                            <IconButton color=\"secondary\">\n                                                <EditTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                                            </IconButton>\n                                        </TableCell>\n\n\n                                    </TableRow>\n                                );\n                            })}\n                        {emptyRows > 0 && (\n                            <TableRow\n                                style={{\n                                    height: 53 * emptyRows\n                                }}\n                            >\n                                <TableCell colSpan={6}/>\n                            </TableRow>\n                        )}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n\n            {/* table pagination */}\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </MainCard>\n    );\n};\n\nexport default ClientAssessmentList;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/caseManager/clientInterventionActions.js",["2013"],"import * as actionTypes from 'store/actionTypes';\nimport {CASE_MANAGER_LIST_CLIENT_INTERVENTION_FOR_CASE_MANAGER} from \"store/actionTypes\";\n\nexport const setInterventionClientDetail = (clientUUID) => ({\n    type: actionTypes.CASE_MANAGER_SET_CLIENT_INTERVENTION_CLIENT_DETAIL,\n    data: clientUUID\n});\n\nexport const setInterventionCaseManagerDetail = (caseManagerUUID) => ({\n    type: actionTypes.CASE_MANAGER_SET_CLIENT_INTERVENTION_CASEMANAGER_DETAIL,\n    data: caseManagerUUID\n});\n\nexport const setInterventionDateAdd = (date) => ({\n    type: actionTypes.CASE_MANAGER_SET_CLIENT_INTERVENTION_DATE_ADD,\n    data: date\n});\n\nexport const setInterventionFormDetails = (values) => ({\n    type: actionTypes.CASE_MANAGER_SET_CLIENT_INTERVENTION_DETAILS,\n    data: {\n        ...values\n    }\n});\n\nexport const setInterventionFormUUID = (formDocumentUUID) => ({\n    type: actionTypes.CASE_MANAGER_SET_CLIENT_INTERVENTION_FORM_UUID,\n    data: formDocumentUUID\n});\n\n\nexport const listCaseManagerClientInterventions = (responseData) => ({\n    type: actionTypes.CASE_MANAGER_LIST_CLIENT_INTERVENTION_FOR_CASE_MANAGER,\n    data: {\n        ...responseData\n    }\n})","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-assessment/detail/assessment-data.js",["2014","2015","2016","2017","2018","2019","2020","2021","2022","2023","2024","2025","2026","2027","2028","2029","2030","2031","2032","2033","2034","2035"],"import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// material-ui\r\nimport {\r\n    Box,\r\n    Button,\r\n    CardContent,\r\n    Chip,\r\n    Divider, Fab,\r\n    Grid,\r\n    LinearProgress,\r\n    List,\r\n    ListItemIcon,\r\n    ListItemSecondaryAction,\r\n    ListItemText,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableRow, Tooltip,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport ListItemButton from '@material-ui/core/ListItemButton';\r\n\r\n// project imports\r\nimport Avatar from 'ui-component/extended/Avatar';\r\nimport SubCard from 'ui-component/cards/SubCard';\r\nimport {gridSpacing} from 'store/constant';\r\n\r\n// assets\r\nimport {IconEdit} from '@tabler/icons';\r\nimport PhonelinkRingTwoToneIcon from '@material-ui/icons/PhonelinkRingTwoTone';\r\nimport PinDropTwoToneIcon from '@material-ui/icons/PinDropTwoTone';\r\nimport MailTwoToneIcon from '@material-ui/icons/MailTwoTone';\r\nimport AttachmentIcon from '@material-ui/icons/AttachmentTwoTone';\r\nimport PageViewIcon from '@material-ui/icons/PageviewTwoTone';\r\n\r\nimport Avatar3 from 'assets/images/users/avatar-3.png';\r\nimport AddIcon from \"@material-ui/icons/AddTwoTone\";\r\nimport AssessmentForms from './assessment-forms';\r\nimport LayersTwoToneIcon from \"@material-ui/icons/LayersTwoTone\";\r\n\r\nconst AssessmentData = ({assessmentDetailData}) => {\r\n    const [assessmentFormsDialogOpen, setAssessmentFormsDialogOpen] = React.useState(false);\r\n    const handleOpenAssessmentFormsDialog = () => {\r\n        setAssessmentFormsDialogOpen(true);\r\n    };\r\n    const handleCloseAssessmentFormsDialog = () => {\r\n        setAssessmentFormsDialogOpen(false);\r\n    };\r\n\r\n    const assessmentTypes = {\r\n        'NEW_CASE_CLIENT_EXISTING_EMC_NO_REASSESS': ['existing_assessment'],\r\n        'NEW_CASE_CLIENT_EXISTING_EMC_REASSESS': ['existing_assessment', 'reassessment'],\r\n        'NEW_CASE_CLIENT_NEW_EXTRA_MURAL_CLIENT': ['newextramuralclient_assessment'],\r\n        'EXISTING_CASE_CLIENT_REASSESS': ['reassessment']\r\n    }\r\n    const noDisplayAssessmentTypeDataKeys = [\r\n        'assessment_id',\r\n        'assessment_forms'\r\n    ]\r\n\r\n    const renderAssessmentTypeDataFields = (typeDataFields) => {\r\n        let assessmentTypeDataFieldsJSX = <></>;\r\n        return Object.keys(typeDataFields).map((typeDataFieldKey, index) => {\r\n            if (noDisplayAssessmentTypeDataKeys.includes(typeDataFieldKey) === false) {\r\n                assessmentTypeDataFieldsJSX =\r\n                    <ListItemButton key={`list-data-item-${typeDataFieldKey}`}>\r\n                        <ListItemIcon>\r\n                            <MailTwoToneIcon sx={{fontSize: '1.3rem'}}/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={<Typography variant=\"subtitle1\">{typeDataFieldKey}</Typography>}/>\r\n                        <ListItemSecondaryAction>\r\n                            <Typography variant=\"body\" align=\"right\">\r\n                                {typeDataFields[typeDataFieldKey]}\r\n                            </Typography>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItemButton>\r\n\r\n            }\r\n\r\n            if (typeDataFieldKey === \"assessment_forms\") {\r\n                assessmentTypeDataFieldsJSX =\r\n                    <ListItemButton key={`list-button-item-${typeDataFieldKey}`}>\r\n                        <ListItemIcon>\r\n                            <AttachmentIcon sx={{fontSize: '1.3rem'}}/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={<Typography variant=\"subtitle1\">{typeDataFieldKey}</Typography>}/>\r\n                        <ListItemSecondaryAction>\r\n                            <AssessmentForms key={`assessment-form-item-${typeDataFieldKey}`} forms={typeDataFields[typeDataFieldKey]} open={assessmentFormsDialogOpen}\r\n                                             handleCloseDialog={handleCloseAssessmentFormsDialog}/>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItemButton>\r\n\r\n            }\r\n\r\n            return <div key={index}>\r\n                {assessmentTypeDataFieldsJSX}\r\n            </div>\r\n        })\r\n    }\r\n\r\n    let assessmentStatusJSX = <></>;\r\n    const switchAssessmentTypeRender = (assessmentStatus) => {\r\n        const assessmentTypeKeys = assessmentTypes[assessmentStatus]\r\n\r\n        assessmentStatusJSX = assessmentTypeKeys.map(typeKey => (\r\n            <Grid item lg={10} xs={12} key={`grid-key-${typeKey}`}>\r\n                <SubCard title={typeKey}>\r\n                    <List component=\"nav\">\r\n                        {renderAssessmentTypeDataFields(assessmentDetailData[typeKey])}\r\n                    </List>\r\n                </SubCard>\r\n            </Grid>\r\n        ))\r\n\r\n        return (<Grid container spacing={gridSpacing}>\r\n            {assessmentStatusJSX}\r\n        </Grid>)\r\n    }\r\n\r\n    const renderAssessmentData = () => {\r\n        if (assessmentDetailData && assessmentDetailData.assessment_status) {\r\n            return (<Grid item lg={8} xs={12}>\r\n                <Grid container direction=\"column\" spacing={gridSpacing}>\r\n                    <Grid item xs={12}>\r\n                        <SubCard title=\"Assessement Data\">\r\n                            {switchAssessmentTypeRender(assessmentDetailData.assessment_status)}\r\n                        </SubCard>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>)\r\n        }\r\n        return <></>\r\n    }\r\n\r\n    const renderClient = () => (\r\n        <Grid item lg={4} xs={12}>\r\n            <SubCard\r\n                title={\r\n                    <Grid container spacing={2} alignItems=\"center\">\r\n                        <Grid item>\r\n                            <Avatar alt=\"User 1\"/>\r\n                        </Grid>\r\n                        <Grid item xs zeroMinWidth>\r\n                            <Typography align=\"left\" variant=\"subtitle1\">\r\n                                Client Name\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n            >\r\n                <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n                    <ListItemButton>\r\n                        <ListItemIcon>\r\n                            <MailTwoToneIcon sx={{fontSize: '1.3rem'}}/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={<Typography variant=\"subtitle1\">Email</Typography>}/>\r\n                        <ListItemSecondaryAction>\r\n                            <Typography variant=\"subtitle2\" align=\"right\">\r\n                                demo@sample.com\r\n                            </Typography>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItemButton>\r\n                    <Divider/>\r\n                    <ListItemButton>\r\n                        <ListItemIcon>\r\n                            <PhonelinkRingTwoToneIcon sx={{fontSize: '1.3rem'}}/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={<Typography variant=\"subtitle1\">Phone</Typography>}/>\r\n                        <ListItemSecondaryAction>\r\n                            <Typography variant=\"subtitle2\" align=\"right\">\r\n                                (+99) 9999 999 999\r\n                            </Typography>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItemButton>\r\n                    <Divider/>\r\n                    <ListItemButton>\r\n                        <ListItemIcon>\r\n                            <PinDropTwoToneIcon sx={{fontSize: '1.3rem'}}/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={<Typography variant=\"subtitle1\">Location</Typography>}/>\r\n                        <ListItemSecondaryAction>\r\n                            <Typography variant=\"subtitle2\" align=\"right\">\r\n                                Melbourne\r\n                            </Typography>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItemButton>\r\n                </List>\r\n            </SubCard>\r\n        </Grid>\r\n    )\r\n\r\n    return (<Grid container spacing={gridSpacing}>\r\n        {renderClient()}\r\n\r\n        {renderAssessmentData()}\r\n    </Grid>)\r\n};\r\n\r\nexport default AssessmentData;\r\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/extended/Accordion.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/cards/CardSecondaryAction.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-interventions/add/forms/client.js",["2036","2037","2038","2039","2040","2041","2042","2043","2044","2045","2046","2047","2048","2049","2050","2051","2052","2053","2054","2055","2056","2057","2058","2059","2060","2061","2062","2063","2064"],"import React, {useEffect, useState} from 'react';\n\n// material-ui\nimport {\n    CardContent,\n    FormControl,\n    FormControlLabel,\n    Grid,\n    MenuItem,\n    TextField,\n    Radio,\n    RadioGroup,\n    Autocomplete,\n    FormHelperText,\n    FormGroup,\n    Checkbox,\n    Typography,\n    Chip,\n    List,\n    ListItemIcon,\n    ListItemText,\n    ListItemSecondaryAction, Divider\n} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useFormik} from \"formik\";\nimport {\n    setAssessmentCaseManagerDetail,\n    setAssessmentClientDetail,\n    setAssessmentClientStatus\n} from \"store/actions/caseManager/clientAssessmentActions\";\nimport commonApi from \"store/api-calls/common\";\nimport {setSearchUsersList} from \"store/actions/messagingActions\";\nimport MainCard from 'ui-component/cards/MainCard';\nimport InputLabel from 'ui-component/extended/Form/InputLabel';\n\nimport ListItemButton from \"@material-ui/core/ListItemButton\";\nimport MailTwoToneIcon from \"@material-ui/icons/MailTwoTone\";\nimport PhonelinkRingTwoToneIcon from \"@material-ui/icons/PhonelinkRingTwoTone\";\nimport PinDropTwoToneIcon from \"@material-ui/icons/PinDropTwoTone\";\nimport JWTContext from \"contexts/JWTContext\";\nimport {SNACKBAR_OPEN} from \"store/actionTypes\";\n\nconst ClientSelect = ({setSelectedClientValueToStore, storeData}) => {\n    const dispatch = useDispatch()\n    const [clientSelectValues, setClientSelectValues] = React.useState([]);\n    const [clientListOpen, setClientListOpen] = React.useState(false);\n    const [selectedClient, setSelectedClient] = React.useState('');\n    const [isRetrieveMode, setIsRetrieveMode] = useState(false);\n    const [title, setTitle] = useState(\"Select Client for Assessment\");\n\n    // Redux data\n    const formik = useFormik({\n        initialValues: {\n            client: storeData.client\n        },\n        validate: values => {\n            console.log(values)\n        }\n    });\n\n\n    // Render Functions\n    const prepareClientList = (clientList) => {\n        if (clientList && clientList.length > 0) {\n            const clientListOptions = clientList.map((client, index) => (\n                {label: client.fullname, id: client.user_type_pk}\n            ))\n            return clientListOptions\n        }\n        return []\n    }\n\n    const handleClientKeyInput = async (event) => {\n        const searchValue = event.target.value;\n        if (searchValue.length > 0) {\n            setClientListOpen(true)\n            const response = await commonApi.searchClient(searchValue);\n            const clientListOptions = prepareClientList(response)\n            setClientSelectValues(clientListOptions)\n        } else {\n            setClientListOpen(false)\n            setClientSelectValues([])\n        }\n    }\n\n    const displayClientSelectAutoComplete = () => {\n        if (!isRetrieveMode) {\n            return (<Grid item xs={12}>\n                <Autocomplete\n                    open={clientListOpen}\n                    disablePortal\n                    options={clientSelectValues}\n                    name='client_select'\n                    id='client_select'\n                    noOptionsText='No client found with the provided value.'\n                    onKeyUp={handleClientKeyInput}\n                    onBlur={(event) => setClientListOpen(false)}\n                    onChange={(event, client) => {\n                        if (client) {\n                            const {id: clientUUID} = client;\n                            dispatch(setSelectedClientValueToStore(clientUUID));\n                            setClientListOpen(false);\n                        }\n                    }}\n                    value={formik.values.client ? formik.values.client : ''}\n                    renderInput={(params) => <TextField {...params} />}\n                />\n            </Grid>)\n        }\n        return <></>\n    }\n\n    const displaySelectedClientDetail = () => (<Grid item xs={12}>\n        <Grid item lg={12} xs={12} sm={12} md={12}>\n            <SubCard\n                title={\n                    <Grid container spacing={2} alignItems=\"center\">\n\n                        <Grid item xs zeroMinWidth>\n                            <Typography align=\"left\" variant=\"subtitle1\">\n                                Client Name Placeholder\n                            </Typography>\n                            <Typography align=\"left\" variant=\"subtitle2\">\n                                UI/UX Designer\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                }\n            >\n                <List component=\"nav\" aria-label=\"main mailbox folders\">\n                    <ListItemButton>\n                        <ListItemIcon>\n                            <MailTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                        </ListItemIcon>\n                        <ListItemText primary={<Typography variant=\"subtitle1\">Email</Typography>}/>\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"subtitle2\" align=\"right\">\n                                Client Email Placeholder\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItemButton>\n                    <Divider/>\n                    <ListItemButton>\n                        <ListItemIcon>\n                            <PhonelinkRingTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                        </ListItemIcon>\n                        <ListItemText primary={<Typography variant=\"subtitle1\">Phone</Typography>}/>\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"subtitle2\" align=\"right\">\n                                (+99) 9999 999 999\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItemButton>\n                    <Divider/>\n                    <ListItemButton>\n                        <ListItemIcon>\n                            <PinDropTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                        </ListItemIcon>\n                        <ListItemText\n                            primary={<Typography variant=\"subtitle1\">Location</Typography>}/>\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"subtitle2\" align=\"right\">\n                                Client location Placeholder\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItemButton>\n                </List>\n            </SubCard>\n        </Grid>\n\n    </Grid>)\n\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} lg={7}>\n                <MainCard title={title}>\n                    <Grid container spacing={2} alignItems=\"center\">\n                        {displayClientSelectAutoComplete()}\n\n                    </Grid>\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ClientSelect;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-interventions/add/forms/assessment-forms.js",["2065","2066"],"import React from 'react';\n\n// material-ui\nimport {CardContent, Grid} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from \"ui-component/cards/SubCard\";\nimport FileInput from \"views/roles/common/file-input\";\nimport {setInterventionFormUUID} from \"store/actions/caseManager/clientInterventionActions\";\n\n\nconst InterventionAssessmentForms = ({providerProfessionType}) => (\n    <Grid container spacing={gridSpacing}>\n        <Grid item xs={12} sm={12}>\n            <SubCard title='Assessment Forms'>\n                <CardContent>\n                    <Grid container spacing={gridSpacing}>\n                        <FileInput title='EMP Progress Notes' setDocumentUUID={setInterventionFormUUID} fileType='TYPE_CASE_MANAGER_ASSESSMENT'/>\n\n                        <FileInput title='Team Communication' setDocumentUUID={setInterventionFormUUID}\n                                   fileType='TYPE_CASE_MANAGER_ASSESSMENT'/>\n                    </Grid>\n                </CardContent>\n            </SubCard>\n        </Grid>\n    </Grid>\n);\n\nexport default InterventionAssessmentForms;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-interventions/add/forms/intervention-details.js",["2067","2068","2069","2070","2071"],"import React from 'react';\n\n// material-ui\nimport {Autocomplete, CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport TypeOfTherapeuticInterventions from './type-therapeutic-intervention';\nimport MaskedInput from 'react-text-mask';\nimport FileInput from 'views/roles/common/file-input';\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport LocalizationProvider from \"@material-ui/lab/LocalizationProvider\";\nimport AdapterDateFns from \"@material-ui/lab/AdapterDateFns\";\nimport DatePicker from \"@material-ui/lab/DatePicker\";\nimport {setInterventionFormDetails, setInterventionDateAdd, setInterventionFormUUID} from \"store/actions/caseManager/clientInterventionActions\";\n\nconst modeOfInterventionSelectList = [\n    {\n        value: 'in-person-home',\n        label: 'In-Person Visit - Home'\n    },\n    {\n        value: 'in-person-nursing-home',\n        label: 'In-Person Visit - Nursing Home '\n    },\n    {\n        value: 'in-person-residential-facility',\n        label: 'In-Person Visit - Residential Facility '\n    },\n    {\n        value: 'in-person-work',\n        label: 'In-Person Visit - Work'\n    },\n    {\n        value: 'in-person-other',\n        label: 'In-Person Visit - Other'\n    },\n    {\n        value: 'telephone',\n        label: 'Telephone'\n    },\n    {\n        value: 'videoconferencing',\n        label: 'Videoconferencing'\n    },\n    {\n        value: 'other',\n        label: 'Other'\n    }\n];\n\nconst providerTypeClinicalInterventionTypes = {\n    'PROVIDER_TYPE_NUTRITIONIST': [\n        {label: 'Nutrition teaching', id: 'nutrition-teaching'},\n        {label: 'Other', id: 'other'},\n    ],\n    'PROVIDER_TYPE_OCCUPATIONAL_THERAPIST': [\n        {label: 'Equipment use education', id: 'equipment-use-education'},\n        {label: 'Family support', id: 'family-support'},\n        {label: 'Feeding practice', id: 'feeding-practice'},\n        {label: 'Functional exercises', id: 'functional-exercises'},\n        {label: 'Functional skills training', id: 'functional-skills-training'},\n        {label: 'Furniture height modification', id: 'furniture-height-modification'},\n        {label: 'Graded exercise therapy', id: 'graded-exercise-therapy'},\n        {label: 'Modification of house', id: 'modification-of-house'},\n        {label: 'Modification of wheelchair', id: 'modification-of-wheelchair'},\n        {label: 'Safety in home', id: 'safety-in-home'},\n    ],\n    'PROVIDER_TYPE_PHYSICAL_THERAPIST': [\n        {label: 'Rehabilitation and reablement', id: 'rehabilitation-and-reablement'},\n        {label: 'Other', id: 'other'},\n    ],\n    'PROVIDER_TYPE_REGISTERED_NURSE': [\n        {label: \"Blood work\", id: 'blood-work',},\n        {label: \"Chronic disease management\", id: 'chronic-disease-management'},\n        {label: \"Central venous access device\", id: 'central-venous-access-device'},\n        {label: \"Frailty\", id: 'frailty'},\n        {label: \"General assessment\", id: 'general-assessment'},\n        {label: \"Home oxygen\", id: 'home-oxygen'},\n        {label: \"IV therapy\", id: 'iv-therapy'},\n        {label: \"Medication management\", id: 'medication-management'},\n        {label: \"Ostomy care\", id: 'ostomy-care'},\n        {label: \"Point-of-Care (POC) diagnostic\", id: 'point-of-care-diagnostic'},\n        {label: \"Post-operative care\", id: 'post-operative-care'},\n        {label: \"Respiratory function\", id: 'respiratory-function'},\n        {label: \"Remote patient monitoring\", id: 'remote-patient-monitoring'},\n        {label: \"Tube feeding\", id: 'tube-feeding'},\n        {label: \"Symptom management\", id: 'symptom-management'},\n        {label: \"Wound care\", id: 'wound-care'},\n        {label: \"Other\", id: 'other'},\n    ],\n    'PROVIDER_TYPE_RESPIRATORY_THERAPIST': [\n        {label: \"Breathing exercises\", id: 'breathing-exercises'},\n        {label: \"Other\", id: 'other'},\n    ],\n    'PROVIDER_TYPE_SOCIAL_WORKER': [\n        {label: \"Advocacy\", id: 'advocacy'},\n        {label: \"Anger Management\", id: 'anger-management'},\n        {label: \"Adjustment Counselling\", id: 'adjustment-counselling'},\n        {label: \"Bereavement Counselling\", id: 'bereavement-counselling'},\n        {label: \"Consultation\", id: 'consultation'},\n        {label: \"Couple Therapy\", id: 'couple-therapy'},\n        {label: \"Crisis Intervention\", id: 'crisis-intervention'},\n        {label: \"Diffusing / Debriefing\", id: 'diffusing-bebriefing'},\n        {label: \"Education\", id: 'education'},\n        {label: \"Family Therapy\", id: 'family-therapy'},\n        {label: \"Grief Therapy\", id: 'grief-therapy'},\n        {label: \"Group Therapy\", id: 'group-therapy'},\n        {label: \"Individual Therapy\", id: 'individual-therapy'},\n        {label: \"Locate and Arrange Resources\", id: 'locate-and-arrange-resources'},\n        {label: \"Mediation\", id: 'mediation'},\n        {label: \"Palliative Counselling\", id: 'palliative-counselling'},\n        {label: \"Problem Solving\", id: 'problem-solving'},\n        {label: \"Relaxation Techniques\", id: 'relaxation-techniques'},\n        {label: \"Spiritual Counselling\", id: 'spiritual-counselling'},\n        {label: \"Stress Management\", id: 'stress-management'},\n        {label: \"Suicide Intervention\", id: 'suicide-intervention'},\n        {label: \"Other: (textbox to specify)\", id: 'other'}\n    ],\n    'PROVIDER_TYPE_SPEECH_LANGUAGE_THERAPIST': [\n        {label: 'Communication Problems', id: 'communication-problems'},\n        {label: 'Swallowing assessment', id: 'swallowing-assessment'},\n        {label: 'Other', id: 'other'},\n    ]\n}\n\nconst InterventionDetails = ({providerProfessionType}) => {\n    const clientInterventionAddData = useSelector(state => state.caseManager.clientIntervention.add.intervention)\n    const dispatch = useDispatch();\n\n    const formik = useFormik({\n        initialValues: {\n            date: clientInterventionAddData.date,\n            total_time: clientInterventionAddData.total_time,\n            mode_of_clinical_intervention: clientInterventionAddData.mode_of_clinical_intervention,\n            therapeutic_type: clientInterventionAddData.therapeutic_type,\n            clinical_type: clientInterventionAddData.clinical_type\n        },\n        validate: values => {\n            dispatch(setInterventionFormDetails(values))\n        }\n    });\n\n    const handleInterventionDateChange = (date) => {\n        dispatch(setInterventionDateAdd(date))\n    }\n\n    return (\n        <Grid container spacing={gridSpacing}>\n\n            <Grid item xs={12} sm={12} lg={6} md={6}>\n\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                    <DatePicker\n                        renderInput={(props) => <TextField fullWidth {...props} />}\n                        label=\"Date & Time\"\n                        value={formik.values.daily_workload_date}\n                        name='daily_workload_date'\n                        id=\"daily_workload_date\"\n                        format=\"YYYY-MM-DD\"\n                        onChange={handleInterventionDateChange}\n                    />\n                </LocalizationProvider>\n            </Grid>\n\n            <Grid item xs={12} sm={12} lg={6} md={6}>\n                <MaskedInput\n                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                    className='form-control'\n                    label='Total time spent'\n                    guide={false}\n                    name='total_time'\n                    id='total_time'\n                    value={formik.values.total_time}\n                    onChange={formik.handleChange}\n                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props} defaultValue=''/>}\n                />\n\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={8} lg={6} >\n                <SubCard title='Mode of Clinical Intervention'>\n                    <CardContent>\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item xs={12} sm={12}>\n                                <TextField select\n                                           label='Mode of Clinical Intervention'\n                                           fullWidth\n                                           name='mode_of_clinical_intervention'\n                                           id='mode_of_clinical_intervention'\n                                           value={formik.values.mode_of_clinical_intervention}\n                                           onChange={formik.handleChange}\n                                >\n                                    {modeOfInterventionSelectList.map((option) => (\n                                        <MenuItem key={option.value} value={option.value}>\n                                            {option.label}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                            </Grid>\n\n                            <Grid item xs={12} sm={12}>\n                                <TextField\n                                    id='client-reassessment-mode-of-assessment-other'\n                                    type='text'\n                                    fullWidth\n                                    label='Other'\n                                    defaultValue=''\n                                />\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </SubCard>\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={8} lg={6}>\n                <SubCard title='Therapeutic Intervention'>\n                    <CardContent>\n                        <TypeOfTherapeuticInterventions id='therapeutic_type' value={formik.values.therapeutic_type} onChangeHandler={formik.handleChange}/>\n                    </CardContent>\n                </SubCard>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={8} lg={6}>\n                <SubCard title='Clinical Intervention'>\n                    <CardContent>\n                        <Autocomplete\n                            sx={{\n                                '& .MuiOutlinedInput-root': {\n                                    pr: '30px !important'\n                                }\n                            }}\n                            multiple\n                            options={providerTypeClinicalInterventionTypes[providerProfessionType]}\n                            getOptionLabel={(option) => option.label}\n                            name='clinical_type'\n                            id='clinical_type'\n                            renderInput={(params) => <TextField {...params} label='Clinical Intervention'/>}\n                            onChange={(e, value) => {\n                                formik.setFieldValue('clinical_type', value)\n                            }}\n                        />\n                    </CardContent>\n                </SubCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default InterventionDetails;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/add/forms/details.js",["2072","2073","2074","2075","2076","2077","2078","2079","2080"],"import React, {useEffect, useState, useRef} from 'react';\n\n// material-ui\nimport {CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\nimport DatePicker from '@material-ui/lab/DatePicker';\nimport AdapterDateFns from '@material-ui/lab/AdapterDateFns';\nimport LocalizationProvider from '@material-ui/lab/LocalizationProvider';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport MaskedInput from 'react-text-mask';\n\nimport caseManagerApi from 'store/api-calls/case-manager';\nimport {setDailyWorkLoadDetails, setAddDailyWorkLoadDate} from \"store/actions/caseManager/dailyWorkloadActions\";\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nconst Details = ({editMode}) => {\n    const dispatch = useDispatch()\n    const [isEditMode, setIsEditMode] = useState(false);\n    const dailyWorkloadData = useSelector(state => state.caseManager.dailyWorkload.add)\n    const [valueBasic, setValueBasic] = React.useState(new Date());\n\n    useEffect(() => {\n        if (editMode) {\n            setIsEditMode(true);\n        }\n    }, [editMode])\n\n    const handleWorkloadDateChange = (date) => {\n        dispatch(setAddDailyWorkLoadDate(date))\n    }\n\n    const formik = useFormik({\n        initialValues: {\n            daily_workload_date: dailyWorkloadData.daily_workload_date,\n            service_recipient_travel: dailyWorkloadData.service_recipient_travel,\n            functional_center: dailyWorkloadData.functional_center\n        },\n        enableReinitialize: true,\n        validate: values => {\n            const valuesData = {\n                ...values\n            }\n            dispatch(setDailyWorkLoadDetails(valuesData));\n        }\n    });\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} sm={12} lg={6} md={6}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                    <DatePicker\n                        renderInput={(props) => <TextField fullWidth {...props} />}\n                        label=\"Date & Time\"\n                        value={formik.values.daily_workload_date}\n                        onChange={handleWorkloadDateChange}\n                        name='daily_workload_date'\n                        id=\"daily_workload_date\"\n                        format=\"YYYY-MM-DD\"\n                    />\n                </LocalizationProvider>\n            </Grid>\n\n\n            <Grid item xs={8} sm={8} lg={8} md={8}>\n                <SubCard title='Time Spent'>\n                    <CardContent>\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item xs={8} sm={8} lg={8} md={8}>\n                                <MaskedInput\n                                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                                    className=\"form-control\"\n                                    label=\"Service Recipient Travel\"\n                                    guide={false}\n                                    id=\"service_recipient_travel\"\n                                    onChange={formik.handleChange}\n                                    name='service_recipient_travel'\n                                    value={formik.values.service_recipient_travel}\n                                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                       defaultValue=\"\"/>}\n                                />\n\n                            </Grid>\n                            <Grid item xs={8} sm={8} lg={8} md={8}>\n                                <MaskedInput\n                                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                                    className=\"form-control\"\n                                    label=\"Functional Center\"\n                                    guide={false}\n                                    id=\"functional_center\"\n                                    onChange={formik.handleChange}\n                                    name='functional_center'\n                                    value={formik.values.functional_center}\n                                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                       defaultValue=\"\"/>}\n                                />\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </SubCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default Details;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/add/forms/client-caseload.js",["2081","2082","2083","2084"],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/add/forms/project-clinical-activities.js",["2085"],"import React, {useEffect, useState} from 'react';\n\n// material-ui\nimport {CardContent, Grid, TextField} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport MaskedInput from 'react-text-mask';\n\n// redux\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setDailyWorkLoadDetails} from \"store/actions/caseManager/dailyWorkloadActions\";\nimport {useFormik} from \"formik\";\n\nconst ProjectClinicalActivities = ({retrieveMode}) => {\n    const dailyWorkloadData = useSelector(state => state.caseManager.dailyWorkload.add)\n    const dispatch = useDispatch()\n\n    const [isRetrieveMode, setIsRetrieveMode] = useState(false);\n\n    useEffect(() => {\n        // Switch to retrieve mode if set in the props\n        if (retrieveMode) {\n            setIsRetrieveMode(true)\n        }\n    }, [retrieveMode])\n\n    const formik = useFormik({\n        initialValues: {\n            project_case_management_total_time: dailyWorkloadData.project_case_management_total_time,\n            project_case_management_admin_total_time: dailyWorkloadData.project_case_management_admin_total_time,\n            project_case_management_admin_other: dailyWorkloadData.project_case_management_admin_other,\n        },\n        validate: values => {\n            const valuesData = {\n                ...values\n            }\n            if (!retrieveMode) {\n                dispatch(setDailyWorkLoadDetails(valuesData));\n            }\n        }\n    });\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} sm={6} lg={6}>\n                <SubCard title='Case Management Review Board'>\n                    <CardContent>\n\n                        <MaskedInput\n                            mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                            className=\"form-control\"\n                            label=\"Total time spent\"\n                            guide={false}\n                            defaultValue={formik.values.project_case_management_total_time}\n                            onChange={formik.handleChange}\n                            name=\"project_case_management_total_time\"\n                            id=\"project_case_management_total_time\"\n                            disabled={isRetrieveMode}\n                            value={formik.values.project_case_management_total_time}\n                            render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                               defaultValue=\"\"/>}\n                        />\n                    </CardContent>\n                </SubCard>\n            </Grid>\n\n            <Grid item xs={12} sm={6} lg={6}>\n                <SubCard title='Administration (e.g., protocol, process, meetings, etc.)'>\n                    <CardContent>\n                        <MaskedInput\n                            mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                            className=\"form-control\"\n                            label=\"Total time spent\"\n                            guide={false}\n                            defaultValue={formik.values.project_case_management_admin_total_time}\n                            onChange={formik.handleChange}\n                            name=\"project_case_management_admin_total_time\"\n                            id=\"project_case_management_admin_total_time\"\n                            disabled={isRetrieveMode}\n                            value={formik.values.project_case_management_admin_total_time}\n                            render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                               defaultValue=\"\"/>}\n                        />\n                    </CardContent>\n                </SubCard>\n            </Grid>\n\n            <Grid item xs={12} sm={6} lg={6}>\n                <SubCard title='Other'>\n                    <CardContent>\n                        <MaskedInput\n                            mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                            className=\"form-control\"\n                            label=\"Total time spent\"\n                            guide={false}\n                            defaultValue={formik.values.project_case_management_admin_other}\n                            onChange={formik.handleChange}\n                            name=\"project_case_management_admin_other\"\n                            id=\"project_case_management_admin_other\"\n                            disabled={isRetrieveMode}\n                            value={formik.values.project_case_management_admin_other}\n                            render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                               defaultValue=\"\"/>}\n                        />\n                    </CardContent>\n                </SubCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ProjectClinicalActivities;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/daily-workload/add/forms/project-activities.js",["2086"],"import React, {useEffect, useState} from 'react';\n\n// material-ui\nimport {CardContent, Grid, TextField} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport MaskedInput from 'react-text-mask';\n\n// redux\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setDailyWorkLoadDetails} from \"store/actions/caseManager/dailyWorkloadActions\";\nimport {useFormik} from \"formik\";\n\nconst ProjectActivities = ({retrieveMode}) => {\n    const dailyWorkloadData = useSelector(state => state.caseManager.dailyWorkload.add)\n    const dispatch = useDispatch()\n    const [isRetrieveMode, setIsRetrieveMode] = useState(false);\n\n    useEffect(() => {\n        // Switch to retrieve mode if set in the props\n        if (retrieveMode) {\n            setIsRetrieveMode(true)\n        }\n    }, [retrieveMode])\n\n    const formik = useFormik({\n        initialValues: {\n            research_related_meetings_total_time: dailyWorkloadData.research_related_meetings_total_time,\n            research_related_administration_total_time: dailyWorkloadData.research_related_administration_total_time,\n            research_related_other: dailyWorkloadData.research_related_other,\n        },\n        validate: values => {\n            const valuesData = {\n                ...values\n            }\n            if (!retrieveMode) {\n                dispatch(setDailyWorkLoadDetails(valuesData));\n            }\n        }\n    });\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} sm={6}>\n\n                <SubCard title='Research Meetings'>\n                    <CardContent>\n                        <MaskedInput\n                            mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                            className=\"form-control\"\n                            label=\"Total time spent\"\n                            guide={false}\n                            defaultValue={formik.values.research_related_meetings_total_time}\n                            onChange={formik.handleChange}\n                            name=\"research_related_meetings_total_time\"\n                            id=\"research_related_meetings_total_time\"\n                            value={formik.values.research_related_meetings_total_time}\n                            disabled={isRetrieveMode}\n                            render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                               defaultValue=\"\"/>}\n                        />\n                    </CardContent>\n                </SubCard>\n\n            </Grid>\n\n            <Grid item xs={12} sm={6}>\n                <SubCard title='Administration (e.g., data gathering, sharing institutional documents, etc.)'>\n                    <CardContent>\n                        <MaskedInput\n                            mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                            className=\"form-control\"\n                            label=\"Total time spent\"\n                            guide={false}\n                            defaultValue={formik.values.research_related_administration_total_time}\n                            onChange={formik.handleChange}\n                            name=\"research_related_administration_total_time\"\n                            id=\"research_related_administration_total_time\"\n                            disabled={isRetrieveMode}\n                            value={formik.values.research_related_administration_total_time}\n                            render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                               defaultValue=\"\"/>}\n                        />\n                    </CardContent>\n                </SubCard>\n            </Grid>\n\n            <Grid item xs={12} sm={6}>\n\n                <SubCard title='Other'>\n                    <CardContent>\n                        <MaskedInput\n                            mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                            className=\"form-control\"\n                            label=\"Total time spent\"\n                            guide={false}\n                            defaultValue={formik.values.research_related_other}\n                            onChange={formik.handleChange}\n                            name=\"research_related_other\"\n                            disabled={isRetrieveMode}\n                            id=\"research_related_other\"\n                            value={formik.values.research_related_other}\n                            render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                               defaultValue=\"\"/>}\n                        />\n                    </CardContent>\n                </SubCard>\n\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ProjectActivities;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/common/assessment-forms-cp.js",["2087","2088","2089","2090","2091","2092"],"import React from 'react';\n\n// material-ui\nimport {CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport FileInput from \"./file-input\";\n\nconst AssessmentFormsCP = ({generalAssessmentFormAction, documentType}) => (\n    <Grid container spacing={gridSpacing}>\n        <Grid item xs={12} sm={12} lg={12} md={12}>\n            <SubCard title='Assessment Forms'>\n                <CardContent>\n                    <Grid container spacing={gridSpacing}>\n                        <FileInput title='EMP Progress Notes' setDocumentUUID={generalAssessmentFormAction}\n                                   fileType={documentType}/>\n                        <FileInput title='Home Safety Checklist' setDocumentUUID={generalAssessmentFormAction}\n                                   fileType={documentType}/>\n                        <FileInput title='EMP Team Communication' setDocumentUUID={generalAssessmentFormAction}\n                                   fileType={documentType}/>\n                        <FileInput title='Initial Health Assessment Form' setDocumentUUID={generalAssessmentFormAction}\n                                   fileType={documentType}/>\n                        <FileInput title='SBAR Communication Form - Progress Notes' setDocumentUUID={generalAssessmentFormAction}\n                                   fileType={documentType}/>\n                    </Grid>\n                </CardContent>\n            </SubCard>\n        </Grid>\n    </Grid>\n);\n\nexport default AssessmentFormsCP;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/external-partner/client-interventions/add/forms/partner-external-communication.js",["2093","2094","2095","2096","2097","2098","2099","2100","2101","2102","2103","2104","2105","2106"],"import React from 'react';\n\n// material-ui\nimport {\n    TextareaAutosize,\n    Autocomplete,\n    CardContent,\n    Checkbox,\n    FormControlLabel,\n    Grid,\n    MenuItem,\n    TextField\n} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport TypeOfTherapeuticInterventions from './type-therapeutic-intervention';\nimport MaskedInput from 'react-text-mask';\nimport FileInput from 'views/roles/common/file-input';\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport LocalizationProvider from \"@material-ui/lab/LocalizationProvider\";\nimport AdapterDateFns from \"@material-ui/lab/AdapterDateFns\";\nimport DatePicker from \"@material-ui/lab/DatePicker\";\nimport {\n    setInterventionFormDetails,\n    setInterventionDateAdd,\n    setInterventionFormUUID\n} from \"store/actions/caseManager/clientInterventionActions\";\n\n\nconst PartnerExternalCommunication = () => {\n    const clientInterventionAddData = useSelector(state => state.externalPartner.clientIntervention.add)\n    const dispatch = useDispatch();\n\n    const formik = useFormik({\n        initialValues: {\n            external_comm_external_referral_organization: clientInterventionAddData.external_comm_external_referral_organization,\n            external_comm_external_referral_user: clientInterventionAddData.external_comm_external_referral_user,\n            external_comm_external_followup_organization: clientInterventionAddData.external_comm_external_followup_organization,\n            external_comm_external_followup_user: clientInterventionAddData.external_comm_external_followup_user,\n        },\n        validate: values => {\n            dispatch(setInterventionFormDetails(values))\n        }\n    });\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} sm={12} lg={12} md={12}>\n                <Grid container spacing={gridSpacing}>\n                    <Grid item xs={12} sm={12} lg={10} md={10}>\n                        <SubCard title=\"Assessment\">\n                            <CardContent>\n                                <TextField\n                                    id=\"internal_comm_assessment_clinical_notes\"\n                                    variant=\"outlined\"\n                                    label=\"Clinical Notes\"\n                                    multiline\n                                    rows={6}\n                                    maxRows={15}\n                                    fullWidth\n\n                                />\n                            </CardContent>\n                        </SubCard>\n                    </Grid>\n\n\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default PartnerExternalCommunication;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/external-partner/client-interventions/add/forms/assessment-forms.js",["2107","2108"],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/daily-workload/forms/details.js",["2109","2110","2111","2112","2113"],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/external-partner/client-interventions/add/forms/partner-internal-communication.js",["2114","2115","2116","2117","2118","2119","2120","2121","2122","2123","2124","2125","2126","2127","2128","2129","2130","2131"],"import React from 'react';\n\n// material-ui\nimport {\n    TextareaAutosize,\n    Autocomplete,\n    CardContent,\n    Checkbox,\n    FormControlLabel,\n    Grid,\n    MenuItem,\n    TextField\n} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport TypeOfTherapeuticInterventions from './type-therapeutic-intervention';\nimport MaskedInput from 'react-text-mask';\nimport FileInput from 'views/roles/common/file-input';\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport LocalizationProvider from \"@material-ui/lab/LocalizationProvider\";\nimport AdapterDateFns from \"@material-ui/lab/AdapterDateFns\";\nimport DatePicker from \"@material-ui/lab/DatePicker\";\nimport {\n    setInterventionFormDetails,\n    setInterventionDateAdd,\n    setInterventionFormUUID\n} from \"store/actions/caseManager/clientInterventionActions\";\n\nconst modeOfInterventionSelectList = [\n    {\n        value: 'in-person-home',\n        label: 'In-Person Visit - Home'\n    },\n    {\n        value: 'in-person-nursing-home',\n        label: 'In-Person Visit - Nursing Home '\n    },\n    {\n        value: 'in-person-residential-facility',\n        label: 'In-Person Visit - Residential Facility '\n    },\n    {\n        value: 'in-person-work',\n        label: 'In-Person Visit - Work'\n    },\n    {\n        value: 'in-person-other',\n        label: 'In-Person Visit - Other'\n    },\n    {\n        value: 'telephone',\n        label: 'Telephone'\n    },\n    {\n        value: 'videoconferencing',\n        label: 'Videoconferencing'\n    },\n    {\n        value: 'other',\n        label: 'Other'\n    }\n];\n\nconst providerTypeClinicalInterventionTypes = {\n    'PROVIDER_TYPE_NUTRITIONIST': [\n        {label: 'Nutrition teaching', id: 'nutrition-teaching'},\n        {label: 'Other', id: 'other'},\n    ],\n    'PROVIDER_TYPE_OCCUPATIONAL_THERAPIST': [\n        {label: 'Equipment use education', id: 'equipment-use-education'},\n        {label: 'Family support', id: 'family-support'},\n        {label: 'Feeding practice', id: 'feeding-practice'},\n        {label: 'Functional exercises', id: 'functional-exercises'},\n        {label: 'Functional skills training', id: 'functional-skills-training'},\n        {label: 'Furniture height modification', id: 'furniture-height-modification'},\n        {label: 'Graded exercise therapy', id: 'graded-exercise-therapy'},\n        {label: 'Modification of house', id: 'modification-of-house'},\n        {label: 'Modification of wheelchair', id: 'modification-of-wheelchair'},\n        {label: 'Safety in home', id: 'safety-in-home'},\n    ],\n    'PROVIDER_TYPE_PHYSICAL_THERAPIST': [\n        {label: 'Rehabilitation and reablement', id: 'rehabilitation-and-reablement'},\n        {label: 'Other', id: 'other'},\n    ],\n    'PROVIDER_TYPE_REGISTERED_NURSE': [\n        {label: \"Blood work\", id: 'blood-work',},\n        {label: \"Chronic disease management\", id: 'chronic-disease-management'},\n        {label: \"Central venous access device\", id: 'central-venous-access-device'},\n        {label: \"Frailty\", id: 'frailty'},\n        {label: \"General assessment\", id: 'general-assessment'},\n        {label: \"Home oxygen\", id: 'home-oxygen'},\n        {label: \"IV therapy\", id: 'iv-therapy'},\n        {label: \"Medication management\", id: 'medication-management'},\n        {label: \"Ostomy care\", id: 'ostomy-care'},\n        {label: \"Point-of-Care (POC) diagnostic\", id: 'point-of-care-diagnostic'},\n        {label: \"Post-operative care\", id: 'post-operative-care'},\n        {label: \"Respiratory function\", id: 'respiratory-function'},\n        {label: \"Remote patient monitoring\", id: 'remote-patient-monitoring'},\n        {label: \"Tube feeding\", id: 'tube-feeding'},\n        {label: \"Symptom management\", id: 'symptom-management'},\n        {label: \"Wound care\", id: 'wound-care'},\n        {label: \"Other\", id: 'other'},\n    ],\n    'PROVIDER_TYPE_RESPIRATORY_THERAPIST': [\n        {label: \"Breathing exercises\", id: 'breathing-exercises'},\n        {label: \"Other\", id: 'other'},\n    ],\n    'PROVIDER_TYPE_SOCIAL_WORKER': [\n        {label: \"Advocacy\", id: 'advocacy'},\n        {label: \"Anger Management\", id: 'anger-management'},\n        {label: \"Adjustment Counselling\", id: 'adjustment-counselling'},\n        {label: \"Bereavement Counselling\", id: 'bereavement-counselling'},\n        {label: \"Consultation\", id: 'consultation'},\n        {label: \"Couple Therapy\", id: 'couple-therapy'},\n        {label: \"Crisis Intervention\", id: 'crisis-intervention'},\n        {label: \"Diffusing / Debriefing\", id: 'diffusing-bebriefing'},\n        {label: \"Education\", id: 'education'},\n        {label: \"Family Therapy\", id: 'family-therapy'},\n        {label: \"Grief Therapy\", id: 'grief-therapy'},\n        {label: \"Group Therapy\", id: 'group-therapy'},\n        {label: \"Individual Therapy\", id: 'individual-therapy'},\n        {label: \"Locate and Arrange Resources\", id: 'locate-and-arrange-resources'},\n        {label: \"Mediation\", id: 'mediation'},\n        {label: \"Palliative Counselling\", id: 'palliative-counselling'},\n        {label: \"Problem Solving\", id: 'problem-solving'},\n        {label: \"Relaxation Techniques\", id: 'relaxation-techniques'},\n        {label: \"Spiritual Counselling\", id: 'spiritual-counselling'},\n        {label: \"Stress Management\", id: 'stress-management'},\n        {label: \"Suicide Intervention\", id: 'suicide-intervention'},\n        {label: \"Other: (textbox to specify)\", id: 'other'}\n    ],\n    'PROVIDER_TYPE_SPEECH_LANGUAGE_THERAPIST': [\n        {label: 'Communication Problems', id: 'communication-problems'},\n        {label: 'Swallowing assessment', id: 'swallowing-assessment'},\n        {label: 'Other', id: 'other'},\n    ]\n}\n\nconst PartnerInternalCommunication = ({providerProfessionType}) => {\n    const clientInterventionAddData = useSelector(state => state.caseManager.clientIntervention.add)\n    const dispatch = useDispatch();\n\n    const formik = useFormik({\n        initialValues: {\n            internal_comm_assessment_clinical_notes: clientInterventionAddData.internal_comm_assessment_clinical_notes,\n            internal_comm_followup_clinical_notes: clientInterventionAddData.internal_comm_followup_clinical_notes,\n            internal_comm_internal_referral_notes: clientInterventionAddData.internal_comm_internal_referral_notes,\n        },\n        validate: values => {\n            dispatch(setInterventionFormDetails(values))\n        }\n    });\n\n    const handleInterventionDateChange = (date) => {\n        dispatch(setInterventionDateAdd(date))\n    }\n\n    return (\n        <Grid container spacing={gridSpacing}>\n\n            <Grid item xs={12} sm={12} lg={12} md={12}>\n\n\n                <Grid container spacing={gridSpacing}>\n                    <Grid item xs={12} sm={12} lg={10} md={10}>\n                        <SubCard title=\"Assessment\">\n                            <CardContent>\n                                <TextField\n                                    id=\"internal_comm_assessment_clinical_notes\"\n                                    variant=\"outlined\"\n                                    label=\"Clinical Notes\"\n                                    multiline\n                                    rows={6}\n                                    maxRows={15}\n                                    fullWidth\n\n                                />\n                            </CardContent>\n                        </SubCard>\n                    </Grid>\n\n                    <Grid item xs={12} sm={12} lg={10} md={10}>\n                        <SubCard title=\"Follow-Up Discussions\">\n                            <CardContent>\n                                <TextField\n                                    id=\"internal_comm_followup_clinical_notes\"\n                                    variant=\"outlined\"\n                                    label=\"Clinical Notes\"\n                                    multiline\n                                    rows={6}\n                                    maxRows={15}\n                                    fullWidth\n\n                                />\n                            </CardContent>\n                        </SubCard>\n                    </Grid>\n\n                    <Grid item xs={12} sm={12} lg={10} md={10}>\n                        <SubCard title=\"Internal Referral\">\n                            <CardContent>\n                                <TextField\n                                    id=\"internal_comm_internal_referral_notes\"\n                                    variant=\"outlined\"\n                                    label=\"Referral Notes\"\n                                    multiline\n                                    rows={6}\n                                    maxRows={15}\n                                    fullWidth\n\n                                />\n                            </CardContent>\n                        </SubCard>\n                    </Grid>\n\n\n                </Grid>\n            </Grid>\n\n        </Grid>\n    );\n};\n\nexport default PartnerInternalCommunication;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/external-partner/client-interventions/add/forms/client.js",["2132","2133","2134","2135","2136","2137","2138","2139","2140","2141","2142","2143","2144","2145","2146","2147","2148","2149","2150","2151","2152","2153","2154","2155","2156","2157","2158","2159","2160"],"import React, {useEffect, useState} from 'react';\n\n// material-ui\nimport {\n    CardContent,\n    FormControl,\n    FormControlLabel,\n    Grid,\n    MenuItem,\n    TextField,\n    Radio,\n    RadioGroup,\n    Autocomplete,\n    FormHelperText,\n    FormGroup,\n    Checkbox,\n    Typography,\n    Chip,\n    List,\n    ListItemIcon,\n    ListItemText,\n    ListItemSecondaryAction, Divider\n} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useFormik} from \"formik\";\nimport {\n    setAssessmentCaseManagerDetail,\n    setAssessmentClientDetail,\n    setAssessmentClientStatus\n} from \"store/actions/caseManager/clientAssessmentActions\";\nimport commonApi from \"store/api-calls/common\";\nimport {setSearchUsersList} from \"store/actions/messagingActions\";\nimport MainCard from 'ui-component/cards/MainCard';\nimport InputLabel from 'ui-component/extended/Form/InputLabel';\n\nimport ListItemButton from \"@material-ui/core/ListItemButton\";\nimport MailTwoToneIcon from \"@material-ui/icons/MailTwoTone\";\nimport PhonelinkRingTwoToneIcon from \"@material-ui/icons/PhonelinkRingTwoTone\";\nimport PinDropTwoToneIcon from \"@material-ui/icons/PinDropTwoTone\";\nimport JWTContext from \"contexts/JWTContext\";\nimport {SNACKBAR_OPEN} from \"store/actionTypes\";\nimport LocalizationProvider from \"@material-ui/lab/LocalizationProvider\";\nimport AdapterDateFns from \"@material-ui/lab/AdapterDateFns\";\nimport DatePicker from \"@material-ui/lab/DatePicker\";\n\nconst ClientSelect = ({setSelectedClientValueToStore, storeData}) => {\n    const dispatch = useDispatch()\n    const [clientSelectValues, setClientSelectValues] = React.useState([]);\n    const [clientListOpen, setClientListOpen] = React.useState(false);\n    const [selectedClient, setSelectedClient] = React.useState('');\n    const [isRetrieveMode, setIsRetrieveMode] = useState(false);\n    const [title, setTitle] = useState(\"Select Client for Assessment\");\n\n    // Redux data\n    const formik = useFormik({\n        initialValues: {\n            client: storeData.client\n        },\n        validate: values => {\n            console.log(values)\n        }\n    });\n\n\n    // Render Functions\n    const prepareClientList = (clientList) => {\n        if (clientList && clientList.length > 0) {\n            const clientListOptions = clientList.map((client, index) => (\n                {label: client.fullname, id: client.user_type_pk}\n            ))\n            return clientListOptions\n        }\n        return []\n    }\n\n    const handleClientKeyInput = async (event) => {\n        const searchValue = event.target.value;\n        if (searchValue.length > 0) {\n            setClientListOpen(true)\n            const response = await commonApi.searchClient(searchValue);\n            const clientListOptions = prepareClientList(response)\n            setClientSelectValues(clientListOptions)\n        } else {\n            setClientListOpen(false)\n            setClientSelectValues([])\n        }\n    }\n\n    const displayClientSelectAutoComplete = () => {\n        if (!isRetrieveMode) {\n            return (<Grid item xs={12}>\n                <Autocomplete\n                    open={clientListOpen}\n                    disablePortal\n                    options={clientSelectValues}\n                    name='client_select'\n                    id='client_select'\n                    noOptionsText='No client found with the provided value.'\n                    onKeyUp={handleClientKeyInput}\n                    onBlur={(event) => setClientListOpen(false)}\n                    onChange={(event, client) => {\n                        if (client) {\n                            const {id: clientUUID} = client;\n                            dispatch(setSelectedClientValueToStore(clientUUID));\n                            setClientListOpen(false);\n                        }\n                    }}\n                    value={formik.values.client ? formik.values.client : ''}\n                    renderInput={(params) => <TextField {...params} />}\n                />\n            </Grid>)\n        }\n        return <></>\n    }\n\n    const displaySelectedClientDetail = () => (<Grid item xs={12}>\n        <Grid item lg={12} xs={12} sm={12} md={12}>\n            <SubCard\n                title={\n                    <Grid container spacing={2} alignItems=\"center\">\n\n                        <Grid item xs zeroMinWidth>\n                            <Typography align=\"left\" variant=\"subtitle1\">\n                                Client Name Placeholder\n                            </Typography>\n                            <Typography align=\"left\" variant=\"subtitle2\">\n                                UI/UX Designer\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                }\n            >\n                <List component=\"nav\" aria-label=\"main mailbox folders\">\n                    <ListItemButton>\n                        <ListItemIcon>\n                            <MailTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                        </ListItemIcon>\n                        <ListItemText primary={<Typography variant=\"subtitle1\">Email</Typography>}/>\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"subtitle2\" align=\"right\">\n                                Client Email Placeholder\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItemButton>\n                    <Divider/>\n                    <ListItemButton>\n                        <ListItemIcon>\n                            <PhonelinkRingTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                        </ListItemIcon>\n                        <ListItemText primary={<Typography variant=\"subtitle1\">Phone</Typography>}/>\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"subtitle2\" align=\"right\">\n                                (+99) 9999 999 999\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItemButton>\n                    <Divider/>\n                    <ListItemButton>\n                        <ListItemIcon>\n                            <PinDropTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                        </ListItemIcon>\n                        <ListItemText\n                            primary={<Typography variant=\"subtitle1\">Location</Typography>}/>\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"subtitle2\" align=\"right\">\n                                Client location Placeholder\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItemButton>\n                </List>\n            </SubCard>\n        </Grid>\n\n    </Grid>)\n\n\n    return (\n        <Grid container spacing={gridSpacing}>\n\n            <Grid item xs={12} lg={6}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                    <DatePicker\n                        renderInput={(props) => <TextField fullWidth {...props} />}\n                        label=\"Date & Time\"\n                        value={formik.values.daily_workload_date}\n                        name='intervention_date'\n                        id=\"intervention_date\"\n                        format=\"YYYY-MM-DD\"\n                    />\n                </LocalizationProvider>\n            </Grid>\n\n            <Grid item xs={12} lg={8}>\n                <MainCard title={title}>\n                    <Grid container spacing={gridSpacing} alignItems=\"center\">\n                        {displayClientSelectAutoComplete()}\n                    </Grid>\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ClientSelect;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-assessment/add/forms/conditional-display/new-extra-mural.js",["2161","2162","2163","2164"],"import React from 'react';\n\n// material-ui\nimport {CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport ProviderSpecificForms from 'views/roles/common/provider-specific-forms';\nimport AssessmentForms from 'views/roles/common/assessment-forms';\nimport MaskedInput from 'react-text-mask';\n\n// Redux\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    setNewEMAssessmentDetails,\n    setNewEMProviderSpecificFormUUID,\n    setNewEMGeneralAssessmentFormUUID\n} from \"store/actions/caseManager/clientAssessmentActions\";\n\nconst modeOfAssessmentSelectList = [\n    {\n        value: 'in-person-home',\n        label: 'In-Person Visit - Home'\n    },\n    {\n        value: 'in-person-nursing-home',\n        label: 'In-Person Visit - Nursing Home '\n    },\n    {\n        value: 'in-person-residential-facility',\n        label: 'In-Person Visit - Residential Facility '\n    },\n    {\n        value: 'in-person-work',\n        label: 'In-Person Visit - Work'\n    },\n    {\n        value: 'in-person-other',\n        label: 'In-Person Visit - Other'\n    },\n    {\n        value: 'telephone',\n        label: 'Telephone'\n    },\n    {\n        value: 'videoconferencing',\n        label: 'Videoconferencing'\n    },\n    {\n        value: 'other',\n        label: 'Other'\n    }\n];\n\nconst NewExtraMural = () => {\n\n    const assessmentData = useSelector(state => state.caseManager.clientAssessment.add.assessment_type_data)\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            date: assessmentData.date,\n            total_time: assessmentData.total_time,\n            mode_of_assessment: assessmentData.mode_of_assessment\n        },\n        validate: values => {\n            dispatch(setNewEMAssessmentDetails(values));\n        }\n    });\n\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} sm={12} lg={6} md={6}>\n                <MaskedInput\n                    mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                    className=\"form-control\"\n                    label=\"Date\"\n                    guide={false}\n\n                    onChange={formik.handleChange}\n                    name='date'\n                    id=\"date\"\n                    value={formik.values.date}\n\n                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props} defaultValue=\"\"/>}\n                />\n            </Grid>\n\n            <Grid item xs={12} sm={12} lg={8} md={8}>\n                <MaskedInput\n                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                    className=\"form-control\"\n                    label=\"Total time spent\"\n                    guide={false}\n\n                    onChange={formik.handleChange}\n                    name='total_time'\n                    id=\"total_time\"\n                    value={formik.values.total_time}\n\n                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props} defaultValue=\"\"/>}\n                />\n            </Grid>\n\n            <Grid item xs={12} sm={8}>\n                <TextField\n                    select\n                    label=\"Mode of Assessment\"\n                    fullWidth\n\n                    onChange={formik.handleChange}\n                    name='mode_of_assessment'\n                    id=\"mode_of_assessment\"\n                    value={formik.values.mode_of_assessment}\n                >\n                    {modeOfAssessmentSelectList.map((option) => (\n                        <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </Grid>\n\n            <Grid item xs={12} sm={12} lg={8} md={8}>\n                <TextField\n                    type='text'\n                    fullWidth\n                    label='Other'\n                    defaultValue=''\n\n                    id='new-extra-mural-mode-of-assessment-other'\n                />\n            </Grid>\n\n            <Grid item xs={12} sm={8} lg={12}>\n                <ProviderSpecificForms documentType='TYPE_CASE_MANAGER_ASSESSMENT'\n                                       providerSpecificFormAction={setNewEMProviderSpecificFormUUID}/>\n            </Grid>\n\n            <Grid item xs={12} lg={12} sm={12}>\n                <AssessmentForms documentType='TYPE_CASE_MANAGER_ASSESSMENT'\n                                 generalAssessmentFormAction={setNewEMGeneralAssessmentFormUUID}/>\n            </Grid>\n\n        </Grid>\n    );\n};\n\nexport default NewExtraMural;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-assessment/add/forms/conditional-display/client-reassessment.js",["2165","2166","2167","2168"],"import React from 'react';\n\n// material-ui\nimport {CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport ProviderSpecificForms from 'views/roles/common/provider-specific-forms';\nimport AssessmentForms from 'views/roles/common/assessment-forms';\nimport MaskedInput from 'react-text-mask';\n\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    setReassessmentEMProviderSpecificFormUUID,\n    setReassessmentEMGeneralAssessmentFormUUID,\n    setReAssessmentDetails\n} from \"store/actions/caseManager/clientAssessmentActions\";\n\nconst modeOfAssessmentSelectList = [\n    {\n        value: 'in-person-home',\n        label: 'In-Person Visit - Home'\n    },\n    {\n        value: 'in-person-nursing-home',\n        label: 'In-Person Visit - Nursing Home '\n    },\n    {\n        value: 'in-person-residential-facility',\n        label: 'In-Person Visit - Residential Facility '\n    },\n    {\n        value: 'in-person-work',\n        label: 'In-Person Visit - Work'\n    },\n    {\n        value: 'in-person-other',\n        label: 'In-Person Visit - Other'\n    },\n    {\n        value: 'telephone',\n        label: 'Telephone'\n    },\n    {\n        value: 'videoconferencing',\n        label: 'Videoconferencing'\n    },\n    {\n        value: 'other',\n        label: 'Other'\n    }\n];\n\nconst ClientReasessment = () => {\n    const clientAssessmentTypeData = useSelector(state => state.caseManager.clientAssessment.add.assessment_type_data)\n    const reAssessmentData = clientAssessmentTypeData.reassessment.data\n\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            date: reAssessmentData.date,\n            reason: reAssessmentData.reason,\n            total_time: reAssessmentData.total_time,\n            mode_of_assessment: reAssessmentData.mode_of_assessment\n        },\n        validate: values => {\n            dispatch(setReAssessmentDetails(values));\n        }\n    });\n\n    return (\n        <Grid container spacing={gridSpacing}>\n\n            <Grid item xs={12} sm={12} lg={8} md={8}>\n                <MaskedInput\n                    mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                    className=\"form-control\"\n                    label=\"Date\"\n                    guide={false}\n\n                    onChange={formik.handleChange}\n                    name='date'\n                    id=\"date\"\n                    value={formik.values.date}\n\n                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props} defaultValue=\"\"/>}\n                />\n            </Grid>\n\n            <Grid item xs={12} sm={12} lg={8} md={8}>\n                <MaskedInput\n                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                    className=\"form-control\"\n                    label=\"Total time spent\"\n                    guide={false}\n\n                    onChange={formik.handleChange}\n                    name='total_time'\n                    id=\"total_time\"\n                    value={formik.values.total_time}\n\n                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props} defaultValue=\"\"/>}\n                />\n\n            </Grid>\n\n            <Grid item xs={12} sm={12} lg={8} md={8}>\n                <TextField type='text'\n                           fullWidth\n                           label='Reason'\n                           defaultValue=''\n\n                           onChange={formik.handleChange}\n                           name='reason'\n                           id=\"reason\"\n                           value={formik.values.reason}\n                />\n            </Grid>\n\n            <Grid item xs={12} sm={8}>\n                <TextField\n                    select\n                    label=\"Mode of Assessment\"\n                    fullWidth\n                    onChange={formik.handleChange}\n                    name='mode_of_assessment'\n                    id=\"mode_of_assessment\"\n                    value={formik.values.mode_of_assessment}\n                >\n                    {modeOfAssessmentSelectList.map((option) => (\n                        <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </Grid>\n\n            <Grid item xs={12} sm={12} lg={8} md={8}>\n                <TextField id='client-reassessment-mode-of-assessment-other' type='text' fullWidth label='Other'\n                           defaultValue=''/>\n            </Grid>\n\n            <Grid item xs={12} sm={8} lg={12}>\n                <ProviderSpecificForms documentType='TYPE_CASE_MANAGER_ASSESSMENT'\n                                       providerSpecificFormAction={setReassessmentEMProviderSpecificFormUUID}/>\n            </Grid>\n\n            <Grid item xs={12} sm={10} md={10} lg={12}>\n                <AssessmentForms documentType='TYPE_CASE_MANAGER_ASSESSMENT'\n                                 generalAssessmentFormAction={setReassessmentEMGeneralAssessmentFormUUID}/>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ClientReasessment;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-assessment/add/forms/conditional-display/existing-extra-mural.js",["2169","2170","2171","2172","2173","2174"],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/ui-component/extended/Form/InputLabel.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-assessment/add/forms/client.js",["2175","2176","2177","2178","2179","2180","2181","2182","2183","2184","2185","2186","2187","2188","2189","2190"],"import React, {useEffect, useState} from 'react';\n\n// material-ui\nimport {\n    CardContent,\n    FormControl,\n    FormControlLabel,\n    Grid,\n    MenuItem,\n    TextField,\n    Radio,\n    RadioGroup,\n    Autocomplete,\n    FormHelperText,\n    FormGroup,\n    Checkbox,\n    Typography,\n    Chip,\n    List,\n    ListItemIcon,\n    ListItemText,\n    ListItemSecondaryAction, Divider\n} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useFormik} from \"formik\";\nimport {\n    setAssessmentCaseManagerDetail,\n    setAssessmentClientDetail,\n    setAssessmentClientStatus\n} from \"store/actions/caseManager/clientAssessmentActions\";\nimport commonApi from \"store/api-calls/common\";\nimport {setSearchUsersList} from \"store/actions/messagingActions\";\nimport MainCard from 'ui-component/cards/MainCard';\nimport InputLabel from 'ui-component/extended/Form/InputLabel';\n\nimport ListItemButton from \"@material-ui/core/ListItemButton\";\nimport MailTwoToneIcon from \"@material-ui/icons/MailTwoTone\";\nimport PhonelinkRingTwoToneIcon from \"@material-ui/icons/PhonelinkRingTwoTone\";\nimport PinDropTwoToneIcon from \"@material-ui/icons/PinDropTwoTone\";\nimport JWTContext from \"contexts/JWTContext\";\nimport {SNACKBAR_OPEN} from \"store/actionTypes\";\n\nconst ClientSelect = () => {\n    const dispatch = useDispatch()\n    const [clientSelectValues, setClientSelectValues] = React.useState([]);\n    const [clientListOpen, setClientListOpen] = React.useState(false);\n    const [selectedClient, setSelectedClient] = React.useState('');\n    const [isRetrieveMode, setIsRetrieveMode] = useState(false);\n    const [title, setTitle] = useState(\"Select Client for Assessment\");\n    const {\n        user: {\n            user_type_pk: caseManagerUUID\n        }\n    } = React.useContext(JWTContext);\n    useEffect(() => {\n        dispatch(setAssessmentCaseManagerDetail(caseManagerUUID))\n    }, []);\n\n    // Redux data\n    const clientAssessmentStore = useSelector(state => state.caseManager.clientAssessment)\n    const clientAssessmentTypeStatus = clientAssessmentStore.add.assessment.assessment_status\n    const formik = useFormik({\n        initialValues: {\n            assessment_status: clientAssessmentTypeStatus\n        },\n        validate: values => {\n            // eslint-disable-next-line camelcase\n            const {assessment_status} = values;\n            dispatch(setAssessmentClientStatus(assessment_status));\n            dispatch(setAssessmentCaseManagerDetail(caseManagerUUID))\n        }\n    });\n\n\n    // Render Functions\n    const prepareClientList = (clientList) => {\n        if (clientList && clientList.length > 0) {\n            const clientListOptions = clientList.map((client, index) => (\n                {label: client.fullname, id: client.user_type_pk}\n            ))\n            return clientListOptions\n        }\n        return []\n    }\n\n    const handleClientKeyInput = async (event) => {\n        const searchValue = event.target.value;\n        if (searchValue.length > 0) {\n            setClientListOpen(true)\n            const response = await commonApi.searchClient(searchValue);\n            const clientListOptions = prepareClientList(response)\n            setClientSelectValues(clientListOptions)\n        } else {\n            setClientListOpen(false)\n            setClientSelectValues([])\n        }\n    }\n\n    const displayClientSelectAutoComplete = () => {\n        if (!isRetrieveMode) {\n            return (<Grid item xs={12}>\n                <Autocomplete\n                    open={clientListOpen}\n                    disablePortal\n                    options={clientSelectValues}\n                    name='referral_source'\n                    id='referral_source'\n                    noOptionsText='No client found with the provided value.'\n                    onKeyUp={handleClientKeyInput}\n                    onBlur={(event) => setClientListOpen(false)}\n                    onChange={(event, client) => {\n                        if (client) {\n                            const {id: clientUUID} = client;\n                            dispatch(setAssessmentClientDetail(clientUUID));\n                            setClientListOpen(false);\n                        }\n                    }}\n                    value={formik.values.client}\n                    renderInput={(params) => <TextField {...params} />}\n                />\n            </Grid>)\n        }\n        return <></>\n    }\n\n    const displaySelectedClientDetail = () => (<Grid item xs={12}>\n        <Grid item lg={12} xs={12} sm={12} md={12}>\n            <SubCard\n                title={\n                    <Grid container spacing={2} alignItems=\"center\">\n\n                        <Grid item xs zeroMinWidth>\n                            <Typography align=\"left\" variant=\"subtitle1\">\n                                Client Name Placeholder\n                            </Typography>\n                            <Typography align=\"left\" variant=\"subtitle2\">\n                                UI/UX Designer\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                }\n            >\n                <List component=\"nav\" aria-label=\"main mailbox folders\">\n                    <ListItemButton>\n                        <ListItemIcon>\n                            <MailTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                        </ListItemIcon>\n                        <ListItemText primary={<Typography variant=\"subtitle1\">Email</Typography>}/>\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"subtitle2\" align=\"right\">\n                                Client Email Placeholder\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItemButton>\n                    <Divider/>\n                    <ListItemButton>\n                        <ListItemIcon>\n                            <PhonelinkRingTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                        </ListItemIcon>\n                        <ListItemText primary={<Typography variant=\"subtitle1\">Phone</Typography>}/>\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"subtitle2\" align=\"right\">\n                                (+99) 9999 999 999\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItemButton>\n                    <Divider/>\n                    <ListItemButton>\n                        <ListItemIcon>\n                            <PinDropTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                        </ListItemIcon>\n                        <ListItemText\n                            primary={<Typography variant=\"subtitle1\">Location</Typography>}/>\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"subtitle2\" align=\"right\">\n                                Client location Placeholder\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItemButton>\n                </List>\n            </SubCard>\n        </Grid>\n\n    </Grid>)\n\n    const displayAssessmentTypeRadioOptions = () => (<Grid container spacing={2} alignItems=\"center\">\n        <Grid item xs={12} md={12}>\n            <SubCard title='New Case Management Client (Active)'>\n                <Grid container spacing={12}>\n                    <Grid item xs={12} sm={12} lg={12} md={12}>\n                        <FormControl>\n                            <RadioGroup\n                                row\n                                aria-label='client-status'\n                                name='assessment_status'\n                                id=\"assessment_status\"\n                                onChange={formik.handleChange}\n                                value={formik.values.assessment_status}\n                            >\n                                <FormControlLabel value='NEW_CASE_CLIENT_EXISTING_EMC_NO_REASSESS'\n                                                  control={<Radio/>}\n                                                  label='Existing Extra-Mural Client – No need to re-assess '/>\n                                <FormControlLabel value='NEW_CASE_CLIENT_EXISTING_EMC_REASSESS'\n                                                  control={<Radio/>}\n                                                  label='Existing Extra-Mural Client - Need to re-assess'/>\n                                <FormControlLabel value='NEW_CASE_CLIENT_NEW_EXTRA_MURAL_CLIENT'\n                                                  control={<Radio/>}\n                                                  label='New Extra-Mural Client'/>\n                            </RadioGroup>\n                        </FormControl>\n                    </Grid>\n                </Grid>\n            </SubCard>\n        </Grid>\n\n        <Grid item xs={12} md={12}>\n            <SubCard title='Existing Case Management Client'>\n                <Grid container spacing={12}>\n                    <Grid item xs={12} sm={12} lg={12} md={12}>\n                        <FormControl>\n                            <RadioGroup\n                                row\n                                aria-label='client-status'\n                                // value={valueLabel}\n                                // onChange={(e) => setValueLabel(e.target.value)}\n                                id=\"assessment_status\"\n                                onChange={formik.handleChange}\n                                value={formik.values.assessment_status}\n                                name='assessment_status'\n                            >\n                                <FormControlLabel value='EXISTING_CASE_CLIENT_REASSESS'\n                                                  control={<Radio/>}\n                                                  label='Need to re-assess'/>\n                            </RadioGroup>\n                        </FormControl>\n                    </Grid>\n                </Grid>\n            </SubCard>\n        </Grid>\n\n    </Grid>)\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} lg={7}>\n                <MainCard title={title}>\n                    <Grid container spacing={2} alignItems=\"center\">\n                        {displayClientSelectAutoComplete()}\n                        {displaySelectedClientDetail()}\n                    </Grid>\n                </MainCard>\n            </Grid>\n\n            <Grid item xs={12} lg={5}>\n                {displayAssessmentTypeRadioOptions()}\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ClientSelect;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-assessment/detail/assessment-data.js",["2191","2192","2193","2194","2195","2196","2197","2198","2199","2200","2201","2202","2203","2204","2205","2206","2207","2208","2209","2210","2211","2212"],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-calls/external-partner.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-assessment/add/forms/client.js",["2213","2214","2215","2216","2217","2218","2219","2220","2221","2222","2223","2224","2225","2226"],"import React, {useEffect, useState} from 'react';\n\n// material-ui\nimport {\n    CardContent,\n    FormControl,\n    FormControlLabel,\n    Grid,\n    MenuItem,\n    TextField,\n    Radio,\n    RadioGroup,\n    Autocomplete,\n    FormHelperText,\n    FormGroup,\n    Checkbox,\n    Typography,\n    Chip,\n    List,\n    ListItemIcon,\n    ListItemText,\n    ListItemSecondaryAction, Divider\n} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useFormik} from \"formik\";\nimport {\n    setAssessmentClinicianDetail,\n    setAssessmentClientDetail,\n    setAssessmentClientStatus\n} from \"store/actions/clinician/clientAssessmentActions\";\nimport commonApi from \"store/api-calls/common\";\nimport {setSearchUsersList} from \"store/actions/messagingActions\";\nimport MainCard from 'ui-component/cards/MainCard';\n\nimport ListItemButton from \"@material-ui/core/ListItemButton\";\nimport MailTwoToneIcon from \"@material-ui/icons/MailTwoTone\";\nimport PhonelinkRingTwoToneIcon from \"@material-ui/icons/PhonelinkRingTwoTone\";\nimport PinDropTwoToneIcon from \"@material-ui/icons/PinDropTwoTone\";\nimport JWTContext from \"contexts/JWTContext\";\n\nconst ClientSelect = () => {\n    const dispatch = useDispatch()\n    const [clientSelectValues, setClientSelectValues] = React.useState([]);\n    const [clientListOpen, setClientListOpen] = React.useState(false);\n    const [selectedClient, setSelectedClient] = React.useState('');\n    const [isRetrieveMode, setIsRetrieveMode] = useState(false);\n    const [title, setTitle] = useState(\"Select Client for Assessment\");\n    const {\n        user: {\n            user_type_pk: clinicianUUID\n        }\n    } = React.useContext(JWTContext);\n    useEffect(() => {\n        dispatch(setAssessmentClinicianDetail(clinicianUUID))\n    }, []);\n\n    // Redux data\n    const clientAssessmentStore = useSelector(state => state.clinician.clientAssessment)\n    const clientAssessmentTypeStatus = clientAssessmentStore.add.assessment.assessment_status\n    const formik = useFormik({\n        initialValues: {\n            assessment_status: clientAssessmentTypeStatus\n        },\n        validate: values => {\n            // eslint-disable-next-line camelcase\n            const {assessment_status} = values;\n            dispatch(setAssessmentClientStatus(assessment_status));\n            dispatch(setAssessmentClinicianDetail(clinicianUUID))\n        }\n    });\n\n\n    // Render Functions\n    const prepareClientList = (clientList) => {\n        if (clientList && clientList.length > 0) {\n            const clientListOptions = clientList.map((client, index) => (\n                {label: client.fullname, id: client.user_type_pk}\n            ))\n            return clientListOptions\n        }\n        return []\n    }\n\n    const handleClientKeyInput = async (event) => {\n        const searchValue = event.target.value;\n        if (searchValue.length > 0) {\n            setClientListOpen(true)\n            const response = await commonApi.searchClient(searchValue);\n            const clientListOptions = prepareClientList(response)\n            setClientSelectValues(clientListOptions)\n        } else {\n            setClientListOpen(false)\n            setClientSelectValues([])\n        }\n    }\n\n    const displayClientSelectAutoComplete = () => {\n        if (!isRetrieveMode) {\n            return (<Grid item xs={12}>\n                <Autocomplete\n                    open={clientListOpen}\n                    disablePortal\n                    options={clientSelectValues}\n                    name='referral_source'\n                    id='referral_source'\n                    noOptionsText='No client found with the provided value.'\n                    onKeyUp={handleClientKeyInput}\n                    onBlur={(event) => setClientListOpen(false)}\n                    onChange={(event, client) => {\n                        if (client) {\n                            const {id: clientUUID} = client;\n                            dispatch(setAssessmentClientDetail(clientUUID));\n                            setClientListOpen(false);\n                        }\n                    }}\n                    value={formik.values.client}\n                    renderInput={(params) => <TextField {...params} />}\n                />\n            </Grid>)\n        }\n        return <></>\n    }\n\n    const displaySelectedClientDetail = () => (<Grid item xs={12}>\n        <Grid item lg={12} xs={12} sm={12} md={12}>\n            <SubCard\n                title={\n                    <Grid container spacing={2} alignItems=\"center\">\n\n                        <Grid item xs zeroMinWidth>\n                            <Typography align=\"left\" variant=\"subtitle1\">\n                                Client Name Placeholder\n                            </Typography>\n                            <Typography align=\"left\" variant=\"subtitle2\">\n                                UI/UX Designer\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                }\n            >\n                <List component=\"nav\" aria-label=\"main mailbox folders\">\n                    <ListItemButton>\n                        <ListItemIcon>\n                            <MailTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                        </ListItemIcon>\n                        <ListItemText primary={<Typography variant=\"subtitle1\">Email</Typography>}/>\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"subtitle2\" align=\"right\">\n                                Client Email Placeholder\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItemButton>\n                    <Divider/>\n                    <ListItemButton>\n                        <ListItemIcon>\n                            <PhonelinkRingTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                        </ListItemIcon>\n                        <ListItemText primary={<Typography variant=\"subtitle1\">Phone</Typography>}/>\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"subtitle2\" align=\"right\">\n                                (+99) 9999 999 999\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItemButton>\n                    <Divider/>\n                    <ListItemButton>\n                        <ListItemIcon>\n                            <PinDropTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                        </ListItemIcon>\n                        <ListItemText\n                            primary={<Typography variant=\"subtitle1\">Location</Typography>}/>\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"subtitle2\" align=\"right\">\n                                Client location Placeholder\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItemButton>\n                </List>\n            </SubCard>\n        </Grid>\n\n    </Grid>)\n\n    const displayAssessmentTypeRadioOptions = () => (<Grid container spacing={2} alignItems=\"center\">\n        <Grid item xs={12} md={12}>\n            <SubCard title='New Case Management Client (Active)'>\n                <Grid container spacing={12}>\n                    <Grid item xs={12} sm={12} lg={12} md={12}>\n                        <FormControl>\n                            <RadioGroup\n                                row\n                                aria-label='client-status'\n                                name='assessment_status'\n                                id=\"assessment_status\"\n                                onChange={formik.handleChange}\n                                value={formik.values.assessment_status}\n                            >\n                                <FormControlLabel value='NEW_CASE_CLIENT_EXISTING_EMC_NO_REASSESS'\n                                                  control={<Radio/>}\n                                                  label='Existing Extra-Mural Client – No need to re-assess '/>\n                                <FormControlLabel value='NEW_CASE_CLIENT_EXISTING_EMC_REASSESS'\n                                                  control={<Radio/>}\n                                                  label='Existing Extra-Mural Client - Need to re-assess'/>\n                                <FormControlLabel value='NEW_CASE_CLIENT_NEW_EXTRA_MURAL_CLIENT'\n                                                  control={<Radio/>}\n                                                  label='New Extra-Mural Client'/>\n                            </RadioGroup>\n                        </FormControl>\n                    </Grid>\n                </Grid>\n            </SubCard>\n        </Grid>\n\n        <Grid item xs={12} md={12}>\n            <SubCard title='Existing Case Management Client'>\n                <Grid container spacing={12}>\n                    <Grid item xs={12} sm={12} lg={12} md={12}>\n                        <FormControl>\n                            <RadioGroup\n                                row\n                                aria-label='client-status'\n                                // value={valueLabel}\n                                // onChange={(e) => setValueLabel(e.target.value)}\n                                id=\"assessment_status\"\n                                onChange={formik.handleChange}\n                                value={formik.values.assessment_status}\n                                name='assessment_status'\n                            >\n                                <FormControlLabel value='EXISTING_CASE_CLIENT_REASSESS'\n                                                  control={<Radio/>}\n                                                  label='Need to re-assess'/>\n                            </RadioGroup>\n                        </FormControl>\n                    </Grid>\n                </Grid>\n            </SubCard>\n        </Grid>\n\n    </Grid>)\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} lg={7}>\n                <MainCard title={title}>\n                    <Grid container spacing={2} alignItems=\"center\">\n                        {displayClientSelectAutoComplete()}\n                        {displaySelectedClientDetail()}\n                    </Grid>\n                </MainCard>\n            </Grid>\n\n            <Grid item xs={12} lg={5}>\n                {displayAssessmentTypeRadioOptions()}\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ClientSelect;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-assessment/add/forms/conditional-display/client-reassessment.js",["2227","2228","2229","2230"],"import React from 'react';\n\n// material-ui\nimport {CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport ProviderSpecificForms from 'views/roles/common/provider-specific-forms';\nimport AssessmentForms from 'views/roles/common/assessment-forms';\nimport MaskedInput from 'react-text-mask';\n\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    setReassessmentEMProviderSpecificFormUUID,\n    setReassessmentEMGeneralAssessmentFormUUID,\n    setReAssessmentDetails\n} from \"store/actions/clinician/clientAssessmentActions\";\n\nconst modeOfAssessmentSelectList = [\n    {\n        value: 'in-person-home',\n        label: 'In-Person Visit - Home'\n    },\n    {\n        value: 'in-person-nursing-home',\n        label: 'In-Person Visit - Nursing Home '\n    },\n    {\n        value: 'in-person-residential-facility',\n        label: 'In-Person Visit - Residential Facility '\n    },\n    {\n        value: 'in-person-work',\n        label: 'In-Person Visit - Work'\n    },\n    {\n        value: 'in-person-other',\n        label: 'In-Person Visit - Other'\n    },\n    {\n        value: 'telephone',\n        label: 'Telephone'\n    },\n    {\n        value: 'videoconferencing',\n        label: 'Videoconferencing'\n    },\n    {\n        value: 'other',\n        label: 'Other'\n    }\n];\n\nconst ClientReasessment = () => {\n    const clientAssessmentTypeData = useSelector(state => state.clinician.clientAssessment.add.assessment_type_data)\n    const reAssessmentData = clientAssessmentTypeData.reassessment.data\n\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            date: reAssessmentData.date,\n            reason: reAssessmentData.reason,\n            total_time: reAssessmentData.total_time,\n            mode_of_assessment: reAssessmentData.mode_of_assessment\n        },\n        validate: values => {\n            dispatch(setReAssessmentDetails(values));\n        }\n    });\n\n    return (\n        <Grid container spacing={gridSpacing}>\n\n            <Grid item xs={12} sm={12} lg={8} md={8}>\n                <MaskedInput\n                    mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                    className=\"form-control\"\n                    label=\"Date\"\n                    guide={false}\n\n                    onChange={formik.handleChange}\n                    name='date'\n                    id=\"date\"\n                    value={formik.values.date}\n\n                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props} defaultValue=\"\"/>}\n                />\n            </Grid>\n\n            <Grid item xs={12} sm={12} lg={8} md={8}>\n                <MaskedInput\n                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                    className=\"form-control\"\n                    label=\"Total time spent\"\n                    guide={false}\n\n                    onChange={formik.handleChange}\n                    name='total_time'\n                    id=\"total_time\"\n                    value={formik.values.total_time}\n\n                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props} defaultValue=\"\"/>}\n                />\n\n            </Grid>\n\n            <Grid item xs={12} sm={12} lg={8} md={8}>\n                <TextField type='text'\n                           fullWidth\n                           label='Reason'\n                           defaultValue=''\n\n                           onChange={formik.handleChange}\n                           name='reason'\n                           id=\"reason\"\n                           value={formik.values.reason}\n                />\n            </Grid>\n\n            <Grid item xs={12} sm={8}>\n                <TextField\n                    select\n                    label=\"Mode of Assessment\"\n                    fullWidth\n\n                    onChange={formik.handleChange}\n                    name='mode_of_assessment'\n                    id=\"mode_of_assessment\"\n                    value={formik.values.mode_of_assessment}\n                >\n                    {modeOfAssessmentSelectList.map((option) => (\n                        <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </Grid>\n\n            <Grid item xs={12} sm={12} lg={8} md={8}>\n                <TextField id='client-reassessment-mode-of-assessment-other' type='text' fullWidth label='Other'\n                           defaultValue=''/>\n            </Grid>\n\n            <Grid item xs={12} sm={8} lg={12}>\n                <ProviderSpecificForms documentType='TYPE_CASE_MANAGER_ASSESSMENT'\n                                       providerSpecificFormAction={setReassessmentEMProviderSpecificFormUUID}/>\n            </Grid>\n\n            <Grid item xs={12} sm={10} md={10} lg={12}>\n                <AssessmentForms documentType='TYPE_CASE_MANAGER_ASSESSMENT'\n                                 generalAssessmentFormAction={setReassessmentEMGeneralAssessmentFormUUID}/>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ClientReasessment;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-assessment/add/forms/conditional-display/new-extra-mural.js",["2231","2232","2233","2234"],"import React from 'react';\n\n// material-ui\nimport {CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport ProviderSpecificForms from 'views/roles/common/provider-specific-forms';\nimport AssessmentForms from 'views/roles/common/assessment-forms';\nimport MaskedInput from 'react-text-mask';\n\n// Redux\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    setNewEMAssessmentDetails,\n    setNewEMProviderSpecificFormUUID,\n    setNewEMGeneralAssessmentFormUUID\n} from \"store/actions/clinician/clientAssessmentActions\";\n\nconst modeOfAssessmentSelectList = [\n    {\n        value: 'in-person-home',\n        label: 'In-Person Visit - Home'\n    },\n    {\n        value: 'in-person-nursing-home',\n        label: 'In-Person Visit - Nursing Home '\n    },\n    {\n        value: 'in-person-residential-facility',\n        label: 'In-Person Visit - Residential Facility '\n    },\n    {\n        value: 'in-person-work',\n        label: 'In-Person Visit - Work'\n    },\n    {\n        value: 'in-person-other',\n        label: 'In-Person Visit - Other'\n    },\n    {\n        value: 'telephone',\n        label: 'Telephone'\n    },\n    {\n        value: 'videoconferencing',\n        label: 'Videoconferencing'\n    },\n    {\n        value: 'other',\n        label: 'Other'\n    }\n];\n\nconst NewExtraMural = () => {\n\n    const assessmentData = useSelector(state => state.clinician.clientAssessment.add.assessment_type_data)\n    const dispatch = useDispatch()\n\n    const formik = useFormik({\n        initialValues: {\n            date: assessmentData.date,\n            total_time: assessmentData.total_time,\n            mode_of_assessment: assessmentData.mode_of_assessment\n        },\n        validate: values => {\n            dispatch(setNewEMAssessmentDetails(values));\n        }\n    });\n\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} sm={12} lg={6} md={6}>\n                <MaskedInput\n                    mask={[/[0-9]/, /[0-9]/, /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/, '-', /[0-9]/, /[0-9]/]}\n                    className=\"form-control\"\n                    label=\"Date\"\n                    guide={false}\n\n                    onChange={formik.handleChange}\n                    name='date'\n                    id=\"date\"\n                    value={formik.values.date}\n\n                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props} defaultValue=\"\"/>}\n                />\n            </Grid>\n\n            <Grid item xs={12} sm={12} lg={8} md={8}>\n                <MaskedInput\n                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                    className=\"form-control\"\n                    label=\"Total time spent\"\n                    guide={false}\n\n                    onChange={formik.handleChange}\n                    name='total_time'\n                    id=\"total_time\"\n                    value={formik.values.total_time}\n\n                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props} defaultValue=\"\"/>}\n                />\n            </Grid>\n\n            <Grid item xs={12} sm={8}>\n                <TextField\n                    select\n                    label=\"Mode of Assessment\"\n                    fullWidth\n\n                    onChange={formik.handleChange}\n                    name='mode_of_assessment'\n                    id=\"mode_of_assessment\"\n                    value={formik.values.mode_of_assessment}\n                >\n                    {modeOfAssessmentSelectList.map((option) => (\n                        <MenuItem key={option.value} value={option.value}>\n                            {option.label}\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </Grid>\n\n            <Grid item xs={12} sm={12} lg={8} md={8}>\n                <TextField\n                    type='text'\n                    fullWidth\n                    label='Other'\n                    defaultValue=''\n\n                    id='new-extra-mural-mode-of-assessment-other'\n                />\n            </Grid>\n\n            <Grid item xs={12} sm={8} lg={12}>\n                <ProviderSpecificForms documentType='TYPE_CASE_MANAGER_ASSESSMENT'\n                                       providerSpecificFormAction={setNewEMProviderSpecificFormUUID}/>\n            </Grid>\n\n            <Grid item xs={12} lg={12} sm={12}>\n                <AssessmentForms documentType='TYPE_CASE_MANAGER_ASSESSMENT'\n                                 generalAssessmentFormAction={setNewEMGeneralAssessmentFormUUID}/>\n            </Grid>\n\n        </Grid>\n    );\n};\n\nexport default NewExtraMural;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-assessment/add/forms/conditional-display/existing-extra-mural.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-interventions/add/forms/assessment-forms.js",["2235","2236"],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-interventions/add/forms/client.js",["2237","2238","2239","2240","2241","2242","2243","2244","2245","2246","2247","2248","2249","2250","2251","2252","2253","2254","2255","2256","2257","2258","2259","2260","2261","2262"],"import React, {useEffect, useState} from 'react';\n\n// material-ui\nimport {\n    CardContent,\n    FormControl,\n    FormControlLabel,\n    Grid,\n    MenuItem,\n    TextField,\n    Radio,\n    RadioGroup,\n    Autocomplete,\n    FormHelperText,\n    FormGroup,\n    Checkbox,\n    Typography,\n    Chip,\n    List,\n    ListItemIcon,\n    ListItemText,\n    ListItemSecondaryAction, Divider\n} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useFormik} from \"formik\";\nimport MainCard from 'ui-component/cards/MainCard';\nimport InputLabel from 'ui-component/extended/Form/InputLabel';\nimport ListItemButton from \"@material-ui/core/ListItemButton\";\nimport MailTwoToneIcon from \"@material-ui/icons/MailTwoTone\";\nimport PhonelinkRingTwoToneIcon from \"@material-ui/icons/PhonelinkRingTwoTone\";\nimport PinDropTwoToneIcon from \"@material-ui/icons/PinDropTwoTone\";\nimport {SNACKBAR_OPEN} from \"store/actionTypes\";\n\nimport commonApi from \"store/api-calls/common\";\nimport {setSearchUsersList} from \"store/actions/messagingActions\";\n\nimport JWTContext from \"contexts/JWTContext\";\n\n\nconst ClientSelect = ({setSelectedClientValueToStore, storeData}) => {\n    const dispatch = useDispatch()\n    const [clientSelectValues, setClientSelectValues] = React.useState([]);\n    const [clientListOpen, setClientListOpen] = React.useState(false);\n    const [selectedClient, setSelectedClient] = React.useState('');\n    const [isRetrieveMode, setIsRetrieveMode] = useState(false);\n    const [title, setTitle] = useState(\"Select Client for Assessment\");\n\n    // Redux data\n    const formik = useFormik({\n        initialValues: {\n            client: storeData.client\n        },\n        validate: values => {\n            console.log(values)\n        }\n    });\n\n\n    // Render Functions\n    const prepareClientList = (clientList) => {\n        if (clientList && clientList.length > 0) {\n            const clientListOptions = clientList.map((client, index) => (\n                {label: client.fullname, id: client.user_type_pk}\n            ))\n            return clientListOptions\n        }\n        return []\n    }\n\n    const handleClientKeyInput = async (event) => {\n        const searchValue = event.target.value;\n        if (searchValue.length > 0) {\n            setClientListOpen(true)\n            const response = await commonApi.searchClient(searchValue);\n            const clientListOptions = prepareClientList(response)\n            setClientSelectValues(clientListOptions)\n        } else {\n            setClientListOpen(false)\n            setClientSelectValues([])\n        }\n    }\n\n    const displayClientSelectAutoComplete = () => {\n        if (!isRetrieveMode) {\n            return (<Grid item xs={12}>\n                <Autocomplete\n                    open={clientListOpen}\n                    disablePortal\n                    options={clientSelectValues}\n                    name='client_select'\n                    id='client_select'\n                    noOptionsText='No client found with the provided value.'\n                    onKeyUp={handleClientKeyInput}\n                    onBlur={(event) => setClientListOpen(false)}\n                    onChange={(event, client) => {\n                        if (client) {\n                            const {id: clientUUID} = client;\n                            dispatch(setSelectedClientValueToStore(clientUUID));\n                            setClientListOpen(false);\n                        }\n                    }}\n                    value={formik.values.client ? formik.values.client : ''}\n                    renderInput={(params) => <TextField {...params} />}\n                />\n            </Grid>)\n        }\n        return <></>\n    }\n\n    const displaySelectedClientDetail = () => (<Grid item xs={12}>\n        <Grid item lg={12} xs={12} sm={12} md={12}>\n            <SubCard\n                title={\n                    <Grid container spacing={2} alignItems=\"center\">\n\n                        <Grid item xs zeroMinWidth>\n                            <Typography align=\"left\" variant=\"subtitle1\">\n                                Client Name Placeholder\n                            </Typography>\n                            <Typography align=\"left\" variant=\"subtitle2\">\n                                UI/UX Designer\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                }\n            >\n                <List component=\"nav\" aria-label=\"main mailbox folders\">\n                    <ListItemButton>\n                        <ListItemIcon>\n                            <MailTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                        </ListItemIcon>\n                        <ListItemText primary={<Typography variant=\"subtitle1\">Email</Typography>}/>\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"subtitle2\" align=\"right\">\n                                Client Email Placeholder\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItemButton>\n                    <Divider/>\n                    <ListItemButton>\n                        <ListItemIcon>\n                            <PhonelinkRingTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                        </ListItemIcon>\n                        <ListItemText primary={<Typography variant=\"subtitle1\">Phone</Typography>}/>\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"subtitle2\" align=\"right\">\n                                (+99) 9999 999 999\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItemButton>\n                    <Divider/>\n                    <ListItemButton>\n                        <ListItemIcon>\n                            <PinDropTwoToneIcon sx={{fontSize: '1.3rem'}}/>\n                        </ListItemIcon>\n                        <ListItemText\n                            primary={<Typography variant=\"subtitle1\">Location</Typography>}/>\n                        <ListItemSecondaryAction>\n                            <Typography variant=\"subtitle2\" align=\"right\">\n                                Client location Placeholder\n                            </Typography>\n                        </ListItemSecondaryAction>\n                    </ListItemButton>\n                </List>\n            </SubCard>\n        </Grid>\n\n    </Grid>)\n\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} lg={7}>\n                <MainCard title={title}>\n                    <Grid container spacing={2} alignItems=\"center\">\n                        {displayClientSelectAutoComplete()}\n\n                    </Grid>\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ClientSelect;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-interventions/add/forms/intervention-details.js",["2263","2264","2265","2266"],"import React from 'react';\n\n// material-ui\nimport {Autocomplete, CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\nimport LocalizationProvider from \"@material-ui/lab/LocalizationProvider\";\nimport AdapterDateFns from \"@material-ui/lab/AdapterDateFns\";\nimport DatePicker from \"@material-ui/lab/DatePicker\";\nimport SubCard from 'ui-component/cards/SubCard';\nimport {gridSpacing} from 'store/constant';\nimport MaskedInput from 'react-text-mask';\n\n// project imports\nimport TypeOfTherapeuticInterventions from './type-therapeutic-intervention';\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setInterventionFormDetails, setInterventionDateAdd, setInterventionFormUUID} from \"store/actions/clinician/clientInterventionActions\";\n\nconst modeOfInterventionSelectList = [\n    {\n        value: 'in-person-home',\n        label: 'In-Person Visit - Home'\n    },\n    {\n        value: 'in-person-nursing-home',\n        label: 'In-Person Visit - Nursing Home '\n    },\n    {\n        value: 'in-person-residential-facility',\n        label: 'In-Person Visit - Residential Facility '\n    },\n    {\n        value: 'in-person-work',\n        label: 'In-Person Visit - Work'\n    },\n    {\n        value: 'in-person-other',\n        label: 'In-Person Visit - Other'\n    },\n    {\n        value: 'telephone',\n        label: 'Telephone'\n    },\n    {\n        value: 'videoconferencing',\n        label: 'Videoconferencing'\n    },\n    {\n        value: 'other',\n        label: 'Other'\n    }\n];\n\nconst providerTypeClinicalInterventionTypes = {\n    'PROVIDER_TYPE_NUTRITIONIST': [\n        {label: 'Nutrition teaching', id: 'nutrition-teaching'},\n        {label: 'Other', id: 'other'},\n    ],\n    'PROVIDER_TYPE_OCCUPATIONAL_THERAPIST': [\n        {label: 'Equipment use education', id: 'equipment-use-education'},\n        {label: 'Family support', id: 'family-support'},\n        {label: 'Feeding practice', id: 'feeding-practice'},\n        {label: 'Functional exercises', id: 'functional-exercises'},\n        {label: 'Functional skills training', id: 'functional-skills-training'},\n        {label: 'Furniture height modification', id: 'furniture-height-modification'},\n        {label: 'Graded exercise therapy', id: 'graded-exercise-therapy'},\n        {label: 'Modification of house', id: 'modification-of-house'},\n        {label: 'Modification of wheelchair', id: 'modification-of-wheelchair'},\n        {label: 'Safety in home', id: 'safety-in-home'},\n    ],\n    'PROVIDER_TYPE_PHYSICAL_THERAPIST': [\n        {label: 'Rehabilitation and reablement', id: 'rehabilitation-and-reablement'},\n        {label: 'Other', id: 'other'},\n    ],\n    'PROVIDER_TYPE_REGISTERED_NURSE': [\n        {label: \"Blood work\", id: 'blood-work',},\n        {label: \"Chronic disease management\", id: 'chronic-disease-management'},\n        {label: \"Central venous access device\", id: 'central-venous-access-device'},\n        {label: \"Frailty\", id: 'frailty'},\n        {label: \"General assessment\", id: 'general-assessment'},\n        {label: \"Home oxygen\", id: 'home-oxygen'},\n        {label: \"IV therapy\", id: 'iv-therapy'},\n        {label: \"Medication management\", id: 'medication-management'},\n        {label: \"Ostomy care\", id: 'ostomy-care'},\n        {label: \"Point-of-Care (POC) diagnostic\", id: 'point-of-care-diagnostic'},\n        {label: \"Post-operative care\", id: 'post-operative-care'},\n        {label: \"Respiratory function\", id: 'respiratory-function'},\n        {label: \"Remote patient monitoring\", id: 'remote-patient-monitoring'},\n        {label: \"Tube feeding\", id: 'tube-feeding'},\n        {label: \"Symptom management\", id: 'symptom-management'},\n        {label: \"Wound care\", id: 'wound-care'},\n        {label: \"Other\", id: 'other'},\n    ],\n    'PROVIDER_TYPE_RESPIRATORY_THERAPIST': [\n        {label: \"Breathing exercises\", id: 'breathing-exercises'},\n        {label: \"Other\", id: 'other'},\n    ],\n    'PROVIDER_TYPE_SOCIAL_WORKER': [\n        {label: \"Advocacy\", id: 'advocacy'},\n        {label: \"Anger Management\", id: 'anger-management'},\n        {label: \"Adjustment Counselling\", id: 'adjustment-counselling'},\n        {label: \"Bereavement Counselling\", id: 'bereavement-counselling'},\n        {label: \"Consultation\", id: 'consultation'},\n        {label: \"Couple Therapy\", id: 'couple-therapy'},\n        {label: \"Crisis Intervention\", id: 'crisis-intervention'},\n        {label: \"Diffusing / Debriefing\", id: 'diffusing-bebriefing'},\n        {label: \"Education\", id: 'education'},\n        {label: \"Family Therapy\", id: 'family-therapy'},\n        {label: \"Grief Therapy\", id: 'grief-therapy'},\n        {label: \"Group Therapy\", id: 'group-therapy'},\n        {label: \"Individual Therapy\", id: 'individual-therapy'},\n        {label: \"Locate and Arrange Resources\", id: 'locate-and-arrange-resources'},\n        {label: \"Mediation\", id: 'mediation'},\n        {label: \"Palliative Counselling\", id: 'palliative-counselling'},\n        {label: \"Problem Solving\", id: 'problem-solving'},\n        {label: \"Relaxation Techniques\", id: 'relaxation-techniques'},\n        {label: \"Spiritual Counselling\", id: 'spiritual-counselling'},\n        {label: \"Stress Management\", id: 'stress-management'},\n        {label: \"Suicide Intervention\", id: 'suicide-intervention'},\n        {label: \"Other: (textbox to specify)\", id: 'other'}\n    ],\n    'PROVIDER_TYPE_SPEECH_LANGUAGE_THERAPIST': [\n        {label: 'Communication Problems', id: 'communication-problems'},\n        {label: 'Swallowing assessment', id: 'swallowing-assessment'},\n        {label: 'Other', id: 'other'},\n    ]\n}\n\nconst InterventionDetails = ({providerProfessionType}) => {\n    const clientInterventionAddData = useSelector(state => state.clinician.clientIntervention.add.intervention)\n    const dispatch = useDispatch();\n\n    const formik = useFormik({\n        initialValues: {\n            date: clientInterventionAddData.date,\n            total_time: clientInterventionAddData.total_time,\n            mode_of_clinical_intervention: clientInterventionAddData.mode_of_clinical_intervention,\n            therapeutic_type: clientInterventionAddData.therapeutic_type,\n            clinical_type: clientInterventionAddData.clinical_type\n        },\n        validate: values => {\n            dispatch(setInterventionFormDetails(values))\n        }\n    });\n\n    const handleInterventionDateChange = (date) => {\n        dispatch(setInterventionDateAdd(date))\n    }\n\n    return (\n        <Grid container spacing={gridSpacing}>\n\n            <Grid item xs={12} sm={12} lg={6} md={6}>\n\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                    <DatePicker\n                        renderInput={(props) => <TextField fullWidth {...props} />}\n                        label=\"Date & Time\"\n                        value={formik.values.daily_workload_date}\n                        name='daily_workload_date'\n                        id=\"daily_workload_date\"\n                        format=\"YYYY-MM-DD\"\n                        onChange={handleInterventionDateChange}\n                    />\n                </LocalizationProvider>\n            </Grid>\n\n            <Grid item xs={12} sm={12} lg={6} md={6}>\n                <MaskedInput\n                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                    className='form-control'\n                    label='Total time spent'\n                    guide={false}\n                    name='total_time'\n                    id='total_time'\n                    value={formik.values.total_time}\n                    onChange={formik.handleChange}\n                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props} defaultValue=''/>}\n                />\n\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={8} lg={6} >\n                <SubCard title='Mode of Clinical Intervention'>\n                    <CardContent>\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item xs={12} sm={12}>\n                                <TextField select\n                                           label='Mode of Clinical Intervention'\n                                           fullWidth\n                                           name='mode_of_clinical_intervention'\n                                           id='mode_of_clinical_intervention'\n                                           value={formik.values.mode_of_clinical_intervention}\n                                           onChange={formik.handleChange}\n                                >\n                                    {modeOfInterventionSelectList.map((option) => (\n                                        <MenuItem key={option.value} value={option.value}>\n                                            {option.label}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                            </Grid>\n\n                            <Grid item xs={12} sm={12}>\n                                <TextField\n                                    id='client-reassessment-mode-of-assessment-other'\n                                    type='text'\n                                    fullWidth\n                                    label='Other'\n                                    defaultValue=''\n                                />\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </SubCard>\n            </Grid>\n\n            <Grid item xs={12} sm={6} md={8} lg={6}>\n                <SubCard title='Therapeutic Intervention'>\n                    <CardContent>\n                        <TypeOfTherapeuticInterventions id='therapeutic_type' value={formik.values.therapeutic_type} onChangeHandler={formik.handleChange}/>\n                    </CardContent>\n                </SubCard>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={8} lg={6}>\n                <SubCard title='Clinical Intervention'>\n                    <CardContent>\n                        <Autocomplete\n                            sx={{\n                                '& .MuiOutlinedInput-root': {\n                                    pr: '30px !important'\n                                }\n                            }}\n                            multiple\n                            options={providerTypeClinicalInterventionTypes[providerProfessionType]}\n                            getOptionLabel={(option) => option.label}\n                            name='clinical_type'\n                            id='clinical_type'\n                            renderInput={(params) => <TextField {...params} label='Clinical Intervention'/>}\n                            onChange={(e, value) => {\n                                formik.setFieldValue('clinical_type', value)\n                            }}\n                        />\n                    </CardContent>\n                </SubCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default InterventionDetails;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/externalPartner/clientInterventionActions.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-assessment/detail/assessment-forms.js",["2267","2268","2269","2270","2271","2272","2273"],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/daily-workload/add/forms/details.js",["2274","2275","2276","2277","2278","2279","2280"],"import React, {useEffect, useState, useRef} from 'react';\n\n// material-ui\nimport {CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\nimport DatePicker from '@material-ui/lab/DatePicker';\nimport AdapterDateFns from '@material-ui/lab/AdapterDateFns';\nimport LocalizationProvider from '@material-ui/lab/LocalizationProvider';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport MaskedInput from 'react-text-mask';\n\nimport caseManagerApi from 'store/api-calls/case-manager';\nimport {setDailyWorkLoadDetails, setAddDailyWorkLoadDate} from \"store/actions/clinician/dailyWorkloadActions\";\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nconst Details = ({editMode}) => {\n    const dispatch = useDispatch()\n    const [isEditMode, setIsEditMode] = useState(false);\n    const dailyWorkloadData = useSelector(state => state.clinician.dailyWorkload.add)\n\n    console.log(dailyWorkloadData)\n\n    useEffect(() => {\n        if (editMode) {\n            setIsEditMode(true);\n        }\n    }, [editMode])\n\n    const handleWorkloadDateChange = (date) => {\n        dispatch(setAddDailyWorkLoadDate(date))\n    }\n\n    const formik = useFormik({\n        initialValues: {\n            daily_workload_date: dailyWorkloadData.daily_workload_date,\n            service_recipient_travel: dailyWorkloadData.service_recipient_travel,\n            functional_center: dailyWorkloadData.functional_center\n        },\n        enableReinitialize: true,\n        validate: values => {\n            const valuesData = {\n                ...values\n            }\n            dispatch(setDailyWorkLoadDetails(valuesData));\n        }\n    });\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} sm={12} lg={6} md={6}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                    <DatePicker\n                        renderInput={(props) => <TextField fullWidth {...props} />}\n                        label=\"Date & Time\"\n                        value={formik.values.daily_workload_date}\n                        onChange={handleWorkloadDateChange}\n                        name='daily_workload_date'\n                        id=\"daily_workload_date\"\n                        format=\"YYYY-MM-DD\"\n                    />\n                </LocalizationProvider>\n            </Grid>\n\n\n            <Grid item xs={8} sm={8} lg={8} md={8}>\n                <SubCard title='Time Spent'>\n                    <CardContent>\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item xs={8} sm={8} lg={8} md={8}>\n                                <MaskedInput\n                                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                                    className=\"form-control\"\n                                    label=\"Service Recipient Travel\"\n                                    guide={false}\n                                    id=\"service_recipient_travel\"\n                                    onChange={formik.handleChange}\n                                    name='service_recipient_travel'\n                                    value={formik.values.service_recipient_travel}\n                                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                       defaultValue=\"\"/>}\n                                />\n\n                            </Grid>\n                            <Grid item xs={8} sm={8} lg={8} md={8}>\n                                <MaskedInput\n                                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                                    className=\"form-control\"\n                                    label=\"Functional Center\"\n                                    guide={false}\n                                    id=\"functional_center\"\n                                    onChange={formik.handleChange}\n                                    name='functional_center'\n                                    value={formik.values.functional_center}\n                                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                       defaultValue=\"\"/>}\n                                />\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </SubCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default Details;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/daily-workload/add/forms/client-caseload.js",["2281","2282","2283","2284"],"import React, {useEffect, useState} from 'react';\n\n// material-ui\nimport {CardContent, Checkbox, FormControlLabel, Grid, MenuItem, TextField} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\nimport SubCard from 'ui-component/cards/SubCard';\nimport MaskedInput from 'react-text-mask';\n\n// redux\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setDailyWorkLoadDetails} from \"store/actions/clinician/dailyWorkloadActions\";\nimport {useFormik} from \"formik\";\n\nconst ClientCaseload = ({retrieveMode}) => {\n    const dailyWorkloadData = useSelector(state => state.clinician.dailyWorkload.add)\n    const dispatch = useDispatch()\n    const [isRetrieveMode, setIsRetrieveMode] = useState(false);\n\n    useEffect(() => {\n        // Switch to retrieve mode if set in the props\n        if (retrieveMode) {\n            setIsRetrieveMode(true)\n        }\n    }, [retrieveMode])\n\n    const formik = useFormik({\n        initialValues: {\n            client_caseload_casemanagement_number_clients: dailyWorkloadData.client_caseload_casemanagement_number_clients,\n            client_caseload_casemanagement_total_time: dailyWorkloadData.client_caseload_casemanagement_total_time,\n            client_caseload_regular_number_clients: dailyWorkloadData.client_caseload_regular_number_clients,\n            client_caseload_regular_total_time: dailyWorkloadData.client_caseload_regular_total_time\n        },\n        validate: values => {\n            const valuesData = {\n                ...values\n            }\n            if (!retrieveMode) {\n                dispatch(setDailyWorkLoadDetails(valuesData));\n            }\n        }\n    });\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} sm={6}>\n                <SubCard title='Case Management Clients'>\n                    <CardContent>\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item xs={12} sm={8}>\n                                <TextField type='number'\n                                           fullWidth\n                                           label='Number of Case Management Clients'\n                                           defaultValue={formik.values.client_caseload_casemanagement_number_clients}\n                                           onChange={formik.handleChange}\n                                           name='client_caseload_casemanagement_number_clients'\n                                           id=\"client_caseload_casemanagement_number_clients\"\n                                           disabled={isRetrieveMode}\n                                           value={formik.values.client_caseload_casemanagement_number_clients}\n                                />\n                            </Grid>\n\n                            <Grid item xs={12} sm={8}>\n                                <MaskedInput\n                                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                                    className=\"form-control\"\n                                    label=\"Total time spent\"\n                                    guide={false}\n                                    defaultValue={formik.values.client_caseload_casemanagement_total_time}\n                                    onChange={formik.handleChange}\n                                    name='client_caseload_casemanagement_total_time'\n                                    id=\"client_caseload_casemanagement_total_time\"\n                                    disabled={isRetrieveMode}\n                                    value={formik.values.client_caseload_casemanagement_total_time}\n                                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                       defaultValue=\"\"/>}\n                                />\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </SubCard>\n            </Grid>\n\n            <Grid item xs={12} sm={6}>\n                <SubCard title='Regular Clients'>\n                    <CardContent>\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item xs={12} sm={8}>\n                                <TextField type='number'\n                                           fullWidth\n                                           label='Number of Regular Clients'\n                                           defaultValue={formik.values.client_caseload_regular_number_clients}\n                                           onChange={formik.handleChange}\n                                           name='client_caseload_regular_number_clients'\n                                           id=\"client_caseload_regular_number_clients\"\n                                           disabled={isRetrieveMode}\n                                           value={formik.values.client_caseload_regular_number_clients}\n                                />\n                            </Grid>\n                            <Grid item xs={12} sm={8}>\n                                <MaskedInput\n                                    mask={[/[0-9]/, /[0-9]/, ':', /[0-9]/, /[0-9]/]}\n                                    className=\"form-control\"\n                                    label=\"Total time spent\"\n                                    guide={false}\n                                    defaultValue={formik.values.client_caseload_regular_total_time}\n                                    onChange={formik.handleChange}\n                                    name='client_caseload_regular_total_time'\n                                    id=\"client_caseload_regular_total_time\"\n                                    value={formik.values.client_caseload_regular_total_time}\n                                    disabled={isRetrieveMode}\n                                    render={(ref, props) => <TextField fullWidth inputRef={ref} {...props}\n                                                                       defaultValue=\"\"/>}\n                                />\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                </SubCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default ClientCaseload;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/common/communication/share/index.js",["2285","2286","2287","2288"],"import * as React from 'react';\nimport {IconButton} from \"@material-ui/core\";\n\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport FollowUpIcon from '@material-ui/icons//MarkAsUnreadRounded';\nimport ReferralIcon from '@material-ui/icons/AssignmentIndOutlined';\nimport ShareDialogReferral from './share-dialog-referral';\nimport ShareDialogFollowUp from './share-dialog-follow-up';\nimport JWTContext from \"contexts/JWTContext\";\n\nexport default function ShareIndex({share_object_id, instance_type, referral_tooltip, followup_tooltip}) {\n    const [openReferral, setOpenReferral] = React.useState(false);\n    const [openFollowUp, setOpenFollowUp] = React.useState(false);\n\n    const {\n        user: {\n            user_type_pk: clinicianUUID\n        }\n    } = React.useContext(JWTContext);\n\n\n    const handleClickOpenReferral = () => {\n        setOpenReferral(true);\n    };\n\n    const handleCloseReferral = () => {\n        setOpenReferral(false);\n    };\n\n    const handleClickOpenFollowUp = () => {\n        setOpenFollowUp(true);\n    };\n\n    const handleCloseFollowUp = () => {\n        setOpenFollowUp(false);\n    };\n\n    return (\n        <>\n            <Tooltip title={referral_tooltip}>\n                <IconButton color=\"secondary\" onClick={handleClickOpenReferral}>\n                    <ReferralIcon sx={{fontSize: '1.6rem'}}/>\n                </IconButton>\n            </Tooltip>\n\n            <Tooltip title={followup_tooltip}>\n                <IconButton color=\"secondary\" onClick={handleClickOpenFollowUp}>\n                    <FollowUpIcon sx={{fontSize: '1.6rem'}} on/>\n                </IconButton>\n            </Tooltip>\n\n            <ShareDialogReferral open={openReferral}\n                                 handleClose={handleCloseReferral}\n                                 share_object_id={share_object_id}\n                                 instance_type={instance_type}\n                                 from_user={clinicianUUID}\n            />\n\n            <ShareDialogFollowUp open={openFollowUp}\n                                 handleClose={handleCloseFollowUp}\n                                 share_object_id={share_object_id}\n                                 instance_type={instance_type}\n                                 from_user={clinicianUUID}\n            />\n\n        </>\n    );\n};","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-calls/clinician.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/case-manager/client-interventions/add/forms/type-therapeutic-intervention.js",["2289","2290","2291"],"import React from 'react';\n\n// material-ui\nimport {Grid, MenuItem, TextField} from '@material-ui/core';\n\n// project imports\nimport {gridSpacing} from 'store/constant';\n\nconst typeOfTherapeuticInterventionList = [\n    {\n        value: 'therapeutic-intervention-type-admin-tasks',\n        label: 'Case-Specific Administrative Tasks (e.g., charting, progress notes, team communication, emails, discharge plans, medication updates, review shared care plan, etc.)'\n    },\n    {\n        value: 'therapeutic-intervention-type-delivery-of-supplies',\n        label: 'Delivery and/or pick up of Extra-Mural Program supplies or equipment'\n    },\n    {\n        value: 'therapeutic-intervention-type-bereavement-visit',\n        label: 'Bereavement visit to a significant other'\n    },\n    {\n        value: 'therapeutic-intervention-type-case-conferences',\n        label: 'Case Conferences'\n    },\n    {\n        value: 'therapeutic-intervention-type-other',\n        label: 'Other'\n    },\n\n];\n\nconst TypeOfTherapeuticInterventions = ({value, onChangeHandler, id}) => (\n    <Grid container spacing={gridSpacing}>\n        <Grid item xs={12} sm={12}>\n            <TextField id={id} name={id} select label='Mode of Therapeutic Intervention'\n                       value={value} fullWidth onChange={onChangeHandler}>\n                {typeOfTherapeuticInterventionList.map((option) => (\n                    <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                    </MenuItem>\n                ))}\n            </TextField>\n        </Grid>\n    </Grid>\n);\n\nexport default TypeOfTherapeuticInterventions;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/clinician/dailyWorkloadActions.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/clinician/clientAssessmentActions.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/external-partner/client-interventions/add/forms/type-therapeutic-intervention.js",["2292","2293","2294"],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/clinician/clientInterventionActions.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-assessment/detail/assessment-forms.js",["2295","2296","2297","2298","2299","2300","2301"],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/client-interventions/add/forms/type-therapeutic-intervention.js",["2302","2303","2304"],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/common/communication/share/share-dialog-follow-up.js",["2305","2306","2307","2308","2309","2310","2311","2312","2313","2314","2315","2316","2317"],"import React, {useEffect} from 'react';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {\n    AppBar,\n    Button,\n    Dialog,\n    Divider,\n    IconButton,\n    Slide,\n    Toolbar,\n    CardContent,\n    CardActions,\n    Typography,\n    Grid, Tooltip, TextField, MenuItem, DialogContent, Tabs, Tab, Box\n} from '@material-ui/core';\n\n\n// assets\nimport SendIcon from '@material-ui/icons/Send';\nimport CloseIcon from '@material-ui/icons/Close';\nimport PersonOutlineTwoToneIcon from \"@material-ui/icons/PersonOutlineTwoTone\";\n\nimport {\n    gridSpacing,\n    provider_types_followup_value_label_list as providerTypesList,\n    organizations_value_label_list as organizationsListExternalFollowUp,\n    mode_of_communication_value_label_list as modeOfCommunicationList,\n    organizations_value_label_list as organizationsList, SHARE_COMMUNICATION_TYPE\n} from \"store/constant\";\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport {useFormik} from \"formik\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\n\nimport MedicationOutlinedIcon from \"@material-ui/icons/MedicationOutlined\";\nimport {\n    setApplicationUserSearchList,\n    setApplicationUserSearchParams\n} from \"store/actions/search/applicationUser\";\n\nimport {setInternalFollowUpShareData, setExternalFollowUpShareData} from \"store/actions/share/followup\";\nimport searchApi from \"store/api-calls/search\";\nimport Autocomplete from \"@material-ui/core/Autocomplete\";\nimport shareApi from \"../../../../../store/api-calls/share\";\nimport {SNACKBAR_OPEN} from \"../../../../../store/actionTypes\";\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative'\n    },\n\n    title: {\n        marginLeft: theme.spacing(2),\n        flex: 1\n    },\n    fulldialog: {\n        '& .MuiPaper-root': {\n            padding: '0px'\n        }\n    }\n}));\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && (\n                <Box\n                    sx={{\n                        p: 3\n                    }}\n                >\n                    <Typography>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n\nconst Transition = React.forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\n\nexport default function ShareDialogFollowUp({open, handleClose, share_object_id, instance_type, from_user}) {\n    const classes = useStyles();\n    const [value, setValue] = React.useState(0);\n    const [progressLoader, setProgressLoader] = React.useState(false);\n\n    const dispatch = useDispatch();\n    const applicationUserSearchList = useSelector(state => state.search.applicationUser.list)\n    const applicationUserSearchParams = useSelector(state => state.search.applicationUser.params)\n    const internalFollowUpData = useSelector(state => state.share.internalFollowup)\n    const externalFollowUpData = useSelector(state => state.share.externalFollowup)\n\n    useEffect(() => {\n        /*\n         * Set the Default values in Internal and External Referrals for the Selected Object\n         */\n        dispatch(setInternalFollowUpShareData({\n            from_user,\n            instance_type,\n            instance_object: share_object_id\n        }))\n\n        dispatch(setExternalFollowUpShareData({\n            from_user,\n            instance_type,\n            instance_object: share_object_id\n        }))\n    }, [])\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    const formik_internal = useFormik({\n        initialValues: {\n            mode: internalFollowUpData.mode,\n            discussion_details: ''\n        },\n        validate: values => {\n            dispatch(setInternalFollowUpShareData(values))\n        }\n    });\n\n    const formik_external = useFormik({\n        initialValues: {\n            mode: externalFollowUpData.mode,\n            discussion_details: ''\n        },\n        validate: values => {\n            dispatch(setExternalFollowUpShareData(values))\n        }\n    });\n\n    const formik_user_search = useFormik({\n        initialValues: {\n            provider_type: '',\n            organization: '',\n        },\n        validate: values => {\n            dispatch(setApplicationUserSearchParams(values))\n            dispatch(setApplicationUserSearchList([]))\n        }\n    });\n\n    const fetchSearchUsersList = async (formData) => {\n        const response = await searchApi.searchApplicationUsers(formData);\n        if ('result' in response && response.result === true) {\n            dispatch(setApplicationUserSearchList(response.data))\n        } else {\n            dispatch(setApplicationUserSearchList([]))\n        }\n    }\n\n    const handleClientKeyInput = async (event) => {\n        const searchValue = event.target.value;\n\n        if (searchValue.length > 0) {\n            dispatch(setApplicationUserSearchParams({\n                name: searchValue\n            }))\n\n            // This new object is created and sent to the request function to avoid delays in dispatch retrieval\n            const updatedNameAndFormData = {\n                ...applicationUserSearchParams,\n                name: searchValue\n            }\n            fetchSearchUsersList(updatedNameAndFormData)\n        } else {\n            dispatch(setApplicationUserSearchList([]))\n        }\n    }\n\n    const handleSendFollowUpClick = async (event, referralType) => {\n        const formData = referralType === SHARE_COMMUNICATION_TYPE.INTERNAL_FOLLOWUP ? internalFollowUpData : externalFollowUpData;\n\n        setProgressLoader(true);\n        const response = await shareApi.sendCommunicationShare(formData);\n\n        if (response && 'result' in response) {\n            if (response.result === true) {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Follow up request is sent.',\n                    variant: 'alert',\n                    alertSeverity: 'success', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'left'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            } else {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Follow up request could not be sent. Please try again',\n                    variant: 'alert',\n                    alertSeverity: 'error', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'left'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            }\n        } else {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Follow up request could not be sent. Please try again',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'left'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n\n        setProgressLoader(false);\n    }\n\n    const getInternalFollowUp = () => (\n        <Grid item xs={12} md={6} lg={5}>\n            <MainCard title='Internal Follow Up Discussion' content={false}>\n                <CardContent>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={7} lg={8}>\n                            <TextField\n                                select\n                                label=\"Provider Type\"\n                                fullWidth\n                                onChange={formik_user_search.handleChange}\n                                name='provider_type'\n                                id=\"provider_type\"\n                                value={formik_user_search.values.provider_type}\n                            >\n                                {providerTypesList.map((option) => (\n                                    <MenuItem key={option.value} value={option.value}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </Grid>\n\n                        <Grid item xs={7} lg={7}>\n                            <Autocomplete\n                                freeSolo\n                                id=\"internal-followup-application-user\"\n                                disableClearable\n                                options={applicationUserSearchList.map((option) => ({\n                                        label: option.user.fullname,\n                                        id: option.app_user_id\n                                    })\n                                )}\n                                onKeyUpCapture={handleClientKeyInput}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search User\"\n                                        InputProps={{\n                                            ...params.InputProps,\n                                            type: 'search',\n                                        }}\n                                    />\n                                )}\n                                onChange={(event, appuser) => {\n                                    if (appuser) {\n                                        const {id} = appuser;\n                                        dispatch(setInternalFollowUpShareData({\n                                            to_user: id\n                                        }))\n                                    }\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={7} lg={8}>\n                            <TextField\n                                select\n                                label=\"Mode Of Communication\"\n                                fullWidth\n\n                                onChange={formik_internal.handleChange}\n                                name='mode_of_communication'\n                                id=\"mode_of_communication\"\n                                value={formik_internal.values.mode_of_communication}\n                            >\n                                {modeOfCommunicationList.map((option) => (\n                                    <MenuItem key={option.value} value={option.value}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </Grid>\n\n\n                        <Grid item xs={7} lg={8}>\n                            <TextField\n                                id=\"discussion_details\"\n                                name=\"discussion_details\"\n                                variant=\"outlined\"\n                                label=\"Discussion Details\"\n                                multiline\n                                rows={6}\n                                maxRows={15}\n                                fullWidth\n                                onChange={formik_internal.handleChange}\n                                value={formik_internal.values.discussion_details}\n                            />\n                        </Grid>\n\n                    </Grid>\n                </CardContent>\n                <CardActions>\n                    <Button variant=\"contained\" startIcon={<SendIcon/>} onClick={(event) => handleSendFollowUpClick(event, SHARE_COMMUNICATION_TYPE.INTERNAL_FOLLOWUP)}>\n                        Send Internal Follow Up\n                    </Button>\n                </CardActions>\n            </MainCard>\n        </Grid>\n    )\n\n    const getExternalFollowUp = () => (\n        <Grid item xs={12} md={4} lg={5} justifyContent=\"center\">\n            <MainCard title='External Follow Up Discussion' content={false}>\n                <CardContent>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={7} lg={8}>\n                            <TextField\n                                select\n                                label=\"Organization\"\n                                fullWidth\n\n                                onChange={formik_user_search.handleChange}\n                                name='organization'\n                                id=\"organization\"\n                                value={formik_user_search.values.organization}\n                            >\n                                {organizationsListExternalFollowUp.map((option) => (\n                                    <MenuItem key={option.value} value={option.value}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </Grid>\n\n                        <Grid item xs={7} lg={7}>\n                            <Autocomplete\n                                freeSolo\n                                id=\"external-followup-application-user\"\n                                disableClearable\n                                options={applicationUserSearchList.map((option) => ({\n                                        label: option.user.fullname,\n                                        id: option.app_user_id\n                                    })\n                                )}\n                                onKeyUpCapture={handleClientKeyInput}\n                                renderInput={(params) => (\n                                    <TextField\n                                        {...params}\n                                        label=\"Search User\"\n                                        InputProps={{\n                                            ...params.InputProps,\n                                            type: 'search',\n                                        }}\n                                    />\n                                )}\n                                onChange={(event, appuser) => {\n                                    if (appuser) {\n                                        const {id} = appuser;\n                                        dispatch(setExternalFollowUpShareData({\n                                            to_user: id\n                                        }))\n                                    }\n                                }}\n                            />\n                        </Grid>\n\n                        <Grid item xs={7} lg={8}>\n                            <TextField\n                                select\n                                label=\"Mode Of Communication\"\n                                fullWidth\n                                onChange={formik_external.handleChange}\n                                name='mode'\n                                id=\"mode\"\n                                value={formik_internal.values.mode}\n                            >\n                                {modeOfCommunicationList.map((option) => (\n                                    <MenuItem key={option.value} value={option.value}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        </Grid>\n\n\n                        <Grid item xs={7} lg={8}>\n                            <TextField\n                                onChange={formik_external.handleChange}\n                                name='discussion_details'\n                                id=\"discussion_details\"\n                                variant=\"outlined\"\n                                label=\"Discussion Details\"\n                                multiline\n                                rows={6}\n                                maxRows={15}\n                                fullWidth\n                            />\n                        </Grid>\n                    </Grid>\n                </CardContent>\n                <CardActions>\n                    <Button variant=\"contained\" startIcon={<SendIcon/>} onClick={(event) => handleSendFollowUpClick(event, SHARE_COMMUNICATION_TYPE.EXTERNAL_FOLLOWUP)}>\n                        Send External Follow Up\n                    </Button>\n                </CardActions>\n            </MainCard>\n        </Grid>\n    )\n\n    return (\n        <div>\n            <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}\n                    className={classes.fulldialog}>\n                <AppBar className={classes.appBar}>\n                    <Toolbar>\n                        <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n                            <CloseIcon/>\n                        </IconButton>\n                        <Typography variant=\"h3\" color=\"inherit\" className={classes.title}>\n                            Send Follow Up Discussions\n                        </Typography>\n                        <Button autoFocus color=\"inherit\" onClick={handleClose}>\n                            Close\n                        </Button>\n                    </Toolbar>\n                </AppBar>\n\n                <DialogContent>\n                    <Tabs value={value} variant=\"standard\" onChange={handleChange}>\n                        <Tab\n                            component={RouterLink}\n                            to=\"#\"\n                            icon={<PersonOutlineTwoToneIcon sx={{fontSize: '1.3rem'}}/>}\n                            label=\"Internal Follow Up\"\n                            {...a11yProps(0)}\n                        />\n                        <Tab\n                            component={RouterLink}\n                            to=\"#\"\n                            icon={<MedicationOutlinedIcon sx={{fontSize: '1.3rem'}}/>}\n                            label=\"External Follow Up\"\n                            {...a11yProps(1)}\n                        />\n                    </Tabs>\n\n                    <TabPanel value={value} index={0}>\n                        <Grid container spacing={gridSpacing} justifyContent=\"left\">\n                            {getInternalFollowUp()}\n                        </Grid>\n                    </TabPanel>\n\n                    <TabPanel value={value} index={1}>\n                        <Grid container spacing={gridSpacing} justifyContent=\"left\">\n                            {getExternalFollowUp()}\n                        </Grid>\n                    </TabPanel>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n}\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/common/communication/share/share-dialog-referral.js",["2318","2319","2320","2321","2322","2323","2324","2325","2326","2327","2328","2329","2330"],"import React, {useEffect} from 'react';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {\n    AppBar,\n    Button,\n    Dialog,\n    Divider,\n    IconButton,\n    Slide,\n    Toolbar,\n    CardContent,\n    Typography,\n    Grid, Tooltip,\n    TextField,\n    MenuItem,\n    DialogContent, Tabs, Tab, Chip, Box, CardActions,\n} from '@material-ui/core';\nimport Autocomplete from '@material-ui/core/Autocomplete';\nimport * as Yup from \"yup\";\nimport MainCard from 'ui-component/cards/MainCard';\nimport {useFormik} from \"formik\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport PersonOutlineTwoToneIcon from \"@material-ui/icons/PersonOutlineTwoTone\";\nimport MedicationOutlinedIcon from '@material-ui/icons/MedicationOutlined';\nimport SendIcon from \"@material-ui/icons/Send\";\n// assets\n\nimport {\n    gridSpacing,\n    provider_types_value_label_list as providerTypesList,\n    organizations_value_label_list as organizationsList,\n    userSearchParamsForInternalReferralAndFollowUp,\n    userSearchParamsForExternalReferralAndFollowUp, SHARE_COMMUNICATION_TYPE\n} from \"store/constant\";\nimport searchApi from 'store/api-calls/search';\nimport shareApi from 'store/api-calls/share';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setApplicationUserSearchList, setApplicationUserSearchParams} from \"store/actions/search/applicationUser\";\nimport {setExternalReferralShareData, setInternalReferralShareData} from \"store/actions/share/referrals\";\nimport {SNACKBAR_OPEN} from \"../../../../../store/actionTypes\";\n\n\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && (\n                <Box\n                    sx={{\n                        p: 3\n                    }}\n                >\n                    <Typography>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative'\n    },\n\n    title: {\n        marginLeft: theme.spacing(2),\n        flex: 1\n    },\n    fulldialog: {\n        '& .MuiPaper-root': {\n            padding: '0px'\n        }\n    }\n}));\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n\n// slide animation\nconst Transition = React.forwardRef((props, ref) => <Slide direction=\"left\" ref={ref} {...props} />);\n\nexport default function ShareDialogReferral({open, handleClose, share_object_id, instance_type, from_user}) {\n    const classes = useStyles();\n    const [selectedTabValue, setSelectedTabValue] = React.useState(0);\n    const [progressLoader, setProgressLoader] = React.useState(false);\n\n    const dispatch = useDispatch();\n    const applicationUserSearchList = useSelector(state => state.search.applicationUser.list)\n    const applicationUserSearchParams = useSelector(state => state.search.applicationUser.params)\n    const internalReferralData = useSelector(state => state.share.internalReferral)\n    const externalReferralData = useSelector(state => state.share.externalReferral)\n\n    const validationSchema = Yup.object({\n        provider_type: Yup.string().required('Required field'),\n    })\n\n    useEffect(() => {\n        /*\n         * Set the Default values in Internal and External Referrals for the Selected Object\n         */\n        dispatch(setInternalReferralShareData({\n            from_user,\n            instance_type,\n            instance_object: share_object_id\n        }))\n\n        dispatch(setExternalReferralShareData({\n            from_user,\n            instance_type,\n            instance_object: share_object_id\n        }))\n    }, [])\n\n    const formik_internal = useFormik({\n        initialValues: {\n            provider_type: ''\n        },\n        validate: values => {\n            dispatch(setApplicationUserSearchParams(values))\n            dispatch(setApplicationUserSearchList([]))\n        }\n    }, validationSchema);\n\n    const formik_external = useFormik({\n        initialValues: {\n            organization: ''\n        },\n        validate: values => {\n            dispatch(setApplicationUserSearchParams(values))\n            dispatch(setApplicationUserSearchList([]))\n        }\n    });\n\n    const handleTabChange = (event, newValue) => {\n        setSelectedTabValue(newValue);\n\n        if (newValue === 0) {\n            // Nullify external param values for Internal referral user search\n            dispatch(setApplicationUserSearchParams(userSearchParamsForExternalReferralAndFollowUp))\n        } else {\n            // Nullify internal param values for external referral user search\n            dispatch(setApplicationUserSearchParams(userSearchParamsForInternalReferralAndFollowUp))\n        }\n    };\n\n    const handleSendReferralClick = async (event, referralType) => {\n        const formData = referralType === SHARE_COMMUNICATION_TYPE.INTERNAL_REFERRAL ? internalReferralData : externalReferralData;\n\n        setProgressLoader(true);\n        const response = await shareApi.sendCommunicationShare(formData);\n\n        if (response && 'result' in response) {\n            if (response.result === true) {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Referral request is sent.',\n                    variant: 'alert',\n                    alertSeverity: 'success', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'left'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            } else {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Referral request could not be sent. Please try again',\n                    variant: 'alert',\n                    alertSeverity: 'error', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'left'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            }\n        } else {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Referral request could not be sent. Please try again',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'left'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n\n        setProgressLoader(false);\n    }\n\n    const fetchSearchUsersList = async (formData) => {\n        const response = await searchApi.searchApplicationUsers(formData);\n        if ('result' in response && response.result === true) {\n            dispatch(setApplicationUserSearchList(response.data))\n        } else {\n            dispatch(setApplicationUserSearchList([]))\n        }\n    }\n\n    const handleClientKeyInput = async (event) => {\n        const searchValue = event.target.value;\n\n        if (searchValue.length > 0) {\n            dispatch(setApplicationUserSearchParams({\n                name: searchValue\n            }))\n\n            // This new object is created and sent to the request function to avoid delays in dispatch retrieval\n            const updatedNameAndFormData = {\n                ...applicationUserSearchParams,\n                name: searchValue\n            }\n            fetchSearchUsersList(updatedNameAndFormData)\n        } else {\n            dispatch(setApplicationUserSearchList([]))\n        }\n    }\n\n    function getExternalReferralTabGrid() {\n        return <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} md={6} lg={6}>\n                <MainCard title='External Referral' content={false}>\n                    <CardContent>\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item xs={7} lg={7}>\n                                <TextField\n                                    select\n                                    label=\"Organization\"\n                                    fullWidth\n\n                                    onChange={formik_external.handleChange}\n                                    name='organization'\n                                    id=\"organization\"\n                                    value={formik_external.values.organization}\n                                >\n                                    {organizationsList.map((option) => (\n                                        <MenuItem key={option.value} value={option.value}>\n                                            {option.label}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                            </Grid>\n\n                            <Grid item xs={7} lg={7}>\n                                <Autocomplete\n                                    freeSolo\n                                    id=\"internal-referral-application-user\"\n                                    disableClearable\n                                    // options={applicationUserSearchList.map((option) => option.user.fullname)}\n                                    options={applicationUserSearchList.map((option) => ({\n                                            label: option.user.fullname,\n                                            id: option.app_user_id\n                                        })\n                                    )}\n                                    onKeyUpCapture={handleClientKeyInput}\n                                    renderInput={(params) => (\n                                        <TextField\n                                            {...params}\n                                            label=\"Search User\"\n                                            InputProps={{\n                                                ...params.InputProps,\n                                                type: 'search',\n                                            }}\n                                        />\n                                    )}\n                                    onChange={(event, appuser) => {\n                                        if (appuser) {\n                                            const {id} = appuser;\n                                            dispatch(setExternalReferralShareData({\n                                                to_user: id\n                                            }))\n                                        }\n                                    }}\n                                />\n\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n\n                    <CardActions>\n                        <Button variant=\"contained\" startIcon={<SendIcon/>} onClick={(event) => handleSendReferralClick(event, SHARE_COMMUNICATION_TYPE.EXTERNAL_REFERRAL)}>\n                            Send External Referral\n                        </Button>\n                    </CardActions>\n                </MainCard>\n            </Grid>\n        </Grid>;\n    }\n\n    function getInternalReferralTabGrid() {\n        return <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} md={6} lg={6}>\n                <MainCard title='Internal Referral' content={false}>\n                    <CardContent>\n                        <Grid container spacing={gridSpacing}>\n                            <Grid item xs={7} lg={7}>\n                                <TextField\n                                    select\n                                    label=\"Provider Type\"\n                                    fullWidth\n                                    onChange={formik_internal.handleChange}\n                                    name='provider_type'\n                                    id=\"provider_type\"\n                                    value={formik_internal.values.provider_type}\n                                >\n                                    {providerTypesList.map((option) => (\n                                        <MenuItem key={option.value} value={option.value}>\n                                            {option.label}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                            </Grid>\n\n                            <Grid item xs={7} lg={7}>\n                                <Autocomplete\n                                    freeSolo\n                                    id=\"internal-referral-application-user\"\n                                    disableClearable\n                                    // options={applicationUserSearchList.map((option) => option.user.fullname)}\n                                    options={applicationUserSearchList.map((option) => ({\n                                            label: option.user.fullname,\n                                            id: option.app_user_id\n                                        })\n                                    )}\n                                    onKeyUpCapture={handleClientKeyInput}\n                                    renderInput={(params) => (\n                                        <TextField\n                                            {...params}\n                                            label=\"Search User\"\n                                            InputProps={{\n                                                ...params.InputProps,\n                                                type: 'search',\n                                            }}\n                                        />\n                                    )}\n                                    onChange={(event, appuser) => {\n                                        if (appuser) {\n                                            const {id} = appuser;\n                                            dispatch(setInternalReferralShareData({\n                                                to_user: id\n                                            }))\n                                        }\n                                    }}\n                                />\n\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n\n                    <CardActions>\n                        <Button variant=\"contained\" startIcon={<SendIcon/>} onClick={(event) => handleSendReferralClick(event, SHARE_COMMUNICATION_TYPE.INTERNAL_REFERRAL)}>\n                            Send Internal Referral\n                        </Button>\n                    </CardActions>\n                </MainCard>\n            </Grid>\n        </Grid>;\n    }\n\n    return (\n        <div>\n            <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}\n                    className={classes.fulldialog}>\n\n                <AppBar className={classes.appBar}>\n                    <Toolbar>\n                        <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n                            <CloseIcon/>\n                        </IconButton>\n                        <Typography variant=\"h3\" color=\"inherit\" className={classes.title}>\n                            Send Referrals\n                        </Typography>\n                        <Button autoFocus color=\"inherit\" onClick={handleClose}>\n                            Close\n                        </Button>\n                    </Toolbar>\n                </AppBar>\n\n                <DialogContent>\n                    <Tabs value={selectedTabValue} variant=\"standard\" onChange={handleTabChange}>\n                        <Tab\n                            component={RouterLink}\n                            to=\"#\"\n                            icon={<PersonOutlineTwoToneIcon sx={{fontSize: '1.3rem'}}/>}\n                            label=\"Internal Referral\"\n                            {...a11yProps(0)}\n                        />\n                        <Tab\n                            component={RouterLink}\n                            to=\"#\"\n                            icon={<MedicationOutlinedIcon sx={{fontSize: '1.3rem'}}/>}\n                            label=\"External Referral\"\n                            {...a11yProps(1)}\n                        />\n                    </Tabs>\n\n                    <TabPanel value={selectedTabValue} index={0}>\n                        {getInternalReferralTabGrid()}\n                    </TabPanel>\n\n                    <TabPanel value={selectedTabValue} index={1}>\n                        {getExternalReferralTabGrid()}\n                    </TabPanel>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n}\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/daily-workload/add/index.js",["2331","2332","2333","2334","2335"],"import PropTypes from 'prop-types';\nimport React, {useEffect} from 'react';\nimport JWTContext from 'contexts/JWTContext';\n\n// material-ui\nimport {makeStyles} from '@material-ui/styles';\nimport {\n    Button,\n    CardActions,\n    CircularProgress,\n    CardContent,\n    Divider,\n    Grid,\n    Tab,\n    Tabs,\n    Typography\n} from '@material-ui/core';\n\n// project imports\nimport ClientCaseLoad from './forms/client-caseload';\nimport ProjectClinicalActivities from './forms/project-clinical-activities';\nimport ProjectActivities from './forms/project-activities';\nimport Details from './forms/details';\n\nimport {useSelector, useDispatch} from \"react-redux\";\n\nimport MainCard from 'ui-component/cards/MainCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport {gridSpacing} from 'store/constant';\n\n// assets\nimport DescriptionTwoToneIcon from '@material-ui/icons/DescriptionTwoTone';\nimport {SNACKBAR_OPEN} from 'store/actionTypes';\n\nimport clinicianApi from 'store/api-calls/clinician';\n\nimport ProgressCircularControlled from 'views/ui/ProgressCircularControlled';\nimport {setDailyWorkLoadDetails, resetDailyWorkLoad} from \"store/actions/clinician/dailyWorkloadActions\";\nimport {useNavigate} from \"react-router-dom\";\n\n// style constant\nconst useStyles = makeStyles((theme) => ({\n    profileTab: {\n        '& .MuiTabs-flexContainer': {\n            borderBottom: 'none'\n        },\n        '& button': {\n            color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[600],\n            minHeight: 'auto',\n            minWidth: '100%',\n            padding: '12px 16px',\n            display: 'flex',\n            flexDirection: 'row',\n            alignItems: 'flex-start',\n            textAlign: 'left',\n            justifyContent: 'flex-start'\n        },\n        '& button.Mui-selected': {\n            color: theme.palette.primary.main,\n            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[50]\n        },\n        '& button > svg': {\n            marginBottom: '0px !important',\n            marginRight: '10px',\n            marginTop: '10px',\n            height: '20px',\n            width: '20px'\n        },\n        '& button > div > span': {\n            display: 'block'\n        },\n        '& > div > span': {\n            display: 'none'\n        }\n    },\n    cardPanels: {\n        borderLeft: '1px solid',\n        borderLeftColor: theme.palette.mode === 'dark' ? '#333d5e' : '#eeeeee',\n        height: '100%'\n    }\n}));\n\n// tabs\nfunction TabPanel(props) {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <div role='tabpanel' hidden={value !== index} id={`simple-tabpanel-${index}`}\n             aria-labelledby={`simple-tab-${index}`} {...other}>\n            {value === index && <div>{children}</div>}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\n// tabs option\nconst tabsOption = [\n    {\n        label: 'Details',\n        icon: <DescriptionTwoToneIcon/>,\n        caption: 'Workload Information'\n    },\n    {\n        label: 'Client Caseload',\n        icon: <DescriptionTwoToneIcon/>,\n        caption: 'Caseload Information'\n    },\n];\n\n// ===========================|| PROFILE 2 ||=========================== //\n\nconst DailyWorkload = () => {\n    const classes = useStyles();\n    const customization = useSelector((state) => state.customization);\n\n    const [value, setValue] = React.useState(0);\n    const [progressLoader, setProgressLoader] = React.useState(false);\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    const dailyWorkloadData = useSelector(state => state.clinician.dailyWorkload.add)\n\n    const userAuthContext = React.useContext(JWTContext)\n    const {\n        user: {\n            user_type_pk: clinicianUUID\n        }\n    } = userAuthContext;\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    useEffect(() => {\n        dispatch(resetDailyWorkLoad())\n        dispatch(setDailyWorkLoadDetails({\n            clinician: clinicianUUID\n        }))\n    }, []);\n\n    const handleWorkloadSubmit = async (e) => {\n        setProgressLoader(true);  // Call this to show the loader for the current tab\n        dispatch(setDailyWorkLoadDetails({\n            clinician: clinicianUUID\n        }))\n        const response = await clinicianApi.createDailyWorkload(dailyWorkloadData);\n        setProgressLoader(false);\n\n        if ('result' in response === true) {\n            if (response.result === true) {\n                const createdWorkloadID = response.data.daily_workload_id;\n\n                console.log(createdWorkloadID)\n\n                navigate(`/workload/${createdWorkloadID}`)\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Your Daily Workload entry has been created.',\n                    variant: 'alert',\n                    alertSeverity: 'success', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n                dispatch(resetDailyWorkLoad())\n            } else {\n                dispatch({\n                    type: SNACKBAR_OPEN,\n                    open: true,\n                    message: 'Your Daily workload could not be added. Please try again',\n                    variant: 'alert',\n                    alertSeverity: 'error', // error , success, warning\n                    anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                    transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                    close: true,\n                })\n            }\n        }\n\n        if ('errors' in response === true) {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Please provide all the fields with valid values and try submit again.',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n\n        if ('status' in response === true && response.status > 200) {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Please provide all the fields with valid values and try submit again.',\n                variant: 'alert',\n                alertSeverity: 'error', // error , success, warning\n                anchorOrigin: {vertical: 'bottom', horizontal: 'right'},  // vertical - top, bottom, // horizontal - left, center, right\n                transition: 'SlideUp', // SlideRight, SlideUp, SlideDown, Grow, SlideLeft, Fade\n                close: true,\n            })\n        }\n    }\n\n    return (\n        <Grid container spacing={gridSpacing}>\n            <Grid item xs={12}>\n                <MainCard title='Daily Workload ' secondary={<ProgressCircularControlled display={progressLoader}/>}\n                          content={false}>\n                    <Grid container spacing={gridSpacing}>\n                        <Grid item xs={12} lg={4}>\n                            <CardContent>\n                                <Tabs\n                                    value={value}\n                                    onChange={handleChange}\n                                    orientation='vertical'\n                                    className={classes.profileTab}\n                                    variant='scrollable'\n                                    sx={{\n                                        '& button': {\n                                            borderRadius: `${customization.borderRadius}px`\n                                        }\n                                    }}\n                                >\n                                    {tabsOption.map((tab, index) => (\n                                        <Tab\n                                            key={index}\n                                            icon={tab.icon}\n                                            label={\n                                                <Grid container direction='column'>\n                                                    <Typography sx={{textTransform: 'capitalize'}} variant='subtitle1'\n                                                                color='inherit'>\n                                                        {tab.label}\n                                                    </Typography>\n                                                    <Typography component='div' variant='caption'\n                                                                sx={{textTransform: 'capitalize'}}>\n                                                        {tab.caption}\n                                                    </Typography>\n                                                </Grid>\n                                            }\n                                            {...a11yProps(index)}\n                                        />\n                                    ))}\n                                </Tabs>\n                            </CardContent>\n                        </Grid>\n                        <Grid item xs={12} lg={8}>\n                            <CardContent className={classes.cardPanels}>\n                                <TabPanel value={value} index={0}>\n                                    <Details/>\n                                </TabPanel>\n                                <TabPanel value={value} index={1}>\n                                    <ClientCaseLoad/>\n                                </TabPanel>\n                            </CardContent>\n                        </Grid>\n                    </Grid>\n                    <Divider/>\n                    <CardActions>\n                        <Grid container justifyContent='space-between' spacing={0}>\n                            <Grid item>\n                                <Grid container justifyContent='space-between' spacing={1}>\n                                    <Grid item>\n                                        {value < 1 && (\n                                            <AnimateButton>\n                                                <Button variant='contained' size='large'\n                                                        onClick={(e) => handleChange(e, 1 + parseInt(value, 10))}>\n                                                    Continue\n                                                </Button>\n                                            </AnimateButton>\n                                        )}\n                                    </Grid>\n\n                                    <Grid item>\n                                        {value > 0 && (\n                                            <AnimateButton>\n                                                <Button variant='outlined' size='large'\n                                                        onClick={(e) => handleChange(e, parseInt(value, 10) - 1)}>\n                                                    Back\n                                                </Button>\n                                            </AnimateButton>\n                                        )}\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n\n                            <Grid item alignContent='end'>\n                                {value === 1 && (\n                                    <AnimateButton>\n                                        <Button color='secondary' variant='contained' size='large'\n                                                onClick={handleWorkloadSubmit}>\n                                            Submit <ProgressCircularControlled display={progressLoader}/>\n                                        </Button>\n                                    </AnimateButton>\n                                )}\n                            </Grid>\n\n                        </Grid>\n                    </CardActions>\n                </MainCard>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default DailyWorkload;\n","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/api-calls/search.js",["2336"],"import axios from \"./axios-client\";\n\nexport default {\n\n    async searchApplicationUsers(formData) {\n        try {\n            const response = await axios.post('core/appusers/search', formData);\n            return response.data;\n        } catch (error) {\n            return error.response;\n        }\n    },\n\n    async listClientInterventionByCaseManagerID(externalPartnerID) {\n        console.log(\"Test\")\n    }\n}","/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/share/followup.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/share/referrals.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/store/actions/search/applicationUser.js",[],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/daily-workload/add/forms/project-activities.js",["2337"],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/views/roles/clinician/daily-workload/add/forms/project-clinical-activities.js",["2338"],"/Users/sharanchitta/PycharmProjects/provider-tool-frontend/src/layout/Customization/index.js",[],{"ruleId":"2339","replacedBy":"2340"},{"ruleId":"2341","replacedBy":"2342"},{"ruleId":"2343","replacedBy":"2344"},{"ruleId":"2345","replacedBy":"2346"},{"ruleId":"2347","replacedBy":"2348"},{"ruleId":"2349","replacedBy":"2350"},{"ruleId":"2351","severity":1,"message":"2352","line":20,"column":9,"nodeType":"2353","messageId":"2354","endLine":20,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2355","line":25,"column":9,"nodeType":"2353","messageId":"2354","endLine":25,"endColumn":31},{"ruleId":"2351","severity":1,"message":"2356","line":25,"column":33,"nodeType":"2353","messageId":"2354","endLine":25,"endColumn":61},{"ruleId":"2357","severity":1,"message":"2358","line":30,"column":15,"nodeType":"2359","messageId":"2360","endLine":30,"endColumn":43},{"ruleId":"2351","severity":1,"message":"2356","line":30,"column":15,"nodeType":"2353","messageId":"2354","endLine":30,"endColumn":43},{"ruleId":"2351","severity":1,"message":"2361","line":18,"column":9,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":26},{"ruleId":"2351","severity":1,"message":"2362","line":46,"column":7,"nodeType":"2353","messageId":"2354","endLine":46,"endColumn":12},{"ruleId":"2351","severity":1,"message":"2363","line":56,"column":9,"nodeType":"2353","messageId":"2354","endLine":56,"endColumn":24},{"ruleId":"2351","severity":1,"message":"2364","line":66,"column":32,"nodeType":"2353","messageId":"2354","endLine":66,"endColumn":33},{"ruleId":"2351","severity":1,"message":"2365","line":72,"column":32,"nodeType":"2353","messageId":"2354","endLine":72,"endColumn":35},{"ruleId":"2351","severity":1,"message":"2364","line":152,"column":48,"nodeType":"2353","messageId":"2354","endLine":152,"endColumn":49},{"ruleId":"2351","severity":1,"message":"2365","line":157,"column":48,"nodeType":"2353","messageId":"2354","endLine":157,"endColumn":51},{"ruleId":"2351","severity":1,"message":"2366","line":2,"column":8,"nodeType":"2353","messageId":"2354","endLine":2,"endColumn":13},{"ruleId":"2367","severity":1,"message":"2368","line":13,"column":56,"nodeType":"2369","messageId":"2370","endLine":13,"endColumn":65},{"ruleId":"2367","severity":1,"message":"2368","line":31,"column":57,"nodeType":"2369","messageId":"2370","endLine":31,"endColumn":66},{"ruleId":"2351","severity":1,"message":"2371","line":11,"column":8,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2372","line":46,"column":9,"nodeType":"2353","messageId":"2354","endLine":46,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2373","line":270,"column":11,"nodeType":"2353","messageId":"2354","endLine":270,"endColumn":27},{"ruleId":"2351","severity":1,"message":"2374","line":277,"column":12,"nodeType":"2353","messageId":"2354","endLine":277,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2375","line":281,"column":11,"nodeType":"2353","messageId":"2354","endLine":281,"endColumn":28},{"ruleId":"2376","severity":1,"message":"2377","line":375,"column":8,"nodeType":"2378","endLine":375,"endColumn":10,"suggestions":"2379"},{"ruleId":"2351","severity":1,"message":"2380","line":38,"column":8,"nodeType":"2353","messageId":"2354","endLine":38,"endColumn":14},{"ruleId":"2351","severity":1,"message":"2381","line":85,"column":11,"nodeType":"2353","messageId":"2354","endLine":85,"endColumn":24},{"ruleId":"2351","severity":1,"message":"2382","line":90,"column":11,"nodeType":"2353","messageId":"2354","endLine":90,"endColumn":24},{"ruleId":"2351","severity":1,"message":"2383","line":10,"column":5,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2384","line":32,"column":8,"nodeType":"2353","messageId":"2354","endLine":32,"endColumn":32},{"ruleId":"2351","severity":1,"message":"2385","line":39,"column":9,"nodeType":"2353","messageId":"2354","endLine":39,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2386","line":147,"column":11,"nodeType":"2353","messageId":"2354","endLine":147,"endColumn":30},{"ruleId":"2376","severity":1,"message":"2387","line":164,"column":8,"nodeType":"2378","endLine":164,"endColumn":10,"suggestions":"2388"},{"ruleId":"2351","severity":1,"message":"2389","line":166,"column":11,"nodeType":"2353","messageId":"2354","endLine":166,"endColumn":26},{"ruleId":"2351","severity":1,"message":"2366","line":1,"column":8,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2390","line":17,"column":11,"nodeType":"2353","messageId":"2354","endLine":17,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2391","line":9,"column":8,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2392","line":10,"column":8,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":23},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":22,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2395","line":4,"column":56,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":64},{"ruleId":"2351","severity":1,"message":"2396","line":4,"column":66,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":75},{"ruleId":"2351","severity":1,"message":"2397","line":9,"column":8,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2398","line":16,"column":5,"nodeType":"2353","messageId":"2354","endLine":16,"endColumn":28},{"ruleId":"2351","severity":1,"message":"2399","line":20,"column":11,"nodeType":"2353","messageId":"2354","endLine":20,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2400","line":5,"column":9,"nodeType":"2353","messageId":"2354","endLine":5,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2393","line":5,"column":30,"nodeType":"2353","messageId":"2354","endLine":5,"endColumn":38},{"ruleId":"2351","severity":1,"message":"2394","line":5,"column":40,"nodeType":"2353","messageId":"2354","endLine":5,"endColumn":56},{"ruleId":"2351","severity":1,"message":"2395","line":5,"column":64,"nodeType":"2353","messageId":"2354","endLine":5,"endColumn":72},{"ruleId":"2351","severity":1,"message":"2397","line":10,"column":8,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2401","line":12,"column":20,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2402","line":13,"column":13,"nodeType":"2353","messageId":"2354","endLine":13,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":22,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2395","line":4,"column":56,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":64},{"ruleId":"2351","severity":1,"message":"2396","line":4,"column":66,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":75},{"ruleId":"2351","severity":1,"message":"2397","line":9,"column":8,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2403","line":4,"column":8,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":23},{"ruleId":"2351","severity":1,"message":"2393","line":7,"column":5,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2394","line":8,"column":5,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2395","line":10,"column":5,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2396","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":14},{"ruleId":"2351","severity":1,"message":"2404","line":21,"column":9,"nodeType":"2353","messageId":"2354","endLine":21,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2397","line":23,"column":8,"nodeType":"2353","messageId":"2354","endLine":23,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2405","line":25,"column":22,"nodeType":"2353","messageId":"2354","endLine":25,"endColumn":33},{"ruleId":"2357","severity":1,"message":"2406","line":33,"column":21,"nodeType":"2359","messageId":"2360","endLine":33,"endColumn":26},{"ruleId":"2357","severity":1,"message":"2407","line":33,"column":28,"nodeType":"2359","messageId":"2360","endLine":33,"endColumn":43},{"ruleId":"2357","severity":1,"message":"2408","line":33,"column":45,"nodeType":"2359","messageId":"2360","endLine":33,"endColumn":53},{"ruleId":"2351","severity":1,"message":"2409","line":60,"column":57,"nodeType":"2353","messageId":"2354","endLine":60,"endColumn":69},{"ruleId":"2351","severity":1,"message":"2410","line":60,"column":84,"nodeType":"2353","messageId":"2354","endLine":60,"endColumn":94},{"ruleId":"2367","severity":1,"message":"2368","line":3,"column":63,"nodeType":"2369","messageId":"2370","endLine":3,"endColumn":72},{"ruleId":"2339","replacedBy":"2411"},{"ruleId":"2341","replacedBy":"2412"},{"ruleId":"2343","replacedBy":"2413"},{"ruleId":"2345","replacedBy":"2414"},{"ruleId":"2347","replacedBy":"2415"},{"ruleId":"2349","replacedBy":"2416"},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":22,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2395","line":4,"column":56,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":64},{"ruleId":"2351","severity":1,"message":"2417","line":11,"column":8,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":22},{"ruleId":"2357","severity":1,"message":"2418","line":16,"column":19,"nodeType":"2359","messageId":"2360","endLine":16,"endColumn":31},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":22,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2395","line":4,"column":56,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":64},{"ruleId":"2351","severity":1,"message":"2404","line":17,"column":9,"nodeType":"2353","messageId":"2354","endLine":17,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2419","line":18,"column":8,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2397","line":19,"column":8,"nodeType":"2353","messageId":"2354","endLine":19,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2401","line":20,"column":20,"nodeType":"2353","messageId":"2354","endLine":20,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2402","line":21,"column":13,"nodeType":"2353","messageId":"2354","endLine":21,"endColumn":16},{"ruleId":"2357","severity":1,"message":"2420","line":37,"column":34,"nodeType":"2359","messageId":"2360","endLine":37,"endColumn":51},{"ruleId":"2351","severity":1,"message":"2421","line":61,"column":34,"nodeType":"2353","messageId":"2354","endLine":61,"endColumn":39},{"ruleId":"2351","severity":1,"message":"2400","line":6,"column":5,"nodeType":"2353","messageId":"2354","endLine":6,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2393","line":8,"column":5,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2394","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2395","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2422","line":20,"column":8,"nodeType":"2353","messageId":"2354","endLine":20,"endColumn":28},{"ruleId":"2351","severity":1,"message":"2423","line":21,"column":8,"nodeType":"2353","messageId":"2354","endLine":21,"endColumn":31},{"ruleId":"2351","severity":1,"message":"2424","line":23,"column":9,"nodeType":"2353","messageId":"2354","endLine":23,"endColumn":16},{"ruleId":"2357","severity":1,"message":"2425","line":146,"column":33,"nodeType":"2359","messageId":"2360","endLine":146,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2426","line":146,"column":33,"nodeType":"2353","messageId":"2354","endLine":146,"endColumn":48},{"ruleId":"2357","severity":1,"message":"2427","line":146,"column":50,"nodeType":"2359","messageId":"2360","endLine":146,"endColumn":67},{"ruleId":"2351","severity":1,"message":"2428","line":146,"column":50,"nodeType":"2353","messageId":"2354","endLine":146,"endColumn":67},{"ruleId":"2351","severity":1,"message":"2429","line":11,"column":8,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":27},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":22,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2395","line":4,"column":56,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":64},{"ruleId":"2351","severity":1,"message":"2396","line":4,"column":66,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":75},{"ruleId":"2357","severity":1,"message":"2430","line":14,"column":33,"nodeType":"2359","messageId":"2360","endLine":14,"endColumn":59},{"ruleId":"2357","severity":1,"message":"2431","line":14,"column":61,"nodeType":"2359","messageId":"2360","endLine":14,"endColumn":73},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":22,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2395","line":4,"column":56,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":64},{"ruleId":"2351","severity":1,"message":"2396","line":4,"column":66,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":75},{"ruleId":"2357","severity":1,"message":"2432","line":11,"column":27,"nodeType":"2359","messageId":"2360","endLine":11,"endColumn":54},{"ruleId":"2357","severity":1,"message":"2431","line":11,"column":56,"nodeType":"2359","messageId":"2360","endLine":11,"endColumn":68},{"ruleId":"2351","severity":1,"message":"2433","line":4,"column":25,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2434","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":46},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":61,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":69},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":71,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":87},{"ruleId":"2351","severity":1,"message":"2395","line":4,"column":95,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":103},{"ruleId":"2351","severity":1,"message":"2397","line":9,"column":8,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2435","line":12,"column":8,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":24},{"ruleId":"2357","severity":1,"message":"2436","line":41,"column":35,"nodeType":"2359","messageId":"2360","endLine":41,"endColumn":39},{"ruleId":"2357","severity":1,"message":"2437","line":41,"column":41,"nodeType":"2359","messageId":"2360","endLine":41,"endColumn":43},{"ruleId":"2357","severity":1,"message":"2438","line":41,"column":45,"nodeType":"2359","messageId":"2360","endLine":41,"endColumn":51},{"ruleId":"2351","severity":1,"message":"2439","line":43,"column":20,"nodeType":"2353","messageId":"2354","endLine":43,"endColumn":25},{"ruleId":"2357","severity":1,"message":"2440","line":44,"column":16,"nodeType":"2353","messageId":"2360","endLine":44,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2433","line":6,"column":5,"nodeType":"2353","messageId":"2354","endLine":6,"endColumn":10},{"ruleId":"2351","severity":1,"message":"2434","line":7,"column":5,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2393","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2394","line":10,"column":5,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2395","line":12,"column":5,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2397","line":19,"column":8,"nodeType":"2353","messageId":"2354","endLine":19,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2435","line":22,"column":8,"nodeType":"2353","messageId":"2354","endLine":22,"endColumn":24},{"ruleId":"2357","severity":1,"message":"2436","line":51,"column":26,"nodeType":"2359","messageId":"2360","endLine":51,"endColumn":30},{"ruleId":"2357","severity":1,"message":"2437","line":51,"column":32,"nodeType":"2359","messageId":"2360","endLine":51,"endColumn":34},{"ruleId":"2357","severity":1,"message":"2438","line":51,"column":36,"nodeType":"2359","messageId":"2360","endLine":51,"endColumn":42},{"ruleId":"2351","severity":1,"message":"2439","line":53,"column":20,"nodeType":"2353","messageId":"2354","endLine":53,"endColumn":25},{"ruleId":"2357","severity":1,"message":"2440","line":54,"column":16,"nodeType":"2353","messageId":"2360","endLine":54,"endColumn":29},{"ruleId":"2339","replacedBy":"2441"},{"ruleId":"2341","replacedBy":"2442"},{"ruleId":"2343","replacedBy":"2443"},{"ruleId":"2345","replacedBy":"2444"},{"ruleId":"2347","replacedBy":"2445"},{"ruleId":"2349","replacedBy":"2446"},{"ruleId":"2351","severity":1,"message":"2447","line":7,"column":5,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2448","line":32,"column":8,"nodeType":"2353","messageId":"2354","endLine":32,"endColumn":23},{"ruleId":"2351","severity":1,"message":"2449","line":37,"column":8,"nodeType":"2353","messageId":"2354","endLine":37,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2450","line":39,"column":9,"nodeType":"2353","messageId":"2354","endLine":39,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2451","line":120,"column":7,"nodeType":"2353","messageId":"2354","endLine":120,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2452","line":132,"column":11,"nodeType":"2353","messageId":"2354","endLine":132,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2400","line":7,"column":5,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2453","line":8,"column":5,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":9},{"ruleId":"2351","severity":1,"message":"2454","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2455","line":18,"column":5,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":10},{"ruleId":"2351","severity":1,"message":"2456","line":23,"column":10,"nodeType":"2353","messageId":"2354","endLine":23,"endColumn":27},{"ruleId":"2351","severity":1,"message":"2457","line":23,"column":48,"nodeType":"2353","messageId":"2354","endLine":23,"endColumn":59},{"ruleId":"2351","severity":1,"message":"2458","line":23,"column":61,"nodeType":"2353","messageId":"2354","endLine":23,"endColumn":70},{"ruleId":"2351","severity":1,"message":"2366","line":1,"column":8,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2366","line":1,"column":8,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2366","line":1,"column":8,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2459","line":9,"column":7,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2460","line":20,"column":10,"nodeType":"2353","messageId":"2354","endLine":20,"endColumn":14},{"ruleId":"2351","severity":1,"message":"2461","line":20,"column":16,"nodeType":"2353","messageId":"2354","endLine":20,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2462","line":20,"column":23,"nodeType":"2353","messageId":"2354","endLine":20,"endColumn":35},{"ruleId":"2351","severity":1,"message":"2463","line":20,"column":37,"nodeType":"2353","messageId":"2354","endLine":20,"endColumn":46},{"ruleId":"2351","severity":1,"message":"2402","line":21,"column":13,"nodeType":"2353","messageId":"2354","endLine":21,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2384","line":25,"column":8,"nodeType":"2353","messageId":"2354","endLine":25,"endColumn":32},{"ruleId":"2351","severity":1,"message":"2464","line":27,"column":8,"nodeType":"2353","messageId":"2354","endLine":27,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2465","line":28,"column":8,"nodeType":"2353","messageId":"2354","endLine":28,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2466","line":16,"column":5,"nodeType":"2353","messageId":"2354","endLine":16,"endColumn":9},{"ruleId":"2351","severity":1,"message":"2395","line":17,"column":5,"nodeType":"2353","messageId":"2354","endLine":17,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2467","line":42,"column":8,"nodeType":"2353","messageId":"2354","endLine":42,"endColumn":28},{"ruleId":"2351","severity":1,"message":"2468","line":49,"column":25,"nodeType":"2353","messageId":"2354","endLine":49,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2469","line":108,"column":26,"nodeType":"2353","messageId":"2354","endLine":108,"endColumn":41},{"ruleId":"2351","severity":1,"message":"2470","line":108,"column":77,"nodeType":"2353","messageId":"2354","endLine":108,"endColumn":93},{"ruleId":"2351","severity":1,"message":"2471","line":150,"column":27,"nodeType":"2353","messageId":"2354","endLine":150,"endColumn":28},{"ruleId":"2376","severity":1,"message":"2472","line":164,"column":8,"nodeType":"2378","endLine":164,"endColumn":25,"suggestions":"2473"},{"ruleId":"2351","severity":1,"message":"2474","line":34,"column":8,"nodeType":"2353","messageId":"2354","endLine":34,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2475","line":5,"column":9,"nodeType":"2353","messageId":"2354","endLine":5,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2476","line":14,"column":33,"nodeType":"2353","messageId":"2354","endLine":14,"endColumn":58},{"ruleId":"2351","severity":1,"message":"2477","line":19,"column":12,"nodeType":"2353","messageId":"2354","endLine":19,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2478","line":19,"column":18,"nodeType":"2353","messageId":"2354","endLine":19,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2479","line":32,"column":15,"nodeType":"2353","messageId":"2354","endLine":32,"endColumn":35},{"ruleId":"2376","severity":1,"message":"2480","line":36,"column":8,"nodeType":"2378","endLine":36,"endColumn":10,"suggestions":"2481"},{"ruleId":"2351","severity":1,"message":"2482","line":48,"column":71,"nodeType":"2353","messageId":"2354","endLine":48,"endColumn":76},{"ruleId":"2351","severity":1,"message":"2483","line":11,"column":7,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":18},{"ruleId":"2357","severity":1,"message":"2484","line":4,"column":38,"nodeType":"2359","messageId":"2360","endLine":4,"endColumn":45},{"ruleId":"2351","severity":1,"message":"2485","line":2,"column":9,"nodeType":"2353","messageId":"2354","endLine":2,"endColumn":58},{"ruleId":"2351","severity":1,"message":"2366","line":1,"column":8,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2486","line":2,"column":9,"nodeType":"2353","messageId":"2354","endLine":2,"endColumn":44},{"ruleId":"2351","severity":1,"message":"2487","line":2,"column":46,"nodeType":"2353","messageId":"2354","endLine":2,"endColumn":86},{"ruleId":"2351","severity":1,"message":"2488","line":2,"column":9,"nodeType":"2353","messageId":"2354","endLine":2,"endColumn":71},{"ruleId":"2351","severity":1,"message":"2489","line":2,"column":16,"nodeType":"2353","messageId":"2354","endLine":2,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2417","line":25,"column":8,"nodeType":"2353","messageId":"2354","endLine":25,"endColumn":22},{"ruleId":"2351","severity":1,"message":"2490","line":29,"column":8,"nodeType":"2353","messageId":"2354","endLine":29,"endColumn":27},{"ruleId":"2351","severity":1,"message":"2381","line":107,"column":11,"nodeType":"2353","messageId":"2354","endLine":107,"endColumn":24},{"ruleId":"2351","severity":1,"message":"2491","line":108,"column":12,"nodeType":"2353","messageId":"2354","endLine":108,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2492","line":114,"column":11,"nodeType":"2353","messageId":"2354","endLine":114,"endColumn":23},{"ruleId":"2351","severity":1,"message":"2364","line":138,"column":43,"nodeType":"2353","messageId":"2354","endLine":138,"endColumn":44},{"ruleId":"2351","severity":1,"message":"2383","line":10,"column":5,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2384","line":30,"column":8,"nodeType":"2353","messageId":"2354","endLine":30,"endColumn":32},{"ruleId":"2351","severity":1,"message":"2493","line":42,"column":5,"nodeType":"2353","messageId":"2354","endLine":42,"endColumn":26},{"ruleId":"2376","severity":1,"message":"2494","line":170,"column":15,"nodeType":"2495","endLine":178,"endColumn":6},{"ruleId":"2376","severity":1,"message":"2496","line":178,"column":8,"nodeType":"2378","endLine":178,"endColumn":10,"suggestions":"2497"},{"ruleId":"2351","severity":1,"message":"2364","line":180,"column":41,"nodeType":"2353","messageId":"2354","endLine":180,"endColumn":42},{"ruleId":"2351","severity":1,"message":"2498","line":5,"column":15,"nodeType":"2353","messageId":"2354","endLine":5,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2499","line":6,"column":8,"nodeType":"2353","messageId":"2354","endLine":6,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2500","line":12,"column":8,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2501","line":20,"column":9,"nodeType":"2353","messageId":"2354","endLine":20,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2502","line":20,"column":20,"nodeType":"2353","messageId":"2354","endLine":20,"endColumn":35},{"ruleId":"2351","severity":1,"message":"2503","line":20,"column":37,"nodeType":"2353","messageId":"2354","endLine":20,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2504","line":20,"column":50,"nodeType":"2353","messageId":"2354","endLine":20,"endColumn":64},{"ruleId":"2351","severity":1,"message":"2505","line":21,"column":8,"nodeType":"2353","messageId":"2354","endLine":21,"endColumn":33},{"ruleId":"2351","severity":1,"message":"2506","line":55,"column":11,"nodeType":"2353","messageId":"2354","endLine":55,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2507","line":56,"column":11,"nodeType":"2353","messageId":"2354","endLine":56,"endColumn":22},{"ruleId":"2351","severity":1,"message":"2498","line":5,"column":16,"nodeType":"2353","messageId":"2354","endLine":5,"endColumn":26},{"ruleId":"2351","severity":1,"message":"2500","line":8,"column":8,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2508","line":10,"column":8,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2509","line":11,"column":8,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2510","line":12,"column":8,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":23},{"ruleId":"2351","severity":1,"message":"2499","line":13,"column":8,"nodeType":"2353","messageId":"2354","endLine":13,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2511","line":15,"column":8,"nodeType":"2353","messageId":"2354","endLine":15,"endColumn":22},{"ruleId":"2351","severity":1,"message":"2501","line":18,"column":10,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2502","line":18,"column":21,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":36},{"ruleId":"2351","severity":1,"message":"2503","line":18,"column":38,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":49},{"ruleId":"2351","severity":1,"message":"2504","line":18,"column":51,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":65},{"ruleId":"2351","severity":1,"message":"2505","line":19,"column":8,"nodeType":"2353","messageId":"2354","endLine":19,"endColumn":33},{"ruleId":"2351","severity":1,"message":"2512","line":20,"column":8,"nodeType":"2353","messageId":"2354","endLine":20,"endColumn":28},{"ruleId":"2351","severity":1,"message":"2513","line":21,"column":8,"nodeType":"2353","messageId":"2354","endLine":21,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2506","line":51,"column":11,"nodeType":"2353","messageId":"2354","endLine":51,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2507","line":52,"column":11,"nodeType":"2353","messageId":"2354","endLine":52,"endColumn":22},{"ruleId":"2351","severity":1,"message":"2366","line":1,"column":8,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2447","line":5,"column":5,"nodeType":"2353","messageId":"2354","endLine":5,"endColumn":11},{"ruleId":"2376","severity":1,"message":"2514","line":40,"column":8,"nodeType":"2378","endLine":40,"endColumn":10,"suggestions":"2515"},{"ruleId":"2351","severity":1,"message":"2516","line":1,"column":8,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2447","line":5,"column":5,"nodeType":"2353","messageId":"2354","endLine":5,"endColumn":11},{"ruleId":"2376","severity":1,"message":"2514","line":40,"column":8,"nodeType":"2378","endLine":40,"endColumn":10,"suggestions":"2517"},{"ruleId":"2351","severity":1,"message":"2518","line":19,"column":8,"nodeType":"2353","messageId":"2354","endLine":19,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2519","line":20,"column":8,"nodeType":"2353","messageId":"2354","endLine":20,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2520","line":21,"column":8,"nodeType":"2353","messageId":"2354","endLine":21,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2447","line":5,"column":5,"nodeType":"2353","messageId":"2354","endLine":5,"endColumn":11},{"ruleId":"2376","severity":1,"message":"2521","line":40,"column":8,"nodeType":"2378","endLine":40,"endColumn":10,"suggestions":"2522"},{"ruleId":"2351","severity":1,"message":"2447","line":5,"column":5,"nodeType":"2353","messageId":"2354","endLine":5,"endColumn":11},{"ruleId":"2376","severity":1,"message":"2523","line":40,"column":8,"nodeType":"2378","endLine":40,"endColumn":10,"suggestions":"2524"},{"ruleId":"2351","severity":1,"message":"2516","line":1,"column":8,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":17},{"ruleId":"2376","severity":1,"message":"2525","line":66,"column":8,"nodeType":"2378","endLine":66,"endColumn":10,"suggestions":"2526"},{"ruleId":"2351","severity":1,"message":"2527","line":2,"column":9,"nodeType":"2353","messageId":"2354","endLine":2,"endColumn":50},{"ruleId":"2351","severity":1,"message":"2528","line":1,"column":9,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":33},{"ruleId":"2351","severity":1,"message":"2529","line":11,"column":72,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":88},{"ruleId":"2351","severity":1,"message":"2530","line":12,"column":9,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":41},{"ruleId":"2351","severity":1,"message":"2399","line":22,"column":11,"nodeType":"2353","messageId":"2354","endLine":22,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2531","line":28,"column":11,"nodeType":"2353","messageId":"2354","endLine":28,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2532","line":29,"column":15,"nodeType":"2353","messageId":"2354","endLine":29,"endColumn":23},{"ruleId":"2351","severity":1,"message":"2533","line":1,"column":37,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":43},{"ruleId":"2351","severity":1,"message":"2454","line":4,"column":9,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":22,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2395","line":4,"column":56,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":64},{"ruleId":"2351","severity":1,"message":"2419","line":11,"column":8,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2397","line":12,"column":8,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2417","line":14,"column":8,"nodeType":"2353","messageId":"2354","endLine":14,"endColumn":22},{"ruleId":"2357","severity":1,"message":"2534","line":19,"column":19,"nodeType":"2359","messageId":"2360","endLine":19,"endColumn":27},{"ruleId":"2351","severity":1,"message":"2535","line":21,"column":12,"nodeType":"2353","messageId":"2354","endLine":21,"endColumn":22},{"ruleId":"2351","severity":1,"message":"2536","line":23,"column":12,"nodeType":"2353","messageId":"2354","endLine":23,"endColumn":22},{"ruleId":"2351","severity":1,"message":"2537","line":23,"column":24,"nodeType":"2353","messageId":"2354","endLine":23,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":22,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2395","line":4,"column":56,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":64},{"ruleId":"2357","severity":1,"message":"2418","line":16,"column":26,"nodeType":"2359","messageId":"2360","endLine":16,"endColumn":38},{"ruleId":"2351","severity":1,"message":"2366","line":1,"column":8,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2366","line":1,"column":8,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2366","line":1,"column":8,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2366","line":1,"column":8,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2538","line":2,"column":9,"nodeType":"2353","messageId":"2354","endLine":2,"endColumn":54},{"ruleId":"2351","severity":1,"message":"2539","line":1,"column":13,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":24},{"ruleId":"2351","severity":1,"message":"2540","line":4,"column":5,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":43},{"ruleId":"2351","severity":1,"message":"2541","line":5,"column":5,"nodeType":"2353","messageId":"2354","endLine":5,"endColumn":51},{"ruleId":"2351","severity":1,"message":"2542","line":2,"column":9,"nodeType":"2353","messageId":"2354","endLine":2,"endColumn":45},{"ruleId":"2351","severity":1,"message":"2540","line":3,"column":9,"nodeType":"2353","messageId":"2354","endLine":3,"endColumn":47},{"ruleId":"2351","severity":1,"message":"2543","line":3,"column":49,"nodeType":"2353","messageId":"2354","endLine":3,"endColumn":78},{"ruleId":"2351","severity":1,"message":"2383","line":10,"column":5,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2384","line":30,"column":8,"nodeType":"2353","messageId":"2354","endLine":30,"endColumn":32},{"ruleId":"2351","severity":1,"message":"2464","line":32,"column":8,"nodeType":"2353","messageId":"2354","endLine":32,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2465","line":33,"column":8,"nodeType":"2353","messageId":"2354","endLine":33,"endColumn":25},{"ruleId":"2376","severity":1,"message":"2544","line":152,"column":8,"nodeType":"2378","endLine":152,"endColumn":10,"suggestions":"2545"},{"ruleId":"2351","severity":1,"message":"2364","line":154,"column":41,"nodeType":"2353","messageId":"2354","endLine":154,"endColumn":42},{"ruleId":"2351","severity":1,"message":"2400","line":8,"column":5,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2546","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2383","line":10,"column":5,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2454","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2547","line":14,"column":5,"nodeType":"2353","messageId":"2354","endLine":14,"endColumn":8},{"ruleId":"2351","severity":1,"message":"2548","line":15,"column":5,"nodeType":"2353","messageId":"2354","endLine":15,"endColumn":9},{"ruleId":"2351","severity":1,"message":"2549","line":16,"column":35,"nodeType":"2353","messageId":"2354","endLine":16,"endColumn":47},{"ruleId":"2351","severity":1,"message":"2550","line":22,"column":8,"nodeType":"2353","messageId":"2354","endLine":22,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2551","line":27,"column":8,"nodeType":"2353","messageId":"2354","endLine":27,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2384","line":31,"column":8,"nodeType":"2353","messageId":"2354","endLine":31,"endColumn":32},{"ruleId":"2351","severity":1,"message":"2552","line":35,"column":9,"nodeType":"2353","messageId":"2354","endLine":35,"endColumn":22},{"ruleId":"2351","severity":1,"message":"2553","line":108,"column":10,"nodeType":"2353","messageId":"2354","endLine":108,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2554","line":116,"column":7,"nodeType":"2353","messageId":"2354","endLine":116,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2555","line":143,"column":27,"nodeType":"2353","messageId":"2354","endLine":143,"endColumn":42},{"ruleId":"2351","severity":1,"message":"2506","line":148,"column":11,"nodeType":"2353","messageId":"2354","endLine":148,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2381","line":149,"column":11,"nodeType":"2353","messageId":"2354","endLine":149,"endColumn":24},{"ruleId":"2351","severity":1,"message":"2491","line":151,"column":12,"nodeType":"2353","messageId":"2354","endLine":151,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2556","line":151,"column":19,"nodeType":"2353","messageId":"2354","endLine":151,"endColumn":27},{"ruleId":"2351","severity":1,"message":"2557","line":152,"column":12,"nodeType":"2353","messageId":"2354","endLine":152,"endColumn":26},{"ruleId":"2351","severity":1,"message":"2558","line":152,"column":28,"nodeType":"2353","messageId":"2354","endLine":152,"endColumn":45},{"ruleId":"2376","severity":1,"message":"2494","line":181,"column":15,"nodeType":"2495","endLine":188,"endColumn":6},{"ruleId":"2376","severity":1,"message":"2496","line":188,"column":8,"nodeType":"2378","endLine":188,"endColumn":10,"suggestions":"2559"},{"ruleId":"2351","severity":1,"message":"2421","line":190,"column":25,"nodeType":"2353","messageId":"2354","endLine":190,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2385","line":4,"column":9,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2393","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2560","line":45,"column":8,"nodeType":"2353","messageId":"2354","endLine":45,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2372","line":46,"column":9,"nodeType":"2353","messageId":"2354","endLine":46,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2561","line":56,"column":10,"nodeType":"2353","messageId":"2354","endLine":56,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2562","line":140,"column":32,"nodeType":"2353","messageId":"2354","endLine":140,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2563","line":144,"column":32,"nodeType":"2353","messageId":"2354","endLine":144,"endColumn":40},{"ruleId":"2351","severity":1,"message":"2373","line":257,"column":11,"nodeType":"2353","messageId":"2354","endLine":257,"endColumn":27},{"ruleId":"2351","severity":1,"message":"2374","line":264,"column":12,"nodeType":"2353","messageId":"2354","endLine":264,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2375","line":268,"column":11,"nodeType":"2353","messageId":"2354","endLine":268,"endColumn":28},{"ruleId":"2376","severity":1,"message":"2564","line":349,"column":8,"nodeType":"2378","endLine":349,"endColumn":10,"suggestions":"2565"},{"ruleId":"2351","severity":1,"message":"2566","line":351,"column":11,"nodeType":"2353","messageId":"2354","endLine":351,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2489","line":2,"column":16,"nodeType":"2353","messageId":"2354","endLine":2,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2381","line":140,"column":11,"nodeType":"2353","messageId":"2354","endLine":140,"endColumn":24},{"ruleId":"2351","severity":1,"message":"2491","line":141,"column":12,"nodeType":"2353","messageId":"2354","endLine":141,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2492","line":147,"column":11,"nodeType":"2353","messageId":"2354","endLine":147,"endColumn":23},{"ruleId":"2351","severity":1,"message":"2364","line":170,"column":37,"nodeType":"2353","messageId":"2354","endLine":170,"endColumn":38},{"ruleId":"2376","severity":1,"message":"2567","line":159,"column":12,"nodeType":"2378","endLine":159,"endColumn":14,"suggestions":"2568"},{"ruleId":"2351","severity":1,"message":"2364","line":162,"column":43,"nodeType":"2353","messageId":"2354","endLine":162,"endColumn":44},{"ruleId":"2376","severity":1,"message":"2569","line":134,"column":8,"nodeType":"2378","endLine":134,"endColumn":10,"suggestions":"2570"},{"ruleId":"2351","severity":1,"message":"2364","line":137,"column":43,"nodeType":"2353","messageId":"2354","endLine":137,"endColumn":44},{"ruleId":"2351","severity":1,"message":"2571","line":3,"column":9,"nodeType":"2353","messageId":"2354","endLine":3,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2547","line":7,"column":32,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":35},{"ruleId":"2351","severity":1,"message":"2548","line":7,"column":37,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":41},{"ruleId":"2351","severity":1,"message":"2553","line":74,"column":10,"nodeType":"2353","messageId":"2354","endLine":74,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2554","line":82,"column":7,"nodeType":"2353","messageId":"2354","endLine":82,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2506","line":96,"column":11,"nodeType":"2353","messageId":"2354","endLine":96,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2491","line":97,"column":12,"nodeType":"2353","messageId":"2354","endLine":97,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2492","line":103,"column":11,"nodeType":"2353","messageId":"2354","endLine":103,"endColumn":23},{"ruleId":"2376","severity":1,"message":"2572","line":120,"column":8,"nodeType":"2378","endLine":120,"endColumn":10,"suggestions":"2573"},{"ruleId":"2351","severity":1,"message":"2574","line":11,"column":8,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":26},{"ruleId":"2351","severity":1,"message":"2384","line":23,"column":8,"nodeType":"2353","messageId":"2354","endLine":23,"endColumn":32},{"ruleId":"2351","severity":1,"message":"2464","line":25,"column":8,"nodeType":"2353","messageId":"2354","endLine":25,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2465","line":26,"column":8,"nodeType":"2353","messageId":"2354","endLine":26,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2575","line":27,"column":9,"nodeType":"2353","messageId":"2354","endLine":27,"endColumn":32},{"ruleId":"2351","severity":1,"message":"2421","line":194,"column":33,"nodeType":"2353","messageId":"2354","endLine":194,"endColumn":38},{"ruleId":"2351","severity":1,"message":"2385","line":4,"column":9,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2393","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2560","line":45,"column":8,"nodeType":"2353","messageId":"2354","endLine":45,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2372","line":46,"column":9,"nodeType":"2353","messageId":"2354","endLine":46,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2561","line":56,"column":10,"nodeType":"2353","messageId":"2354","endLine":56,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2562","line":144,"column":38,"nodeType":"2353","messageId":"2354","endLine":144,"endColumn":54},{"ruleId":"2351","severity":1,"message":"2563","line":144,"column":85,"nodeType":"2353","messageId":"2354","endLine":144,"endColumn":93},{"ruleId":"2351","severity":1,"message":"2373","line":254,"column":11,"nodeType":"2353","messageId":"2354","endLine":254,"endColumn":27},{"ruleId":"2351","severity":1,"message":"2374","line":261,"column":12,"nodeType":"2353","messageId":"2354","endLine":261,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2375","line":265,"column":11,"nodeType":"2353","messageId":"2354","endLine":265,"endColumn":28},{"ruleId":"2376","severity":1,"message":"2564","line":345,"column":8,"nodeType":"2378","endLine":345,"endColumn":10,"suggestions":"2576"},{"ruleId":"2351","severity":1,"message":"2516","line":1,"column":8,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2577","line":6,"column":5,"nodeType":"2353","messageId":"2354","endLine":6,"endColumn":8},{"ruleId":"2351","severity":1,"message":"2400","line":7,"column":5,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2454","line":8,"column":5,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2475","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":9},{"ruleId":"2351","severity":1,"message":"2578","line":10,"column":14,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2579","line":12,"column":5,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2580","line":17,"column":5,"nodeType":"2353","messageId":"2354","endLine":17,"endColumn":10},{"ruleId":"2351","severity":1,"message":"2581","line":18,"column":5,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":14},{"ruleId":"2351","severity":1,"message":"2582","line":19,"column":5,"nodeType":"2353","messageId":"2354","endLine":19,"endColumn":14},{"ruleId":"2351","severity":1,"message":"2583","line":20,"column":5,"nodeType":"2353","messageId":"2354","endLine":20,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2584","line":21,"column":5,"nodeType":"2353","messageId":"2354","endLine":21,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2585","line":21,"column":15,"nodeType":"2353","messageId":"2354","endLine":21,"endColumn":22},{"ruleId":"2351","severity":1,"message":"2586","line":32,"column":9,"nodeType":"2353","messageId":"2354","endLine":32,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2587","line":37,"column":8,"nodeType":"2353","messageId":"2354","endLine":37,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2588","line":40,"column":8,"nodeType":"2353","messageId":"2354","endLine":40,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2474","line":42,"column":8,"nodeType":"2353","messageId":"2354","endLine":42,"endColumn":25},{"ruleId":"2357","severity":1,"message":"2589","line":44,"column":26,"nodeType":"2359","messageId":"2360","endLine":44,"endColumn":46},{"ruleId":"2351","severity":1,"message":"2590","line":46,"column":11,"nodeType":"2353","messageId":"2354","endLine":46,"endColumn":42},{"ruleId":"2357","severity":1,"message":"2591","line":124,"column":58,"nodeType":"2353","messageId":"2360","endLine":124,"endColumn":75},{"ruleId":"2357","severity":1,"message":"2591","line":129,"column":78,"nodeType":"2353","messageId":"2360","endLine":129,"endColumn":95},{"ruleId":"2351","severity":1,"message":"2400","line":7,"column":5,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2592","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2395","line":12,"column":5,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2593","line":12,"column":34,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":40},{"ruleId":"2351","severity":1,"message":"2594","line":13,"column":5,"nodeType":"2353","messageId":"2354","endLine":13,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2396","line":14,"column":5,"nodeType":"2353","messageId":"2354","endLine":14,"endColumn":14},{"ruleId":"2351","severity":1,"message":"2551","line":22,"column":8,"nodeType":"2353","messageId":"2354","endLine":22,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2595","line":26,"column":8,"nodeType":"2353","messageId":"2354","endLine":26,"endColumn":23},{"ruleId":"2351","severity":1,"message":"2596","line":27,"column":8,"nodeType":"2353","messageId":"2354","endLine":27,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2505","line":28,"column":8,"nodeType":"2353","messageId":"2354","endLine":28,"endColumn":33},{"ruleId":"2351","severity":1,"message":"2597","line":29,"column":8,"nodeType":"2353","messageId":"2354","endLine":29,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2598","line":30,"column":8,"nodeType":"2353","messageId":"2354","endLine":30,"endColumn":17},{"ruleId":"2357","severity":1,"message":"2599","line":46,"column":12,"nodeType":"2359","messageId":"2360","endLine":46,"endColumn":20},{"ruleId":"2357","severity":1,"message":"2600","line":46,"column":22,"nodeType":"2359","messageId":"2360","endLine":46,"endColumn":27},{"ruleId":"2357","severity":1,"message":"2601","line":46,"column":29,"nodeType":"2359","messageId":"2360","endLine":46,"endColumn":34},{"ruleId":"2351","severity":1,"message":"2482","line":446,"column":76,"nodeType":"2353","messageId":"2354","endLine":446,"endColumn":81},{"ruleId":"2351","severity":1,"message":"2400","line":4,"column":23,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2551","line":8,"column":8,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2602","line":16,"column":8,"nodeType":"2353","messageId":"2354","endLine":16,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2603","line":17,"column":8,"nodeType":"2353","messageId":"2354","endLine":17,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2552","line":18,"column":9,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":22},{"ruleId":"2357","severity":1,"message":"2604","line":281,"column":31,"nodeType":"2359","messageId":"2360","endLine":281,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2605","line":281,"column":31,"nodeType":"2353","messageId":"2354","endLine":281,"endColumn":37},{"ruleId":"2357","severity":1,"message":"2420","line":281,"column":39,"nodeType":"2359","messageId":"2360","endLine":281,"endColumn":56},{"ruleId":"2351","severity":1,"message":"2606","line":281,"column":39,"nodeType":"2353","messageId":"2354","endLine":281,"endColumn":56},{"ruleId":"2351","severity":1,"message":"2607","line":4,"column":9,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2608","line":4,"column":21,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2400","line":7,"column":5,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2609","line":8,"column":5,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":12},{"ruleId":"2351","severity":1,"message":"2610","line":8,"column":14,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2394","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2592","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2395","line":12,"column":5,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2611","line":12,"column":15,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2612","line":12,"column":22,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":32},{"ruleId":"2351","severity":1,"message":"2593","line":12,"column":34,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":40},{"ruleId":"2351","severity":1,"message":"2594","line":13,"column":5,"nodeType":"2353","messageId":"2354","endLine":13,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2498","line":15,"column":5,"nodeType":"2353","messageId":"2354","endLine":15,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2613","line":15,"column":17,"nodeType":"2353","messageId":"2354","endLine":15,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2397","line":21,"column":8,"nodeType":"2353","messageId":"2354","endLine":21,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2603","line":23,"column":8,"nodeType":"2353","messageId":"2354","endLine":23,"endColumn":18},{"ruleId":"2357","severity":1,"message":"2614","line":31,"column":31,"nodeType":"2359","messageId":"2360","endLine":31,"endColumn":60},{"ruleId":"2351","severity":1,"message":"2607","line":4,"column":9,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2400","line":7,"column":5,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2609","line":8,"column":5,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":12},{"ruleId":"2351","severity":1,"message":"2610","line":8,"column":14,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2394","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2592","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2395","line":12,"column":5,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2611","line":12,"column":15,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2612","line":12,"column":22,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":32},{"ruleId":"2351","severity":1,"message":"2593","line":12,"column":34,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":40},{"ruleId":"2351","severity":1,"message":"2594","line":13,"column":5,"nodeType":"2353","messageId":"2354","endLine":13,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2498","line":15,"column":5,"nodeType":"2353","messageId":"2354","endLine":15,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2397","line":21,"column":8,"nodeType":"2353","messageId":"2354","endLine":21,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2615","line":30,"column":9,"nodeType":"2353","messageId":"2354","endLine":30,"endColumn":32},{"ruleId":"2357","severity":1,"message":"2614","line":134,"column":31,"nodeType":"2359","messageId":"2360","endLine":134,"endColumn":60},{"ruleId":"2351","severity":1,"message":"2390","line":135,"column":11,"nodeType":"2353","messageId":"2354","endLine":135,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2616","line":141,"column":27,"nodeType":"2353","messageId":"2354","endLine":141,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2607","line":4,"column":9,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2608","line":4,"column":21,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2400","line":7,"column":5,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2609","line":8,"column":5,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":12},{"ruleId":"2351","severity":1,"message":"2610","line":8,"column":14,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2394","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2592","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2395","line":12,"column":5,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2611","line":12,"column":15,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2612","line":12,"column":22,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":32},{"ruleId":"2351","severity":1,"message":"2593","line":12,"column":34,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":40},{"ruleId":"2351","severity":1,"message":"2594","line":13,"column":5,"nodeType":"2353","messageId":"2354","endLine":13,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2498","line":15,"column":5,"nodeType":"2353","messageId":"2354","endLine":15,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2613","line":15,"column":17,"nodeType":"2353","messageId":"2354","endLine":15,"endColumn":29},{"ruleId":"2357","severity":1,"message":"2614","line":27,"column":28,"nodeType":"2359","messageId":"2360","endLine":27,"endColumn":57},{"ruleId":"2351","severity":1,"message":"2607","line":4,"column":9,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2400","line":7,"column":5,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2609","line":8,"column":5,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":12},{"ruleId":"2351","severity":1,"message":"2610","line":8,"column":14,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2394","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2592","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2395","line":12,"column":5,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2611","line":12,"column":15,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2612","line":12,"column":22,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":32},{"ruleId":"2351","severity":1,"message":"2593","line":12,"column":34,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":40},{"ruleId":"2351","severity":1,"message":"2594","line":13,"column":5,"nodeType":"2353","messageId":"2354","endLine":13,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2498","line":15,"column":5,"nodeType":"2353","messageId":"2354","endLine":15,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2613","line":15,"column":17,"nodeType":"2353","messageId":"2354","endLine":15,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2397","line":21,"column":8,"nodeType":"2353","messageId":"2354","endLine":21,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2617","line":26,"column":8,"nodeType":"2353","messageId":"2354","endLine":26,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2618","line":27,"column":8,"nodeType":"2353","messageId":"2354","endLine":27,"endColumn":22},{"ruleId":"2351","severity":1,"message":"2619","line":28,"column":8,"nodeType":"2353","messageId":"2354","endLine":28,"endColumn":28},{"ruleId":"2357","severity":1,"message":"2614","line":33,"column":24,"nodeType":"2359","messageId":"2360","endLine":33,"endColumn":53},{"ruleId":"2351","severity":1,"message":"2390","line":34,"column":11,"nodeType":"2353","messageId":"2354","endLine":34,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2616","line":40,"column":27,"nodeType":"2353","messageId":"2354","endLine":40,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2499","line":26,"column":8,"nodeType":"2353","messageId":"2354","endLine":26,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2620","line":27,"column":8,"nodeType":"2353","messageId":"2354","endLine":27,"endColumn":23},{"ruleId":"2351","severity":1,"message":"2621","line":31,"column":8,"nodeType":"2353","messageId":"2354","endLine":31,"endColumn":22},{"ruleId":"2357","severity":1,"message":"2614","line":220,"column":37,"nodeType":"2359","messageId":"2360","endLine":220,"endColumn":66},{"ruleId":"2351","severity":1,"message":"2421","line":253,"column":39,"nodeType":"2353","messageId":"2354","endLine":253,"endColumn":44},{"ruleId":"2351","severity":1,"message":"2454","line":5,"column":5,"nodeType":"2353","messageId":"2354","endLine":5,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2395","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2622","line":14,"column":5,"nodeType":"2353","messageId":"2354","endLine":14,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2623","line":15,"column":5,"nodeType":"2353","messageId":"2354","endLine":15,"endColumn":14},{"ruleId":"2351","severity":1,"message":"2393","line":16,"column":5,"nodeType":"2353","messageId":"2354","endLine":16,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2475","line":18,"column":5,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":9},{"ruleId":"2351","severity":1,"message":"2624","line":36,"column":9,"nodeType":"2353","messageId":"2354","endLine":36,"endColumn":27},{"ruleId":"2351","severity":1,"message":"2499","line":37,"column":8,"nodeType":"2353","messageId":"2354","endLine":37,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2625","line":38,"column":8,"nodeType":"2353","messageId":"2354","endLine":38,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2552","line":45,"column":9,"nodeType":"2353","messageId":"2354","endLine":45,"endColumn":22},{"ruleId":"2351","severity":1,"message":"2626","line":51,"column":12,"nodeType":"2353","messageId":"2354","endLine":51,"endColumn":26},{"ruleId":"2351","severity":1,"message":"2627","line":51,"column":28,"nodeType":"2353","messageId":"2354","endLine":51,"endColumn":45},{"ruleId":"2351","severity":1,"message":"2628","line":52,"column":28,"nodeType":"2353","messageId":"2354","endLine":52,"endColumn":45},{"ruleId":"2351","severity":1,"message":"2629","line":53,"column":19,"nodeType":"2353","messageId":"2354","endLine":53,"endColumn":27},{"ruleId":"2376","severity":1,"message":"2544","line":61,"column":8,"nodeType":"2378","endLine":61,"endColumn":10,"suggestions":"2630"},{"ruleId":"2351","severity":1,"message":"2482","line":82,"column":63,"nodeType":"2353","messageId":"2354","endLine":82,"endColumn":68},{"ruleId":"2351","severity":1,"message":"2421","line":114,"column":30,"nodeType":"2353","messageId":"2354","endLine":114,"endColumn":35},{"ruleId":"2351","severity":1,"message":"2454","line":4,"column":9,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":22,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2395","line":4,"column":56,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":64},{"ruleId":"2351","severity":1,"message":"2419","line":8,"column":8,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2631","line":9,"column":8,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2632","line":22,"column":5,"nodeType":"2353","messageId":"2354","endLine":22,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2400","line":7,"column":5,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2592","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2395","line":12,"column":5,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2593","line":12,"column":34,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":40},{"ruleId":"2351","severity":1,"message":"2594","line":13,"column":5,"nodeType":"2353","messageId":"2354","endLine":13,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2396","line":14,"column":5,"nodeType":"2353","messageId":"2354","endLine":14,"endColumn":14},{"ruleId":"2351","severity":1,"message":"2419","line":19,"column":8,"nodeType":"2353","messageId":"2354","endLine":19,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2551","line":20,"column":8,"nodeType":"2353","messageId":"2354","endLine":20,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2595","line":24,"column":8,"nodeType":"2353","messageId":"2354","endLine":24,"endColumn":23},{"ruleId":"2351","severity":1,"message":"2596","line":25,"column":8,"nodeType":"2353","messageId":"2354","endLine":25,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2505","line":26,"column":8,"nodeType":"2353","messageId":"2354","endLine":26,"endColumn":33},{"ruleId":"2351","severity":1,"message":"2597","line":27,"column":8,"nodeType":"2353","messageId":"2354","endLine":27,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2598","line":28,"column":8,"nodeType":"2353","messageId":"2354","endLine":28,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2633","line":32,"column":7,"nodeType":"2353","messageId":"2354","endLine":32,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2482","line":343,"column":106,"nodeType":"2353","messageId":"2354","endLine":343,"endColumn":111},{"ruleId":"2351","severity":1,"message":"2482","line":345,"column":76,"nodeType":"2353","messageId":"2354","endLine":345,"endColumn":81},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":36,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":44},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":46,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":62},{"ruleId":"2351","severity":1,"message":"2395","line":4,"column":70,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":78},{"ruleId":"2351","severity":1,"message":"2631","line":9,"column":8,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2634","line":10,"column":8,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2632","line":18,"column":5,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2635","line":19,"column":5,"nodeType":"2353","messageId":"2354","endLine":19,"endColumn":38},{"ruleId":"2351","severity":1,"message":"2393","line":7,"column":5,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2395","line":10,"column":5,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2631","line":18,"column":8,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2634","line":19,"column":8,"nodeType":"2353","messageId":"2354","endLine":19,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2632","line":27,"column":5,"nodeType":"2353","messageId":"2354","endLine":27,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2635","line":28,"column":5,"nodeType":"2353","messageId":"2354","endLine":28,"endColumn":38},{"ruleId":"2351","severity":1,"message":"2454","line":4,"column":10,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":23,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":31},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":33,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":49},{"ruleId":"2351","severity":1,"message":"2395","line":4,"column":57,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":65},{"ruleId":"2351","severity":1,"message":"2419","line":8,"column":8,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2636","line":10,"column":8,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2454","line":4,"column":9,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":22,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2395","line":4,"column":56,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":64},{"ruleId":"2351","severity":1,"message":"2419","line":8,"column":8,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2631","line":9,"column":8,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2632","line":22,"column":5,"nodeType":"2353","messageId":"2354","endLine":22,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2637","line":26,"column":7,"nodeType":"2353","messageId":"2354","endLine":26,"endColumn":33},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":22,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2395","line":4,"column":56,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":64},{"ruleId":"2351","severity":1,"message":"2417","line":11,"column":8,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":22},{"ruleId":"2357","severity":1,"message":"2418","line":16,"column":19,"nodeType":"2359","messageId":"2360","endLine":16,"endColumn":31},{"ruleId":"2351","severity":1,"message":"2383","line":10,"column":5,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2493","line":39,"column":5,"nodeType":"2353","messageId":"2354","endLine":39,"endColumn":26},{"ruleId":"2376","severity":1,"message":"2494","line":157,"column":15,"nodeType":"2495","endLine":165,"endColumn":6},{"ruleId":"2376","severity":1,"message":"2496","line":165,"column":8,"nodeType":"2378","endLine":165,"endColumn":10,"suggestions":"2638"},{"ruleId":"2351","severity":1,"message":"2364","line":167,"column":41,"nodeType":"2353","messageId":"2354","endLine":167,"endColumn":42},{"ruleId":"2351","severity":1,"message":"2385","line":4,"column":9,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2393","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2560","line":45,"column":8,"nodeType":"2353","messageId":"2354","endLine":45,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2372","line":46,"column":9,"nodeType":"2353","messageId":"2354","endLine":46,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2561","line":56,"column":10,"nodeType":"2353","messageId":"2354","endLine":56,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2562","line":144,"column":38,"nodeType":"2353","messageId":"2354","endLine":144,"endColumn":54},{"ruleId":"2351","severity":1,"message":"2563","line":144,"column":85,"nodeType":"2353","messageId":"2354","endLine":144,"endColumn":93},{"ruleId":"2351","severity":1,"message":"2373","line":254,"column":11,"nodeType":"2353","messageId":"2354","endLine":254,"endColumn":27},{"ruleId":"2351","severity":1,"message":"2374","line":261,"column":12,"nodeType":"2353","messageId":"2354","endLine":261,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2375","line":265,"column":11,"nodeType":"2353","messageId":"2354","endLine":265,"endColumn":28},{"ruleId":"2376","severity":1,"message":"2564","line":345,"column":8,"nodeType":"2378","endLine":345,"endColumn":10,"suggestions":"2639"},{"ruleId":"2351","severity":1,"message":"2383","line":10,"column":5,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2384","line":32,"column":8,"nodeType":"2353","messageId":"2354","endLine":32,"endColumn":32},{"ruleId":"2351","severity":1,"message":"2493","line":44,"column":5,"nodeType":"2353","messageId":"2354","endLine":44,"endColumn":26},{"ruleId":"2376","severity":1,"message":"2494","line":172,"column":15,"nodeType":"2495","endLine":180,"endColumn":6},{"ruleId":"2376","severity":1,"message":"2496","line":180,"column":8,"nodeType":"2378","endLine":180,"endColumn":10,"suggestions":"2640"},{"ruleId":"2351","severity":1,"message":"2364","line":182,"column":41,"nodeType":"2353","messageId":"2354","endLine":182,"endColumn":42},{"ruleId":"2351","severity":1,"message":"2571","line":3,"column":9,"nodeType":"2353","messageId":"2354","endLine":3,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2547","line":7,"column":32,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":35},{"ruleId":"2351","severity":1,"message":"2548","line":7,"column":37,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":41},{"ruleId":"2351","severity":1,"message":"2641","line":22,"column":8,"nodeType":"2353","messageId":"2354","endLine":22,"endColumn":24},{"ruleId":"2351","severity":1,"message":"2553","line":75,"column":10,"nodeType":"2353","messageId":"2354","endLine":75,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2554","line":83,"column":7,"nodeType":"2353","messageId":"2354","endLine":83,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2506","line":97,"column":11,"nodeType":"2353","messageId":"2354","endLine":97,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2491","line":98,"column":12,"nodeType":"2353","messageId":"2354","endLine":98,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2492","line":104,"column":11,"nodeType":"2353","messageId":"2354","endLine":104,"endColumn":23},{"ruleId":"2376","severity":1,"message":"2572","line":121,"column":8,"nodeType":"2378","endLine":121,"endColumn":10,"suggestions":"2642"},{"ruleId":"2351","severity":1,"message":"2385","line":4,"column":9,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2393","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2560","line":45,"column":8,"nodeType":"2353","messageId":"2354","endLine":45,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2372","line":46,"column":9,"nodeType":"2353","messageId":"2354","endLine":46,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2561","line":56,"column":10,"nodeType":"2353","messageId":"2354","endLine":56,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2562","line":140,"column":32,"nodeType":"2353","messageId":"2354","endLine":140,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2563","line":144,"column":32,"nodeType":"2353","messageId":"2354","endLine":144,"endColumn":40},{"ruleId":"2351","severity":1,"message":"2373","line":257,"column":11,"nodeType":"2353","messageId":"2354","endLine":257,"endColumn":27},{"ruleId":"2351","severity":1,"message":"2374","line":264,"column":12,"nodeType":"2353","messageId":"2354","endLine":264,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2375","line":268,"column":11,"nodeType":"2353","messageId":"2354","endLine":268,"endColumn":28},{"ruleId":"2376","severity":1,"message":"2564","line":349,"column":8,"nodeType":"2378","endLine":349,"endColumn":10,"suggestions":"2643"},{"ruleId":"2351","severity":1,"message":"2566","line":351,"column":11,"nodeType":"2353","messageId":"2354","endLine":351,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2400","line":8,"column":5,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2546","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2383","line":10,"column":5,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2454","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2547","line":14,"column":5,"nodeType":"2353","messageId":"2354","endLine":14,"endColumn":8},{"ruleId":"2351","severity":1,"message":"2548","line":15,"column":5,"nodeType":"2353","messageId":"2354","endLine":15,"endColumn":9},{"ruleId":"2351","severity":1,"message":"2549","line":16,"column":35,"nodeType":"2353","messageId":"2354","endLine":16,"endColumn":47},{"ruleId":"2351","severity":1,"message":"2550","line":22,"column":8,"nodeType":"2353","messageId":"2354","endLine":22,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2551","line":27,"column":8,"nodeType":"2353","messageId":"2354","endLine":27,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2384","line":31,"column":8,"nodeType":"2353","messageId":"2354","endLine":31,"endColumn":32},{"ruleId":"2351","severity":1,"message":"2552","line":35,"column":9,"nodeType":"2353","messageId":"2354","endLine":35,"endColumn":22},{"ruleId":"2351","severity":1,"message":"2553","line":108,"column":10,"nodeType":"2353","messageId":"2354","endLine":108,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2554","line":116,"column":7,"nodeType":"2353","messageId":"2354","endLine":116,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2555","line":143,"column":27,"nodeType":"2353","messageId":"2354","endLine":143,"endColumn":42},{"ruleId":"2351","severity":1,"message":"2506","line":148,"column":11,"nodeType":"2353","messageId":"2354","endLine":148,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2381","line":149,"column":11,"nodeType":"2353","messageId":"2354","endLine":149,"endColumn":24},{"ruleId":"2351","severity":1,"message":"2491","line":151,"column":12,"nodeType":"2353","messageId":"2354","endLine":151,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2556","line":151,"column":19,"nodeType":"2353","messageId":"2354","endLine":151,"endColumn":27},{"ruleId":"2351","severity":1,"message":"2557","line":152,"column":12,"nodeType":"2353","messageId":"2354","endLine":152,"endColumn":26},{"ruleId":"2351","severity":1,"message":"2558","line":152,"column":28,"nodeType":"2353","messageId":"2354","endLine":152,"endColumn":45},{"ruleId":"2376","severity":1,"message":"2494","line":181,"column":15,"nodeType":"2495","endLine":188,"endColumn":6},{"ruleId":"2376","severity":1,"message":"2496","line":188,"column":8,"nodeType":"2378","endLine":188,"endColumn":10,"suggestions":"2644"},{"ruleId":"2351","severity":1,"message":"2421","line":190,"column":25,"nodeType":"2353","messageId":"2354","endLine":190,"endColumn":30},{"ruleId":"2376","severity":1,"message":"2544","line":137,"column":8,"nodeType":"2378","endLine":137,"endColumn":10,"suggestions":"2645"},{"ruleId":"2351","severity":1,"message":"2421","line":139,"column":33,"nodeType":"2353","messageId":"2354","endLine":139,"endColumn":38},{"ruleId":"2351","severity":1,"message":"2385","line":4,"column":9,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2393","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2560","line":45,"column":8,"nodeType":"2353","messageId":"2354","endLine":45,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2372","line":46,"column":9,"nodeType":"2353","messageId":"2354","endLine":46,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2646","line":53,"column":9,"nodeType":"2353","messageId":"2354","endLine":53,"endColumn":40},{"ruleId":"2351","severity":1,"message":"2561","line":57,"column":10,"nodeType":"2353","messageId":"2354","endLine":57,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2562","line":140,"column":41,"nodeType":"2353","messageId":"2354","endLine":140,"endColumn":57},{"ruleId":"2351","severity":1,"message":"2563","line":140,"column":88,"nodeType":"2353","messageId":"2354","endLine":140,"endColumn":96},{"ruleId":"2351","severity":1,"message":"2373","line":251,"column":11,"nodeType":"2353","messageId":"2354","endLine":251,"endColumn":27},{"ruleId":"2376","severity":1,"message":"2564","line":341,"column":8,"nodeType":"2378","endLine":341,"endColumn":10,"suggestions":"2647"},{"ruleId":"2351","severity":1,"message":"2405","line":3,"column":9,"nodeType":"2353","messageId":"2354","endLine":3,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2393","line":10,"column":5,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2372","line":44,"column":9,"nodeType":"2353","messageId":"2354","endLine":44,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2561","line":54,"column":10,"nodeType":"2353","messageId":"2354","endLine":54,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2562","line":137,"column":41,"nodeType":"2353","messageId":"2354","endLine":137,"endColumn":57},{"ruleId":"2351","severity":1,"message":"2563","line":137,"column":88,"nodeType":"2353","messageId":"2354","endLine":137,"endColumn":96},{"ruleId":"2376","severity":1,"message":"2564","line":337,"column":8,"nodeType":"2378","endLine":337,"endColumn":10,"suggestions":"2648"},{"ruleId":"2351","severity":1,"message":"2384","line":20,"column":8,"nodeType":"2353","messageId":"2354","endLine":20,"endColumn":32},{"ruleId":"2351","severity":1,"message":"2465","line":23,"column":8,"nodeType":"2353","messageId":"2354","endLine":23,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2575","line":24,"column":9,"nodeType":"2353","messageId":"2354","endLine":24,"endColumn":32},{"ruleId":"2351","severity":1,"message":"2421","line":191,"column":33,"nodeType":"2353","messageId":"2354","endLine":191,"endColumn":38},{"ruleId":"2351","severity":1,"message":"2649","line":12,"column":8,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":36},{"ruleId":"2376","severity":1,"message":"2650","line":138,"column":8,"nodeType":"2378","endLine":138,"endColumn":10,"suggestions":"2651"},{"ruleId":"2351","severity":1,"message":"2421","line":140,"column":33,"nodeType":"2353","messageId":"2354","endLine":140,"endColumn":38},{"ruleId":"2351","severity":1,"message":"2383","line":10,"column":5,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2384","line":32,"column":8,"nodeType":"2353","messageId":"2354","endLine":32,"endColumn":32},{"ruleId":"2376","severity":1,"message":"2544","line":164,"column":8,"nodeType":"2378","endLine":164,"endColumn":10,"suggestions":"2652"},{"ruleId":"2351","severity":1,"message":"2364","line":166,"column":41,"nodeType":"2353","messageId":"2354","endLine":166,"endColumn":42},{"ruleId":"2351","severity":1,"message":"2609","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":12},{"ruleId":"2351","severity":1,"message":"2653","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2654","line":12,"column":5,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":9},{"ruleId":"2351","severity":1,"message":"2655","line":16,"column":5,"nodeType":"2353","messageId":"2354","endLine":16,"endColumn":9},{"ruleId":"2351","severity":1,"message":"2656","line":18,"column":8,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":22},{"ruleId":"2357","severity":1,"message":"2657","line":46,"column":43,"nodeType":"2359","messageId":"2360","endLine":46,"endColumn":48},{"ruleId":"2357","severity":1,"message":"2658","line":92,"column":36,"nodeType":"2353","messageId":"2360","endLine":92,"endColumn":39},{"ruleId":"2351","severity":1,"message":"2603","line":3,"column":8,"nodeType":"2353","messageId":"2354","endLine":3,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2400","line":8,"column":5,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2546","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2383","line":10,"column":5,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2454","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2547","line":14,"column":5,"nodeType":"2353","messageId":"2354","endLine":14,"endColumn":8},{"ruleId":"2351","severity":1,"message":"2548","line":15,"column":5,"nodeType":"2353","messageId":"2354","endLine":15,"endColumn":9},{"ruleId":"2351","severity":1,"message":"2549","line":16,"column":35,"nodeType":"2353","messageId":"2354","endLine":16,"endColumn":47},{"ruleId":"2351","severity":1,"message":"2550","line":22,"column":8,"nodeType":"2353","messageId":"2354","endLine":22,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2405","line":24,"column":9,"nodeType":"2353","messageId":"2354","endLine":24,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2551","line":27,"column":8,"nodeType":"2353","messageId":"2354","endLine":27,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2384","line":31,"column":8,"nodeType":"2353","messageId":"2354","endLine":31,"endColumn":32},{"ruleId":"2351","severity":1,"message":"2513","line":32,"column":8,"nodeType":"2353","messageId":"2354","endLine":32,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2464","line":33,"column":8,"nodeType":"2353","messageId":"2354","endLine":33,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2465","line":34,"column":8,"nodeType":"2353","messageId":"2354","endLine":34,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2552","line":35,"column":9,"nodeType":"2353","messageId":"2354","endLine":35,"endColumn":22},{"ruleId":"2351","severity":1,"message":"2633","line":49,"column":7,"nodeType":"2353","messageId":"2354","endLine":49,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2553","line":108,"column":10,"nodeType":"2353","messageId":"2354","endLine":108,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2557","line":119,"column":12,"nodeType":"2353","messageId":"2354","endLine":119,"endColumn":26},{"ruleId":"2351","severity":1,"message":"2558","line":119,"column":28,"nodeType":"2353","messageId":"2354","endLine":119,"endColumn":45},{"ruleId":"2376","severity":1,"message":"2494","line":138,"column":15,"nodeType":"2495","endLine":145,"endColumn":6},{"ruleId":"2376","severity":1,"message":"2496","line":145,"column":8,"nodeType":"2378","endLine":145,"endColumn":10,"suggestions":"2659"},{"ruleId":"2351","severity":1,"message":"2421","line":147,"column":25,"nodeType":"2353","messageId":"2354","endLine":147,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2405","line":3,"column":9,"nodeType":"2353","messageId":"2354","endLine":3,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2385","line":4,"column":9,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2393","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2560","line":45,"column":8,"nodeType":"2353","messageId":"2354","endLine":45,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2372","line":46,"column":9,"nodeType":"2353","messageId":"2354","endLine":46,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2561","line":56,"column":10,"nodeType":"2353","messageId":"2354","endLine":56,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2562","line":140,"column":32,"nodeType":"2353","messageId":"2354","endLine":140,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2563","line":144,"column":32,"nodeType":"2353","messageId":"2354","endLine":144,"endColumn":40},{"ruleId":"2351","severity":1,"message":"2374","line":262,"column":12,"nodeType":"2353","messageId":"2354","endLine":262,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2375","line":266,"column":11,"nodeType":"2353","messageId":"2354","endLine":266,"endColumn":28},{"ruleId":"2376","severity":1,"message":"2564","line":347,"column":8,"nodeType":"2378","endLine":347,"endColumn":10,"suggestions":"2660"},{"ruleId":"2351","severity":1,"message":"2566","line":349,"column":11,"nodeType":"2353","messageId":"2354","endLine":349,"endColumn":21},{"ruleId":"2357","severity":1,"message":"2661","line":29,"column":46,"nodeType":"2359","messageId":"2360","endLine":29,"endColumn":50},{"ruleId":"2357","severity":1,"message":"2662","line":29,"column":52,"nodeType":"2359","messageId":"2360","endLine":29,"endColumn":63},{"ruleId":"2357","severity":1,"message":"2663","line":29,"column":65,"nodeType":"2359","messageId":"2360","endLine":29,"endColumn":81},{"ruleId":"2357","severity":1,"message":"2614","line":29,"column":83,"nodeType":"2359","messageId":"2360","endLine":29,"endColumn":112},{"ruleId":"2357","severity":1,"message":"2664","line":47,"column":41,"nodeType":"2353","messageId":"2360","endLine":47,"endColumn":59},{"ruleId":"2351","severity":1,"message":"2405","line":3,"column":9,"nodeType":"2353","messageId":"2354","endLine":3,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2385","line":4,"column":9,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2393","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2560","line":45,"column":8,"nodeType":"2353","messageId":"2354","endLine":45,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2372","line":46,"column":9,"nodeType":"2353","messageId":"2354","endLine":46,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2561","line":58,"column":10,"nodeType":"2353","messageId":"2354","endLine":58,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2562","line":141,"column":41,"nodeType":"2353","messageId":"2354","endLine":141,"endColumn":57},{"ruleId":"2351","severity":1,"message":"2563","line":141,"column":88,"nodeType":"2353","messageId":"2354","endLine":141,"endColumn":96},{"ruleId":"2376","severity":1,"message":"2564","line":340,"column":8,"nodeType":"2378","endLine":340,"endColumn":10,"suggestions":"2665"},{"ruleId":"2376","severity":1,"message":"2666","line":137,"column":8,"nodeType":"2378","endLine":137,"endColumn":10,"suggestions":"2667"},{"ruleId":"2351","severity":1,"message":"2421","line":139,"column":33,"nodeType":"2353","messageId":"2354","endLine":139,"endColumn":38},{"ruleId":"2351","severity":1,"message":"2421","line":191,"column":33,"nodeType":"2353","messageId":"2354","endLine":191,"endColumn":38},{"ruleId":"2351","severity":1,"message":"2571","line":3,"column":9,"nodeType":"2353","messageId":"2354","endLine":3,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2547","line":7,"column":32,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":35},{"ruleId":"2351","severity":1,"message":"2548","line":7,"column":37,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":41},{"ruleId":"2351","severity":1,"message":"2641","line":26,"column":8,"nodeType":"2353","messageId":"2354","endLine":26,"endColumn":24},{"ruleId":"2351","severity":1,"message":"2553","line":78,"column":10,"nodeType":"2353","messageId":"2354","endLine":78,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2554","line":86,"column":7,"nodeType":"2353","messageId":"2354","endLine":86,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2506","line":100,"column":11,"nodeType":"2353","messageId":"2354","endLine":100,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2491","line":101,"column":12,"nodeType":"2353","messageId":"2354","endLine":101,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2492","line":107,"column":11,"nodeType":"2353","messageId":"2354","endLine":107,"endColumn":23},{"ruleId":"2376","severity":1,"message":"2572","line":123,"column":8,"nodeType":"2378","endLine":123,"endColumn":10,"suggestions":"2668"},{"ruleId":"2351","severity":1,"message":"2405","line":3,"column":9,"nodeType":"2353","messageId":"2354","endLine":3,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2385","line":4,"column":9,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2393","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2560","line":45,"column":8,"nodeType":"2353","messageId":"2354","endLine":45,"endColumn":29},{"ruleId":"2351","severity":1,"message":"2372","line":46,"column":9,"nodeType":"2353","messageId":"2354","endLine":46,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2561","line":58,"column":10,"nodeType":"2353","messageId":"2354","endLine":58,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2562","line":146,"column":38,"nodeType":"2353","messageId":"2354","endLine":146,"endColumn":54},{"ruleId":"2351","severity":1,"message":"2563","line":146,"column":85,"nodeType":"2353","messageId":"2354","endLine":146,"endColumn":93},{"ruleId":"2351","severity":1,"message":"2374","line":262,"column":12,"nodeType":"2353","messageId":"2354","endLine":262,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2375","line":266,"column":11,"nodeType":"2353","messageId":"2354","endLine":266,"endColumn":28},{"ruleId":"2376","severity":1,"message":"2564","line":346,"column":8,"nodeType":"2378","endLine":346,"endColumn":10,"suggestions":"2669"},{"ruleId":"2351","severity":1,"message":"2670","line":2,"column":9,"nodeType":"2353","messageId":"2354","endLine":2,"endColumn":63},{"ruleId":"2351","severity":1,"message":"2516","line":1,"column":8,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2577","line":6,"column":5,"nodeType":"2353","messageId":"2354","endLine":6,"endColumn":8},{"ruleId":"2351","severity":1,"message":"2400","line":7,"column":5,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2454","line":8,"column":5,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2475","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":9},{"ruleId":"2351","severity":1,"message":"2578","line":10,"column":14,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2579","line":12,"column":5,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2580","line":17,"column":5,"nodeType":"2353","messageId":"2354","endLine":17,"endColumn":10},{"ruleId":"2351","severity":1,"message":"2581","line":18,"column":5,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":14},{"ruleId":"2351","severity":1,"message":"2582","line":19,"column":5,"nodeType":"2353","messageId":"2354","endLine":19,"endColumn":14},{"ruleId":"2351","severity":1,"message":"2583","line":20,"column":5,"nodeType":"2353","messageId":"2354","endLine":20,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2584","line":21,"column":5,"nodeType":"2353","messageId":"2354","endLine":21,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2585","line":21,"column":15,"nodeType":"2353","messageId":"2354","endLine":21,"endColumn":22},{"ruleId":"2351","severity":1,"message":"2586","line":32,"column":9,"nodeType":"2353","messageId":"2354","endLine":32,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2587","line":37,"column":8,"nodeType":"2353","messageId":"2354","endLine":37,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2519","line":39,"column":8,"nodeType":"2353","messageId":"2354","endLine":39,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2588","line":40,"column":8,"nodeType":"2353","messageId":"2354","endLine":40,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2474","line":42,"column":8,"nodeType":"2353","messageId":"2354","endLine":42,"endColumn":25},{"ruleId":"2357","severity":1,"message":"2589","line":44,"column":26,"nodeType":"2359","messageId":"2360","endLine":44,"endColumn":46},{"ruleId":"2351","severity":1,"message":"2590","line":46,"column":11,"nodeType":"2353","messageId":"2354","endLine":46,"endColumn":42},{"ruleId":"2357","severity":1,"message":"2591","line":124,"column":58,"nodeType":"2353","messageId":"2360","endLine":124,"endColumn":75},{"ruleId":"2357","severity":1,"message":"2591","line":129,"column":78,"nodeType":"2353","messageId":"2360","endLine":129,"endColumn":95},{"ruleId":"2351","severity":1,"message":"2489","line":1,"column":16,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2454","line":5,"column":5,"nodeType":"2353","messageId":"2354","endLine":5,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2610","line":6,"column":5,"nodeType":"2353","messageId":"2354","endLine":6,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2394","line":7,"column":5,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2395","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2611","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":10},{"ruleId":"2351","severity":1,"message":"2612","line":12,"column":5,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2622","line":14,"column":5,"nodeType":"2353","messageId":"2354","endLine":14,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2623","line":15,"column":5,"nodeType":"2353","messageId":"2354","endLine":15,"endColumn":14},{"ruleId":"2351","severity":1,"message":"2393","line":16,"column":5,"nodeType":"2353","messageId":"2354","endLine":16,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2475","line":18,"column":5,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":9},{"ruleId":"2351","severity":1,"message":"2405","line":28,"column":22,"nodeType":"2353","messageId":"2354","endLine":28,"endColumn":33},{"ruleId":"2351","severity":1,"message":"2671","line":31,"column":5,"nodeType":"2353","messageId":"2354","endLine":31,"endColumn":35},{"ruleId":"2351","severity":1,"message":"2672","line":32,"column":5,"nodeType":"2353","messageId":"2354","endLine":32,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2673","line":33,"column":5,"nodeType":"2353","messageId":"2354","endLine":33,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2624","line":36,"column":9,"nodeType":"2353","messageId":"2354","endLine":36,"endColumn":27},{"ruleId":"2351","severity":1,"message":"2625","line":38,"column":8,"nodeType":"2353","messageId":"2354","endLine":38,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2603","line":44,"column":8,"nodeType":"2353","messageId":"2354","endLine":44,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2552","line":45,"column":9,"nodeType":"2353","messageId":"2354","endLine":45,"endColumn":22},{"ruleId":"2357","severity":1,"message":"2674","line":47,"column":24,"nodeType":"2359","messageId":"2360","endLine":47,"endColumn":53},{"ruleId":"2357","severity":1,"message":"2675","line":47,"column":55,"nodeType":"2359","messageId":"2360","endLine":47,"endColumn":64},{"ruleId":"2351","severity":1,"message":"2626","line":51,"column":12,"nodeType":"2353","messageId":"2354","endLine":51,"endColumn":26},{"ruleId":"2351","severity":1,"message":"2627","line":51,"column":28,"nodeType":"2353","messageId":"2354","endLine":51,"endColumn":45},{"ruleId":"2351","severity":1,"message":"2628","line":52,"column":28,"nodeType":"2353","messageId":"2354","endLine":52,"endColumn":45},{"ruleId":"2351","severity":1,"message":"2629","line":53,"column":19,"nodeType":"2353","messageId":"2354","endLine":53,"endColumn":27},{"ruleId":"2357","severity":1,"message":"2676","line":58,"column":31,"nodeType":"2353","messageId":"2360","endLine":58,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2482","line":69,"column":63,"nodeType":"2353","messageId":"2354","endLine":69,"endColumn":68},{"ruleId":"2351","severity":1,"message":"2421","line":101,"column":30,"nodeType":"2353","messageId":"2354","endLine":101,"endColumn":35},{"ruleId":"2351","severity":1,"message":"2677","line":117,"column":11,"nodeType":"2353","messageId":"2354","endLine":117,"endColumn":38},{"ruleId":"2357","severity":1,"message":"2678","line":13,"column":39,"nodeType":"2359","messageId":"2360","endLine":13,"endColumn":61},{"ruleId":"2351","severity":1,"message":"2679","line":13,"column":39,"nodeType":"2353","messageId":"2354","endLine":13,"endColumn":61},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":36,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":44},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":46,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":62},{"ruleId":"2351","severity":1,"message":"2636","line":11,"column":8,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2680","line":17,"column":61,"nodeType":"2353","messageId":"2354","endLine":17,"endColumn":84},{"ruleId":"2357","severity":1,"message":"2678","line":129,"column":31,"nodeType":"2359","messageId":"2360","endLine":129,"endColumn":53},{"ruleId":"2351","severity":1,"message":"2533","line":1,"column":37,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":43},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":22,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2395","line":4,"column":56,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":64},{"ruleId":"2351","severity":1,"message":"2417","line":14,"column":8,"nodeType":"2353","messageId":"2354","endLine":14,"endColumn":22},{"ruleId":"2357","severity":1,"message":"2534","line":19,"column":19,"nodeType":"2359","messageId":"2360","endLine":19,"endColumn":27},{"ruleId":"2351","severity":1,"message":"2535","line":21,"column":12,"nodeType":"2353","messageId":"2354","endLine":21,"endColumn":22},{"ruleId":"2351","severity":1,"message":"2536","line":23,"column":12,"nodeType":"2353","messageId":"2354","endLine":23,"endColumn":22},{"ruleId":"2351","severity":1,"message":"2537","line":23,"column":24,"nodeType":"2353","messageId":"2354","endLine":23,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":22,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2395","line":4,"column":56,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":64},{"ruleId":"2357","severity":1,"message":"2418","line":16,"column":26,"nodeType":"2359","messageId":"2360","endLine":16,"endColumn":38},{"ruleId":"2357","severity":1,"message":"2418","line":16,"column":37,"nodeType":"2359","messageId":"2360","endLine":16,"endColumn":49},{"ruleId":"2357","severity":1,"message":"2418","line":16,"column":29,"nodeType":"2359","messageId":"2360","endLine":16,"endColumn":41},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":22,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2395","line":4,"column":56,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":64},{"ruleId":"2351","severity":1,"message":"2396","line":4,"column":66,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":75},{"ruleId":"2357","severity":1,"message":"2432","line":11,"column":29,"nodeType":"2359","messageId":"2360","endLine":11,"endColumn":56},{"ruleId":"2357","severity":1,"message":"2431","line":11,"column":58,"nodeType":"2359","messageId":"2360","endLine":11,"endColumn":70},{"ruleId":"2351","severity":1,"message":"2681","line":5,"column":5,"nodeType":"2353","messageId":"2354","endLine":5,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2613","line":6,"column":5,"nodeType":"2353","messageId":"2354","endLine":6,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2393","line":8,"column":5,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2394","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2395","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2682","line":18,"column":8,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":38},{"ruleId":"2351","severity":1,"message":"2397","line":19,"column":8,"nodeType":"2353","messageId":"2354","endLine":19,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2636","line":20,"column":8,"nodeType":"2353","messageId":"2354","endLine":20,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2619","line":23,"column":8,"nodeType":"2353","messageId":"2354","endLine":23,"endColumn":28},{"ruleId":"2351","severity":1,"message":"2618","line":24,"column":8,"nodeType":"2353","messageId":"2354","endLine":24,"endColumn":22},{"ruleId":"2351","severity":1,"message":"2617","line":25,"column":8,"nodeType":"2353","messageId":"2354","endLine":25,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2683","line":28,"column":5,"nodeType":"2353","messageId":"2354","endLine":28,"endColumn":27},{"ruleId":"2351","severity":1,"message":"2680","line":29,"column":5,"nodeType":"2353","messageId":"2354","endLine":29,"endColumn":28},{"ruleId":"2351","severity":1,"message":"2684","line":37,"column":11,"nodeType":"2353","messageId":"2354","endLine":37,"endColumn":17},{"ruleId":"2357","severity":1,"message":"2678","line":13,"column":39,"nodeType":"2359","messageId":"2360","endLine":13,"endColumn":61},{"ruleId":"2351","severity":1,"message":"2679","line":13,"column":39,"nodeType":"2353","messageId":"2354","endLine":13,"endColumn":61},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":22,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2395","line":4,"column":56,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":64},{"ruleId":"2351","severity":1,"message":"2417","line":11,"column":8,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":22},{"ruleId":"2357","severity":1,"message":"2418","line":16,"column":19,"nodeType":"2359","messageId":"2360","endLine":16,"endColumn":31},{"ruleId":"2351","severity":1,"message":"2681","line":5,"column":5,"nodeType":"2353","messageId":"2354","endLine":5,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2613","line":6,"column":5,"nodeType":"2353","messageId":"2354","endLine":6,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2393","line":8,"column":5,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2394","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2395","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2682","line":18,"column":8,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":38},{"ruleId":"2351","severity":1,"message":"2397","line":19,"column":8,"nodeType":"2353","messageId":"2354","endLine":19,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2636","line":20,"column":8,"nodeType":"2353","messageId":"2354","endLine":20,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2619","line":23,"column":8,"nodeType":"2353","messageId":"2354","endLine":23,"endColumn":28},{"ruleId":"2351","severity":1,"message":"2618","line":24,"column":8,"nodeType":"2353","messageId":"2354","endLine":24,"endColumn":22},{"ruleId":"2351","severity":1,"message":"2617","line":25,"column":8,"nodeType":"2353","messageId":"2354","endLine":25,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2680","line":29,"column":5,"nodeType":"2353","messageId":"2354","endLine":29,"endColumn":28},{"ruleId":"2351","severity":1,"message":"2685","line":32,"column":7,"nodeType":"2353","messageId":"2354","endLine":32,"endColumn":35},{"ruleId":"2351","severity":1,"message":"2686","line":67,"column":7,"nodeType":"2353","messageId":"2354","endLine":67,"endColumn":44},{"ruleId":"2357","severity":1,"message":"2678","line":142,"column":40,"nodeType":"2359","messageId":"2360","endLine":142,"endColumn":62},{"ruleId":"2351","severity":1,"message":"2679","line":142,"column":40,"nodeType":"2353","messageId":"2354","endLine":142,"endColumn":62},{"ruleId":"2351","severity":1,"message":"2684","line":146,"column":11,"nodeType":"2353","messageId":"2354","endLine":146,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2687","line":157,"column":11,"nodeType":"2353","messageId":"2354","endLine":157,"endColumn":39},{"ruleId":"2351","severity":1,"message":"2489","line":1,"column":16,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2454","line":5,"column":5,"nodeType":"2353","messageId":"2354","endLine":5,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2610","line":6,"column":5,"nodeType":"2353","messageId":"2354","endLine":6,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2394","line":7,"column":5,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2395","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2611","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":10},{"ruleId":"2351","severity":1,"message":"2612","line":12,"column":5,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2622","line":14,"column":5,"nodeType":"2353","messageId":"2354","endLine":14,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2623","line":15,"column":5,"nodeType":"2353","messageId":"2354","endLine":15,"endColumn":14},{"ruleId":"2351","severity":1,"message":"2393","line":16,"column":5,"nodeType":"2353","messageId":"2354","endLine":16,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2475","line":18,"column":5,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":9},{"ruleId":"2351","severity":1,"message":"2405","line":28,"column":22,"nodeType":"2353","messageId":"2354","endLine":28,"endColumn":33},{"ruleId":"2351","severity":1,"message":"2671","line":31,"column":5,"nodeType":"2353","messageId":"2354","endLine":31,"endColumn":35},{"ruleId":"2351","severity":1,"message":"2672","line":32,"column":5,"nodeType":"2353","messageId":"2354","endLine":32,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2673","line":33,"column":5,"nodeType":"2353","messageId":"2354","endLine":33,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2624","line":36,"column":9,"nodeType":"2353","messageId":"2354","endLine":36,"endColumn":27},{"ruleId":"2351","severity":1,"message":"2625","line":38,"column":8,"nodeType":"2353","messageId":"2354","endLine":38,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2603","line":44,"column":8,"nodeType":"2353","messageId":"2354","endLine":44,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2552","line":45,"column":9,"nodeType":"2353","messageId":"2354","endLine":45,"endColumn":22},{"ruleId":"2357","severity":1,"message":"2674","line":50,"column":24,"nodeType":"2359","messageId":"2360","endLine":50,"endColumn":53},{"ruleId":"2357","severity":1,"message":"2675","line":50,"column":55,"nodeType":"2359","messageId":"2360","endLine":50,"endColumn":64},{"ruleId":"2351","severity":1,"message":"2626","line":54,"column":12,"nodeType":"2353","messageId":"2354","endLine":54,"endColumn":26},{"ruleId":"2351","severity":1,"message":"2627","line":54,"column":28,"nodeType":"2353","messageId":"2354","endLine":54,"endColumn":45},{"ruleId":"2351","severity":1,"message":"2628","line":55,"column":28,"nodeType":"2353","messageId":"2354","endLine":55,"endColumn":45},{"ruleId":"2351","severity":1,"message":"2629","line":56,"column":19,"nodeType":"2353","messageId":"2354","endLine":56,"endColumn":27},{"ruleId":"2357","severity":1,"message":"2676","line":61,"column":31,"nodeType":"2353","messageId":"2360","endLine":61,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2482","line":72,"column":63,"nodeType":"2353","messageId":"2354","endLine":72,"endColumn":68},{"ruleId":"2351","severity":1,"message":"2421","line":104,"column":30,"nodeType":"2353","messageId":"2354","endLine":104,"endColumn":35},{"ruleId":"2351","severity":1,"message":"2677","line":120,"column":11,"nodeType":"2353","messageId":"2354","endLine":120,"endColumn":38},{"ruleId":"2351","severity":1,"message":"2454","line":4,"column":9,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":22,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2419","line":8,"column":8,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2454","line":4,"column":9,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":22,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2419","line":8,"column":8,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2454","line":4,"column":10,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":23,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":31},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":33,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":49},{"ruleId":"2351","severity":1,"message":"2395","line":4,"column":57,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":65},{"ruleId":"2351","severity":1,"message":"2419","line":8,"column":8,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2636","line":10,"column":8,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2454","line":5,"column":5,"nodeType":"2353","messageId":"2354","endLine":5,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2395","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2622","line":14,"column":5,"nodeType":"2353","messageId":"2354","endLine":14,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2623","line":15,"column":5,"nodeType":"2353","messageId":"2354","endLine":15,"endColumn":14},{"ruleId":"2351","severity":1,"message":"2393","line":16,"column":5,"nodeType":"2353","messageId":"2354","endLine":16,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2475","line":18,"column":5,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":9},{"ruleId":"2351","severity":1,"message":"2624","line":36,"column":9,"nodeType":"2353","messageId":"2354","endLine":36,"endColumn":27},{"ruleId":"2351","severity":1,"message":"2625","line":38,"column":8,"nodeType":"2353","messageId":"2354","endLine":38,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2552","line":45,"column":9,"nodeType":"2353","messageId":"2354","endLine":45,"endColumn":22},{"ruleId":"2351","severity":1,"message":"2626","line":51,"column":12,"nodeType":"2353","messageId":"2354","endLine":51,"endColumn":26},{"ruleId":"2351","severity":1,"message":"2627","line":51,"column":28,"nodeType":"2353","messageId":"2354","endLine":51,"endColumn":45},{"ruleId":"2351","severity":1,"message":"2628","line":52,"column":28,"nodeType":"2353","messageId":"2354","endLine":52,"endColumn":45},{"ruleId":"2351","severity":1,"message":"2629","line":53,"column":19,"nodeType":"2353","messageId":"2354","endLine":53,"endColumn":27},{"ruleId":"2376","severity":1,"message":"2544","line":61,"column":8,"nodeType":"2378","endLine":61,"endColumn":10,"suggestions":"2688"},{"ruleId":"2351","severity":1,"message":"2482","line":82,"column":63,"nodeType":"2353","messageId":"2354","endLine":82,"endColumn":68},{"ruleId":"2351","severity":1,"message":"2421","line":114,"column":30,"nodeType":"2353","messageId":"2354","endLine":114,"endColumn":35},{"ruleId":"2351","severity":1,"message":"2516","line":1,"column":8,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2577","line":6,"column":5,"nodeType":"2353","messageId":"2354","endLine":6,"endColumn":8},{"ruleId":"2351","severity":1,"message":"2400","line":7,"column":5,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":11},{"ruleId":"2351","severity":1,"message":"2454","line":8,"column":5,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2475","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":9},{"ruleId":"2351","severity":1,"message":"2578","line":10,"column":14,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2579","line":12,"column":5,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2580","line":17,"column":5,"nodeType":"2353","messageId":"2354","endLine":17,"endColumn":10},{"ruleId":"2351","severity":1,"message":"2581","line":18,"column":5,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":14},{"ruleId":"2351","severity":1,"message":"2582","line":19,"column":5,"nodeType":"2353","messageId":"2354","endLine":19,"endColumn":14},{"ruleId":"2351","severity":1,"message":"2583","line":20,"column":5,"nodeType":"2353","messageId":"2354","endLine":20,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2584","line":21,"column":5,"nodeType":"2353","messageId":"2354","endLine":21,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2585","line":21,"column":15,"nodeType":"2353","messageId":"2354","endLine":21,"endColumn":22},{"ruleId":"2351","severity":1,"message":"2586","line":32,"column":9,"nodeType":"2353","messageId":"2354","endLine":32,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2587","line":37,"column":8,"nodeType":"2353","messageId":"2354","endLine":37,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2519","line":39,"column":8,"nodeType":"2353","messageId":"2354","endLine":39,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2588","line":40,"column":8,"nodeType":"2353","messageId":"2354","endLine":40,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2474","line":42,"column":8,"nodeType":"2353","messageId":"2354","endLine":42,"endColumn":25},{"ruleId":"2357","severity":1,"message":"2589","line":44,"column":26,"nodeType":"2359","messageId":"2360","endLine":44,"endColumn":46},{"ruleId":"2351","severity":1,"message":"2590","line":46,"column":11,"nodeType":"2353","messageId":"2354","endLine":46,"endColumn":42},{"ruleId":"2357","severity":1,"message":"2591","line":124,"column":58,"nodeType":"2353","messageId":"2360","endLine":124,"endColumn":75},{"ruleId":"2357","severity":1,"message":"2591","line":129,"column":78,"nodeType":"2353","messageId":"2360","endLine":129,"endColumn":95},{"ruleId":"2351","severity":1,"message":"2454","line":5,"column":5,"nodeType":"2353","messageId":"2354","endLine":5,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2395","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2622","line":14,"column":5,"nodeType":"2353","messageId":"2354","endLine":14,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2623","line":15,"column":5,"nodeType":"2353","messageId":"2354","endLine":15,"endColumn":14},{"ruleId":"2351","severity":1,"message":"2393","line":16,"column":5,"nodeType":"2353","messageId":"2354","endLine":16,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2475","line":18,"column":5,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":9},{"ruleId":"2351","severity":1,"message":"2624","line":36,"column":9,"nodeType":"2353","messageId":"2354","endLine":36,"endColumn":27},{"ruleId":"2351","severity":1,"message":"2626","line":49,"column":12,"nodeType":"2353","messageId":"2354","endLine":49,"endColumn":26},{"ruleId":"2351","severity":1,"message":"2627","line":49,"column":28,"nodeType":"2353","messageId":"2354","endLine":49,"endColumn":45},{"ruleId":"2351","severity":1,"message":"2628","line":50,"column":28,"nodeType":"2353","messageId":"2354","endLine":50,"endColumn":45},{"ruleId":"2351","severity":1,"message":"2629","line":51,"column":19,"nodeType":"2353","messageId":"2354","endLine":51,"endColumn":27},{"ruleId":"2376","severity":1,"message":"2666","line":59,"column":8,"nodeType":"2378","endLine":59,"endColumn":10,"suggestions":"2689"},{"ruleId":"2351","severity":1,"message":"2482","line":80,"column":63,"nodeType":"2353","messageId":"2354","endLine":80,"endColumn":68},{"ruleId":"2351","severity":1,"message":"2421","line":112,"column":30,"nodeType":"2353","messageId":"2354","endLine":112,"endColumn":35},{"ruleId":"2351","severity":1,"message":"2454","line":4,"column":9,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":22,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2419","line":8,"column":8,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2454","line":4,"column":9,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":20},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":22,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2419","line":8,"column":8,"nodeType":"2353","messageId":"2354","endLine":8,"endColumn":15},{"ruleId":"2357","severity":1,"message":"2678","line":13,"column":39,"nodeType":"2359","messageId":"2360","endLine":13,"endColumn":61},{"ruleId":"2351","severity":1,"message":"2679","line":13,"column":39,"nodeType":"2353","messageId":"2354","endLine":13,"endColumn":61},{"ruleId":"2351","severity":1,"message":"2489","line":1,"column":16,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":25},{"ruleId":"2351","severity":1,"message":"2454","line":5,"column":5,"nodeType":"2353","messageId":"2354","endLine":5,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2610","line":6,"column":5,"nodeType":"2353","messageId":"2354","endLine":6,"endColumn":16},{"ruleId":"2351","severity":1,"message":"2394","line":7,"column":5,"nodeType":"2353","messageId":"2354","endLine":7,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2395","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2611","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":10},{"ruleId":"2351","severity":1,"message":"2612","line":12,"column":5,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":15},{"ruleId":"2351","severity":1,"message":"2622","line":14,"column":5,"nodeType":"2353","messageId":"2354","endLine":14,"endColumn":19},{"ruleId":"2351","severity":1,"message":"2623","line":15,"column":5,"nodeType":"2353","messageId":"2354","endLine":15,"endColumn":14},{"ruleId":"2351","severity":1,"message":"2393","line":16,"column":5,"nodeType":"2353","messageId":"2354","endLine":16,"endColumn":13},{"ruleId":"2351","severity":1,"message":"2475","line":18,"column":5,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":9},{"ruleId":"2351","severity":1,"message":"2405","line":28,"column":22,"nodeType":"2353","messageId":"2354","endLine":28,"endColumn":33},{"ruleId":"2351","severity":1,"message":"2625","line":31,"column":8,"nodeType":"2353","messageId":"2354","endLine":31,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2552","line":36,"column":9,"nodeType":"2353","messageId":"2354","endLine":36,"endColumn":22},{"ruleId":"2351","severity":1,"message":"2624","line":39,"column":9,"nodeType":"2353","messageId":"2354","endLine":39,"endColumn":27},{"ruleId":"2351","severity":1,"message":"2603","line":41,"column":8,"nodeType":"2353","messageId":"2354","endLine":41,"endColumn":18},{"ruleId":"2357","severity":1,"message":"2674","line":44,"column":24,"nodeType":"2359","messageId":"2360","endLine":44,"endColumn":53},{"ruleId":"2357","severity":1,"message":"2675","line":44,"column":55,"nodeType":"2359","messageId":"2360","endLine":44,"endColumn":64},{"ruleId":"2351","severity":1,"message":"2626","line":48,"column":12,"nodeType":"2353","messageId":"2354","endLine":48,"endColumn":26},{"ruleId":"2351","severity":1,"message":"2627","line":48,"column":28,"nodeType":"2353","messageId":"2354","endLine":48,"endColumn":45},{"ruleId":"2351","severity":1,"message":"2628","line":49,"column":28,"nodeType":"2353","messageId":"2354","endLine":49,"endColumn":45},{"ruleId":"2351","severity":1,"message":"2629","line":50,"column":19,"nodeType":"2353","messageId":"2354","endLine":50,"endColumn":27},{"ruleId":"2357","severity":1,"message":"2676","line":55,"column":31,"nodeType":"2353","messageId":"2360","endLine":55,"endColumn":37},{"ruleId":"2351","severity":1,"message":"2482","line":66,"column":63,"nodeType":"2353","messageId":"2354","endLine":66,"endColumn":68},{"ruleId":"2351","severity":1,"message":"2421","line":98,"column":30,"nodeType":"2353","messageId":"2354","endLine":98,"endColumn":35},{"ruleId":"2351","severity":1,"message":"2677","line":114,"column":11,"nodeType":"2353","messageId":"2354","endLine":114,"endColumn":38},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":36,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":44},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":46,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":62},{"ruleId":"2351","severity":1,"message":"2680","line":16,"column":61,"nodeType":"2353","messageId":"2354","endLine":16,"endColumn":84},{"ruleId":"2357","severity":1,"message":"2678","line":128,"column":31,"nodeType":"2359","messageId":"2360","endLine":128,"endColumn":53},{"ruleId":"2351","severity":1,"message":"2609","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":12},{"ruleId":"2351","severity":1,"message":"2653","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2654","line":12,"column":5,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":9},{"ruleId":"2351","severity":1,"message":"2655","line":16,"column":5,"nodeType":"2353","messageId":"2354","endLine":16,"endColumn":9},{"ruleId":"2351","severity":1,"message":"2656","line":18,"column":8,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":22},{"ruleId":"2357","severity":1,"message":"2657","line":46,"column":43,"nodeType":"2359","messageId":"2360","endLine":46,"endColumn":48},{"ruleId":"2357","severity":1,"message":"2658","line":92,"column":36,"nodeType":"2353","messageId":"2360","endLine":92,"endColumn":39},{"ruleId":"2351","severity":1,"message":"2533","line":1,"column":37,"nodeType":"2353","messageId":"2354","endLine":1,"endColumn":43},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":22,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2395","line":4,"column":56,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":64},{"ruleId":"2351","severity":1,"message":"2417","line":14,"column":8,"nodeType":"2353","messageId":"2354","endLine":14,"endColumn":22},{"ruleId":"2357","severity":1,"message":"2534","line":19,"column":19,"nodeType":"2359","messageId":"2360","endLine":19,"endColumn":27},{"ruleId":"2351","severity":1,"message":"2535","line":21,"column":12,"nodeType":"2353","messageId":"2354","endLine":21,"endColumn":22},{"ruleId":"2351","severity":1,"message":"2393","line":4,"column":22,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":30},{"ruleId":"2351","severity":1,"message":"2394","line":4,"column":32,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":48},{"ruleId":"2351","severity":1,"message":"2395","line":4,"column":56,"nodeType":"2353","messageId":"2354","endLine":4,"endColumn":64},{"ruleId":"2357","severity":1,"message":"2418","line":16,"column":26,"nodeType":"2359","messageId":"2360","endLine":16,"endColumn":38},{"ruleId":"2357","severity":1,"message":"2690","line":11,"column":37,"nodeType":"2359","messageId":"2360","endLine":11,"endColumn":52},{"ruleId":"2357","severity":1,"message":"2691","line":11,"column":54,"nodeType":"2359","messageId":"2360","endLine":11,"endColumn":67},{"ruleId":"2357","severity":1,"message":"2692","line":11,"column":69,"nodeType":"2359","messageId":"2360","endLine":11,"endColumn":85},{"ruleId":"2357","severity":1,"message":"2693","line":11,"column":87,"nodeType":"2359","messageId":"2360","endLine":11,"endColumn":103},{"ruleId":"2357","severity":1,"message":"2600","line":33,"column":42,"nodeType":"2359","messageId":"2360","endLine":33,"endColumn":47},{"ruleId":"2357","severity":1,"message":"2694","line":33,"column":49,"nodeType":"2359","messageId":"2360","endLine":33,"endColumn":64},{"ruleId":"2357","severity":1,"message":"2437","line":33,"column":66,"nodeType":"2359","messageId":"2360","endLine":33,"endColumn":68},{"ruleId":"2357","severity":1,"message":"2600","line":33,"column":42,"nodeType":"2359","messageId":"2360","endLine":33,"endColumn":47},{"ruleId":"2357","severity":1,"message":"2694","line":33,"column":49,"nodeType":"2359","messageId":"2360","endLine":33,"endColumn":64},{"ruleId":"2357","severity":1,"message":"2437","line":33,"column":66,"nodeType":"2359","messageId":"2360","endLine":33,"endColumn":68},{"ruleId":"2351","severity":1,"message":"2609","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":12},{"ruleId":"2351","severity":1,"message":"2653","line":11,"column":5,"nodeType":"2353","messageId":"2354","endLine":11,"endColumn":17},{"ruleId":"2351","severity":1,"message":"2654","line":12,"column":5,"nodeType":"2353","messageId":"2354","endLine":12,"endColumn":9},{"ruleId":"2351","severity":1,"message":"2655","line":16,"column":5,"nodeType":"2353","messageId":"2354","endLine":16,"endColumn":9},{"ruleId":"2351","severity":1,"message":"2656","line":18,"column":8,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":22},{"ruleId":"2357","severity":1,"message":"2657","line":46,"column":43,"nodeType":"2359","messageId":"2360","endLine":46,"endColumn":48},{"ruleId":"2357","severity":1,"message":"2658","line":92,"column":36,"nodeType":"2353","messageId":"2360","endLine":92,"endColumn":39},{"ruleId":"2357","severity":1,"message":"2600","line":33,"column":42,"nodeType":"2359","messageId":"2360","endLine":33,"endColumn":47},{"ruleId":"2357","severity":1,"message":"2694","line":33,"column":49,"nodeType":"2359","messageId":"2360","endLine":33,"endColumn":64},{"ruleId":"2357","severity":1,"message":"2437","line":33,"column":66,"nodeType":"2359","messageId":"2360","endLine":33,"endColumn":68},{"ruleId":"2351","severity":1,"message":"2609","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":12},{"ruleId":"2351","severity":1,"message":"2585","line":16,"column":11,"nodeType":"2353","messageId":"2354","endLine":16,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2695","line":30,"column":39,"nodeType":"2353","messageId":"2354","endLine":30,"endColumn":56},{"ruleId":"2357","severity":1,"message":"2599","line":76,"column":12,"nodeType":"2359","messageId":"2360","endLine":76,"endColumn":20},{"ruleId":"2357","severity":1,"message":"2600","line":76,"column":22,"nodeType":"2359","messageId":"2360","endLine":76,"endColumn":27},{"ruleId":"2357","severity":1,"message":"2601","line":76,"column":29,"nodeType":"2359","messageId":"2360","endLine":76,"endColumn":34},{"ruleId":"2357","severity":1,"message":"2661","line":96,"column":46,"nodeType":"2359","messageId":"2360","endLine":96,"endColumn":50},{"ruleId":"2357","severity":1,"message":"2662","line":96,"column":52,"nodeType":"2359","messageId":"2360","endLine":96,"endColumn":63},{"ruleId":"2357","severity":1,"message":"2690","line":96,"column":65,"nodeType":"2359","messageId":"2360","endLine":96,"endColumn":80},{"ruleId":"2357","severity":1,"message":"2691","line":96,"column":82,"nodeType":"2359","messageId":"2360","endLine":96,"endColumn":95},{"ruleId":"2357","severity":1,"message":"2696","line":96,"column":97,"nodeType":"2359","messageId":"2360","endLine":96,"endColumn":106},{"ruleId":"2351","severity":1,"message":"2557","line":99,"column":12,"nodeType":"2353","messageId":"2354","endLine":99,"endColumn":26},{"ruleId":"2376","severity":1,"message":"2697","line":122,"column":8,"nodeType":"2378","endLine":122,"endColumn":10,"suggestions":"2698"},{"ruleId":"2351","severity":1,"message":"2609","line":9,"column":5,"nodeType":"2353","messageId":"2354","endLine":9,"endColumn":12},{"ruleId":"2351","severity":1,"message":"2585","line":15,"column":11,"nodeType":"2353","messageId":"2354","endLine":15,"endColumn":18},{"ruleId":"2351","severity":1,"message":"2475","line":18,"column":31,"nodeType":"2353","messageId":"2354","endLine":18,"endColumn":35},{"ruleId":"2357","severity":1,"message":"2599","line":47,"column":12,"nodeType":"2359","messageId":"2360","endLine":47,"endColumn":20},{"ruleId":"2357","severity":1,"message":"2600","line":47,"column":22,"nodeType":"2359","messageId":"2360","endLine":47,"endColumn":27},{"ruleId":"2357","severity":1,"message":"2601","line":47,"column":29,"nodeType":"2359","messageId":"2360","endLine":47,"endColumn":34},{"ruleId":"2357","severity":1,"message":"2661","line":93,"column":46,"nodeType":"2359","messageId":"2360","endLine":93,"endColumn":50},{"ruleId":"2357","severity":1,"message":"2662","line":93,"column":52,"nodeType":"2359","messageId":"2360","endLine":93,"endColumn":63},{"ruleId":"2357","severity":1,"message":"2690","line":93,"column":65,"nodeType":"2359","messageId":"2360","endLine":93,"endColumn":80},{"ruleId":"2357","severity":1,"message":"2691","line":93,"column":82,"nodeType":"2359","messageId":"2360","endLine":93,"endColumn":95},{"ruleId":"2357","severity":1,"message":"2696","line":93,"column":97,"nodeType":"2359","messageId":"2360","endLine":93,"endColumn":106},{"ruleId":"2351","severity":1,"message":"2557","line":96,"column":12,"nodeType":"2353","messageId":"2354","endLine":96,"endColumn":26},{"ruleId":"2376","severity":1,"message":"2697","line":123,"column":8,"nodeType":"2378","endLine":123,"endColumn":10,"suggestions":"2699"},{"ruleId":"2351","severity":1,"message":"2383","line":10,"column":5,"nodeType":"2353","messageId":"2354","endLine":10,"endColumn":21},{"ruleId":"2351","severity":1,"message":"2700","line":21,"column":8,"nodeType":"2353","messageId":"2354","endLine":21,"endColumn":33},{"ruleId":"2351","severity":1,"message":"2701","line":22,"column":8,"nodeType":"2353","messageId":"2354","endLine":22,"endColumn":25},{"ruleId":"2376","severity":1,"message":"2666","line":151,"column":8,"nodeType":"2378","endLine":151,"endColumn":10,"suggestions":"2702"},{"ruleId":"2351","severity":1,"message":"2364","line":153,"column":41,"nodeType":"2353","messageId":"2354","endLine":153,"endColumn":42},{"ruleId":"2351","severity":1,"message":"2703","line":14,"column":49,"nodeType":"2353","messageId":"2354","endLine":14,"endColumn":66},{"ruleId":"2357","severity":1,"message":"2418","line":16,"column":29,"nodeType":"2359","messageId":"2360","endLine":16,"endColumn":41},{"ruleId":"2357","severity":1,"message":"2418","line":16,"column":37,"nodeType":"2359","messageId":"2360","endLine":16,"endColumn":49},"jsx-a11y/accessible-emoji",[],"lines-around-directive",["2704"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-unused-vars","'FirebaseProvider' is defined but never used.","Identifier","unusedVar","'fetchSectionAttributes' is defined but never used.","'fetchSectionAttributesByRole' is defined but never used.","react/prop-types","'fetchSectionAttributesByRole' is missing in props validation","Property","missingPropType","'setNewMessageSend' is defined but never used.","'check' is assigned a value but never used.","'connectInterval' is defined but never used.","'e' is defined but never used.","'err' is defined but never used.","'React' is defined but never used.","func-names","Unexpected unnamed function.","FunctionExpression","unnamed","'FirebaseLogin' is defined but never used.","'useContext' is defined but never used.","'reviewBoardRedux' is assigned a value but never used.","'open' is assigned a value but never used.","'handleCloseDialog' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchListData' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["2705"],"'Google' is defined but never used.","'customization' is assigned a value but never used.","'googleHandler' is assigned a value but never used.","'CircularProgress' is defined but never used.","'PersonOutlineTwoToneIcon' is defined but never used.","'listReferralsByReviewBoardID' is defined but never used.","'createDailyWorkload' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["2706"],"'userAuthContext' is assigned a value but never used.","'theme' is assigned a value but never used.","'AuthPattern' is defined but never used.","'AuthPatternDark' is defined but never used.","'Checkbox' is defined but never used.","'FormControlLabel' is defined but never used.","'MenuItem' is defined but never used.","'TextField' is defined but never used.","'MaskedInput' is defined but never used.","'setCasePresentationForm' is defined but never used.","'dispatch' is assigned a value but never used.","'Button' is defined but never used.","'withFormik' is defined but never used.","'Yup' is defined but never used.","'FirebaseContext' is defined but never used.","'gridSpacing' is defined but never used.","'useSelector' is defined but never used.","'title' is missing in props validation","'setDocumentUUID' is missing in props validation","'fileType' is missing in props validation","'documentName' is assigned a value but never used.","'uploadTime' is assigned a value but never used.",[],["2704"],[],[],[],[],"'caseManagerApi' is defined but never used.","'retrieveMode' is missing in props validation","'SubCard' is defined but never used.","'setProgressLoader' is missing in props validation","'event' is defined but never used.","'CasePresentationForm' is defined but never used.","'OrganizationResponsible' is defined but never used.","'connect' is defined but never used.","'referralDetails' is missing in props validation","'referralDetails' is defined but never used.","'setReferralDetail' is missing in props validation","'setReferralDetail' is defined but never used.","'LocalizationSection' is defined but never used.","'providerSpecificFormAction' is missing in props validation","'documentType' is missing in props validation","'generalAssessmentFormAction' is missing in props validation","'Paper' is defined but never used.","'InputAdornment' is defined but never used.","'EmailTwoToneIcon' is defined but never used.","'name' is missing in props validation","'id' is missing in props validation","'formik' is missing in props validation","'label' is assigned a value but never used.","'formik.setFieldValue' is missing in props validation",[],["2704"],[],[],[],[],"'Avatar' is defined but never used.","'UpgradePlanCard' is defined but never used.","'User1' is defined but never used.","'lightGreen' is defined but never used.","'USER_TYPES_MAP' is assigned a value but never used.","'jwtContext' is assigned a value but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'Stack' is defined but never used.","'IconBrandTelegram' is defined but never used.","'IconMailbox' is defined but never used.","'IconPhoto' is defined but never used.","'urls' is assigned a value but never used.","'Form' is defined but never used.","'Field' is defined but never used.","'ErrorMessage' is defined but never used.","'useFormik' is defined but never used.","'CreditCardTwoToneIcon' is defined but never used.","'VpnKeyTwoToneIcon' is defined but never used.","'Menu' is defined but never used.","'MoreHorizTwoToneIcon' is defined but never used.","'W3CWebSocket' is defined but never used.","'currentUserUUID' is assigned a value but never used.","'currentUserToken' is assigned a value but never used.","'d' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'currentUsername', 'dispatch', and 'socketChatClient'. Either include them or remove the dependency array.",["2707"],"'LayersTwoToneIcon' is defined but never used.","'Chip' is defined but never used.","'setUserActiveMessagesList' is defined but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","'activeRecipientsList' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'getUserActiveRecipientsList'. Either include it or remove the dependency array.",["2708"],"'index' is defined but never used.","'avatarImage' is assigned a value but never used.","'display' is missing in props validation","'CASE_MANAGER_SET_RETRIEVED_CLIENT_ASSESSMENT_DATA' is defined but never used.","'MESSAGING_SET_ACTIVE_RECIPIENT_USER' is defined but never used.","'MESSAGING_SET_SEARCH_USERS_LIST_SELECTED' is defined but never used.","'EXTERNAL_PARTNER_LIST_CLIENT_INTERVENTION_FOR_EXTERNAL_PARTNER' is defined but never used.","'useEffect' is defined but never used.","'setVisitorLogDetail' is defined but never used.","'value' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'retrieveDailyWorkload' is defined but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'dispatch' and 'workload_id'. Either include them or remove the dependency array.",["2709"],"'Typography' is defined but never used.","'MainCard' is defined but never used.","'NewClients' is defined but never used.","'IconShare' is defined but never used.","'IconAccessPoint' is defined but never used.","'IconCircles' is defined but never used.","'IconCreditCard' is defined but never used.","'MonetizationOnTwoToneIcon' is defined but never used.","'classes' is assigned a value but never used.","'matchDownXs' is assigned a value but never used.","'InternalReferrals' is defined but never used.","'ExternalReferrals' is defined but never used.","'ClientReferrals' is defined but never used.","'IconNumberCard' is defined but never used.","'AccountCircleTwoTone' is defined but never used.","'DescriptionTwoToneIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchInternalReferralData'. Either include it or remove the dependency array.",["2710"],"'PropTypes' is defined but never used.",["2711"],"'Avatar2' is defined but never used.","'Avatar3' is defined but never used.","'Avatar4' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchInternalFollowUpData'. Either include it or remove the dependency array.",["2712"],"React Hook useEffect has a missing dependency: 'fetchExternalFollowUpData'. Either include it or remove the dependency array.",["2713"],"React Hook useEffect has a missing dependency: 'fetchAllNotifications'. Either include it or remove the dependency array.",["2714"],"'DASHBOARD_SET_ACTIVITY_NOTIFICATIONS_DATA' is defined but never used.","'NOTIFICATION_OBJECT_TYPE' is defined but never used.","'object_type_code' is assigned a value but never used.","'setActiveRecipientMessageHistory' is defined but never used.","'getRecipientMessageHistory' is assigned a value but never used.","'response' is assigned a value but never used.","'useRef' is defined but never used.","'editMode' is missing in props validation","'isEditMode' is assigned a value but never used.","'valueBasic' is assigned a value but never used.","'setValueBasic' is assigned a value but never used.","'DASHBOARD_SET_ALL_ACTIVITY_NOTIFICATIONS_DATA' is defined but never used.","'actionTypes' is defined but never used.","'CLIENT_SET_PERSONAL_INFORMATION_DETAIL' is defined but never used.","'CLIENT_SET_RETRIEVED_PERSONAL_INFORMATION_DATA' is defined but never used.","'CLINICIAN_SET_DAILY_WORKLOAD_DETAILS' is defined but never used.","'CLIENT_SET_VISITOR_LOG_DETAIL' is defined but never used.","React Hook useEffect has missing dependencies: 'caseManagerUUID' and 'dispatch'. Either include them or remove the dependency array.",["2715"],"'CardActions' is defined but never used.","'Tab' is defined but never used.","'Tabs' is defined but never used.","'ListItemIcon' is defined but never used.","'Details' is defined but never used.","'AnimateButton' is defined but never used.","'SNACKBAR_OPEN' is defined but never used.","'a11yProps' is defined but never used.","'tabsOption' is assigned a value but never used.","'caseManagerUUID' is assigned a value but never used.","'setValue' is assigned a value but never used.","'progressLoader' is assigned a value but never used.","'setProgressLoader' is assigned a value but never used.",["2716"],"'MoreHorizOutlinedIcon' is defined but never used.","'createData' is defined but never used.","'onSelectAllClick' is defined but never used.","'rowCount' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchListData'. Either include it or remove the dependency array.",["2717"],"'isSelected' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clientUUID', 'dispatch', and 'fetchClinicalInformation'. Either include them or remove the dependency array.",["2718"],"React Hook useEffect has a missing dependency: 'fetchPersonalInformation'. Either include it or remove the dependency array.",["2719"],"'Link' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchClientAssessmentData'. Either include it or remove the dependency array.",["2720"],"'ExistingExtraMural' is defined but never used.","'setDailyWorkLoadDetails' is defined but never used.",["2721"],"'Box' is defined but never used.","'Fab' is defined but never used.","'LinearProgress' is defined but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableContainer' is defined but never used.","'TableRow' is defined but never used.","'Tooltip' is defined but never used.","'IconEdit' is defined but never used.","'PageViewIcon' is defined but never used.","'AddIcon' is defined but never used.","'assessmentDetailData' is missing in props validation","'handleOpenAssessmentFormsDialog' is assigned a value but never used.","'assessmentDetailData.assessment_status' is missing in props validation","'IconButton' is defined but never used.","'Slider' is defined but never used.","'Switch' is defined but never used.","'FaceTwoToneIcon' is defined but never used.","'DomainTwoToneIcon' is defined but never used.","'ArrowDropDownIcon' is defined but never used.","'Accordion' is defined but never used.","'children' is missing in props validation","'value' is missing in props validation","'index' is missing in props validation","'clientApi' is defined but never used.","'JWTContext' is defined but never used.","'client' is missing in props validation","'client' is defined but never used.","'setProgressLoader' is defined but never used.","'makeStyles' is defined but never used.","'useTheme' is defined but never used.","'Divider' is defined but never used.","'FormControl' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'Autocomplete' is defined but never used.","'setClinicalInformationDetails' is missing in props validation","'setAddDailyWorkLoadDate' is defined but never used.","'clientUUID' is assigned a value but never used.","'DatePicker' is defined but never used.","'AdapterDateFns' is defined but never used.","'LocalizationProvider' is defined but never used.","'SecondaryAction' is defined but never used.","'FilterListIcon' is defined but never used.","'FormHelperText' is defined but never used.","'FormGroup' is defined but never used.","'setSearchUsersList' is defined but never used.","'InputLabel' is defined but never used.","'selectedClient' is assigned a value but never used.","'setSelectedClient' is assigned a value but never used.","'setIsRetrieveMode' is assigned a value but never used.","'setTitle' is assigned a value but never used.",["2722"],"'ProviderSpecificForms' is defined but never used.","'setNewEMProviderSpecificFormUUID' is defined but never used.","'useStyles' is assigned a value but never used.","'AssessmentFormsCP' is defined but never used.","'setNewEMGeneralAssessmentFormUUID' is defined but never used.","'FileInput' is defined but never used.","'modeOfAssessmentSelectList' is assigned a value but never used.",["2723"],["2724"],["2725"],"'IosShareOutlined' is defined but never used.",["2726"],["2727"],["2728"],["2729"],"'listCaseManagerClientAssessment' is defined but never used.",["2730"],["2731"],"'PartnerExternalCommunication' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'externalPartnerID'. Either include them or remove the dependency array.",["2732"],["2733"],"'ListItemText' is defined but never used.","'List' is defined but never used.","'Grid' is defined but never used.","'ListItemButton' is defined but never used.","'forms' is missing in props validation","'forms.map' is missing in props validation",["2734"],["2735"],"'open' is missing in props validation","'handleClose' is missing in props validation","'clinicalInfoData' is missing in props validation","'clinicalInfoData.current_medication' is missing in props validation",["2736"],"React Hook useEffect has missing dependencies: 'clinicianUUID' and 'dispatch'. Either include them or remove the dependency array.",["2737"],["2738"],["2739"],"'CASE_MANAGER_LIST_CLIENT_INTERVENTION_FOR_CASE_MANAGER' is defined but never used.","'setAssessmentCaseManagerDetail' is defined but never used.","'setAssessmentClientDetail' is defined but never used.","'setAssessmentClientStatus' is defined but never used.","'setSelectedClientValueToStore' is missing in props validation","'storeData' is missing in props validation","'storeData.client' is missing in props validation","'displaySelectedClientDetail' is assigned a value but never used.","'providerProfessionType' is missing in props validation","'providerProfessionType' is defined but never used.","'setInterventionFormUUID' is defined but never used.","'TextareaAutosize' is defined but never used.","'TypeOfTherapeuticInterventions' is defined but never used.","'setInterventionDateAdd' is defined but never used.","'formik' is assigned a value but never used.","'modeOfInterventionSelectList' is assigned a value but never used.","'providerTypeClinicalInterventionTypes' is assigned a value but never used.","'handleInterventionDateChange' is assigned a value but never used.",["2740"],["2741"],"'share_object_id' is missing in props validation","'instance_type' is missing in props validation","'referral_tooltip' is missing in props validation","'followup_tooltip' is missing in props validation","'onChangeHandler' is missing in props validation","'organizationsList' is defined but never used.","'from_user' is missing in props validation","React Hook useEffect has missing dependencies: 'dispatch', 'from_user', 'instance_type', and 'share_object_id'. Either include them or remove the dependency array.",["2742"],["2743"],"'ProjectClinicalActivities' is defined but never used.","'ProjectActivities' is defined but never used.",["2744"],"'externalPartnerID' is defined but never used.","padding-line-between-statements",{"desc":"2745","fix":"2746"},{"desc":"2747","fix":"2748"},{"desc":"2749","fix":"2750"},{"desc":"2751","fix":"2752"},{"desc":"2753","fix":"2754"},{"desc":"2755","fix":"2756"},{"desc":"2755","fix":"2757"},{"desc":"2758","fix":"2759"},{"desc":"2760","fix":"2761"},{"desc":"2762","fix":"2763"},{"desc":"2764","fix":"2765"},{"desc":"2753","fix":"2766"},{"desc":"2767","fix":"2768"},{"desc":"2769","fix":"2770"},{"desc":"2771","fix":"2772"},{"desc":"2773","fix":"2774"},{"desc":"2767","fix":"2775"},{"desc":"2764","fix":"2776"},{"desc":"2753","fix":"2777"},{"desc":"2767","fix":"2778"},{"desc":"2753","fix":"2779"},{"desc":"2773","fix":"2780"},{"desc":"2767","fix":"2781"},{"desc":"2753","fix":"2782"},{"desc":"2764","fix":"2783"},{"desc":"2767","fix":"2784"},{"desc":"2767","fix":"2785"},{"desc":"2786","fix":"2787"},{"desc":"2764","fix":"2788"},{"desc":"2753","fix":"2789"},{"desc":"2767","fix":"2790"},{"desc":"2767","fix":"2791"},{"desc":"2792","fix":"2793"},{"desc":"2773","fix":"2794"},{"desc":"2767","fix":"2795"},{"desc":"2764","fix":"2796"},{"desc":"2792","fix":"2797"},{"desc":"2798","fix":"2799"},{"desc":"2798","fix":"2800"},{"desc":"2792","fix":"2801"},"Update the dependencies array to be: [fetchListData, user]",{"range":"2802","text":"2803"},"Update the dependencies array to be: [dispatch]",{"range":"2804","text":"2805"},"Update the dependencies array to be: [activeRecipient, currentUsername, dispatch, socketChatClient]",{"range":"2806","text":"2807"},"Update the dependencies array to be: [getUserActiveRecipientsList]",{"range":"2808","text":"2809"},"Update the dependencies array to be: [dispatch, workload_id]",{"range":"2810","text":"2811"},"Update the dependencies array to be: [fetchInternalReferralData]",{"range":"2812","text":"2813"},{"range":"2814","text":"2813"},"Update the dependencies array to be: [fetchInternalFollowUpData]",{"range":"2815","text":"2816"},"Update the dependencies array to be: [fetchExternalFollowUpData]",{"range":"2817","text":"2818"},"Update the dependencies array to be: [fetchAllNotifications]",{"range":"2819","text":"2820"},"Update the dependencies array to be: [caseManagerUUID, dispatch]",{"range":"2821","text":"2822"},{"range":"2823","text":"2811"},"Update the dependencies array to be: [fetchListData]",{"range":"2824","text":"2825"},"Update the dependencies array to be: [clientUUID, dispatch, fetchClinicalInformation]",{"range":"2826","text":"2827"},"Update the dependencies array to be: [fetchPersonalInformation]",{"range":"2828","text":"2829"},"Update the dependencies array to be: [fetchClientAssessmentData]",{"range":"2830","text":"2831"},{"range":"2832","text":"2825"},{"range":"2833","text":"2822"},{"range":"2834","text":"2811"},{"range":"2835","text":"2825"},{"range":"2836","text":"2811"},{"range":"2837","text":"2831"},{"range":"2838","text":"2825"},{"range":"2839","text":"2811"},{"range":"2840","text":"2822"},{"range":"2841","text":"2825"},{"range":"2842","text":"2825"},"Update the dependencies array to be: [dispatch, externalPartnerID]",{"range":"2843","text":"2844"},{"range":"2845","text":"2822"},{"range":"2846","text":"2811"},{"range":"2847","text":"2825"},{"range":"2848","text":"2825"},"Update the dependencies array to be: [clinicianUUID, dispatch]",{"range":"2849","text":"2850"},{"range":"2851","text":"2831"},{"range":"2852","text":"2825"},{"range":"2853","text":"2822"},{"range":"2854","text":"2850"},"Update the dependencies array to be: [dispatch, from_user, instance_type, share_object_id]",{"range":"2855","text":"2856"},{"range":"2857","text":"2856"},{"range":"2858","text":"2850"},[11550,11552],"[fetchListData, user]",[5018,5020],"[dispatch]",[5749,5766],"[activeRecipient, currentUsername, dispatch, socketChatClient]",[1403,1405],"[getUserActiveRecipientsList]",[5232,5234],"[dispatch, workload_id]",[1210,1212],"[fetchInternalReferralData]",[1210,1212],[1208,1210],"[fetchInternalFollowUpData]",[1209,1211],"[fetchExternalFollowUpData]",[2232,2234],"[fetchAllNotifications]",[4388,4390],"[caseManagerUUID, dispatch]",[5790,5792],[10730,10732],"[fetchListData]",[5115,5117],"[clientUUID, dispatch, fetchClinicalInformation]",[4428,4430],"[fetchPersonalInformation]",[3664,3666],"[fetchClientAssessmentData]",[10488,10490],[1999,2001],[4724,4726],[10485,10487],[5380,5382],[3747,3749],[10727,10729],[5790,5792],[4234,4236],[10531,10533],[10216,10218],[4298,4300],"[dispatch, externalPartnerID]",[4813,4815],[4573,4575],[10629,10631],[10273,10275],[4215,4217],"[clinicianUUID, dispatch]",[3717,3719],[10403,10405],[1999,2001],[1876,1878],[3776,3778],"[dispatch, from_user, instance_type, share_object_id]",[3899,3901],[4302,4304]]