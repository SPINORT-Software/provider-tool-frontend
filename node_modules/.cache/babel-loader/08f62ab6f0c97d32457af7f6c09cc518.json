{"ast":null,"code":"var _jsxFileName = \"/home/sai/projects/django-apps/providertool/frontend/javascript/skeleton/src/views/configurable-forms/ConfigurableForm.js\";\nimport * as React from 'react'; // material-ui\n\nimport { Checkbox, CardContent, Divider, FormControlLabel, Grid, Typography, TextField } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport * as actions from 'store/actions';\nimport { fetchSectionAttributes } from 'store/actions';\nimport SubCard from 'ui-component/cards/SubCard';\n/*\r\nThis component servers as a page content for any user section attribute group.\r\nAll the fields will be fetched under the attribute group and iterated to display in this component.\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getFieldByType = attributeItem => {\n  // eslint-disable-next-line camelcase\n  const {\n    frontend_input\n  } = attributeItem; // eslint-disable-next-line camelcase\n\n  switch (frontend_input) {\n    case 'input_textbox':\n      return /*#__PURE__*/_jsxDEV(TextField, {\n        required: true,\n        id: attributeItem.attribute_id,\n        name: attributeItem.attribute_code,\n        label: attributeItem.frontend_label,\n        fullWidth: true,\n        autoComplete: \"given-name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 20\n      }, this);\n\n    case 'input_number':\n      return /*#__PURE__*/_jsxDEV(TextField, {\n        type: \"number\",\n        required: true,\n        id: attributeItem.attribute_id,\n        name: attributeItem.attribute_code,\n        label: attributeItem.frontend_label,\n        fullWidth: true,\n        autoComplete: \"given-name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 20\n      }, this);\n\n    case 'input_date':\n      return /*#__PURE__*/_jsxDEV(TextField, {\n        type: \"number\",\n        required: true,\n        id: attributeItem.attribute_id,\n        name: attributeItem.attribute_code,\n        label: attributeItem.frontend_label,\n        fullWidth: true,\n        autoComplete: \"given-name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 20\n      }, this);\n\n    default:\n      return /*#__PURE__*/_jsxDEV(TextField, {\n        required: true,\n        id: attributeItem.attribute_id,\n        name: attributeItem.attribute_code,\n        label: attributeItem.frontend_label,\n        fullWidth: true,\n        autoComplete: \"given-name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 20\n      }, this);\n  }\n};\n\nconst makeFields = attributes => attributes.map(attributeItem => /*#__PURE__*/_jsxDEV(Grid, {\n  item: true,\n  xs: 10,\n  sm: 6,\n  lg: 12,\n  children: /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 3,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 10,\n      sm: 6,\n      lg: 5,\n      children: getFieldByType(attributeItem)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 44,\n  columnNumber: 5\n}, this));\n\nconst makeGroupFields = childAttributeGroups => Object.keys(childAttributeGroups).map(childGroupKey => {\n  // eslint-disable-next-line camelcase\n  const {\n    group_detail,\n    attributes\n  } = childAttributeGroups[childGroupKey];\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    mb: 1,\n    spacing: 5,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        component: \"div\",\n        sx: {\n          mb: 3\n        },\n        children: group_detail.attribute_group_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        alignItems: \"center\",\n        children: makeFields(attributes)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 13\n  }, this);\n});\n\nfunction makeGroupFieldsRecursive(childGroupsData) {\n  // eslint-disable-next-line array-callback-return\n  return Object.keys(childGroupsData).map(childGroupItem => // eslint-disable-next-line no-use-before-define\n  makeGroupContent(childGroupsData[childGroupItem]));\n}\n\nconst makeGroupContent = groupData => {\n  // eslint-disable-next-line camelcase\n  const {\n    group_detail,\n    default_attributes,\n    attribute_groups\n  } = groupData;\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    mb: 3,\n    spacing: 5,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(SubCard, {\n        title: group_detail.attribute_group_name,\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 3,\n            alignItems: \"center\",\n            children: makeGroupFieldsRecursive(attribute_groups)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 3,\n            alignItems: \"center\",\n            children: makeFields(default_attributes)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 13\n  }, this);\n};\n\nconst makeElements = groupData => {\n  const {\n    childAttributeGroups,\n    defaultAttributes\n  } = groupData;\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 3,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      lg: 12,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: makeFields(defaultAttributes)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      lg: 12,\n      children: makeGroupFieldsRecursive(childAttributeGroups)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n/*\r\n* Component Function\r\n* */\n\n\nfunction ConfigurableForm({\n  sectionData,\n  groupData\n}) {\n  return makeElements(groupData);\n}\n\n_c = ConfigurableForm;\n\nconst mapStateToProps = state => ({\n  sectionData: state.sectionForm\n});\n\nconst mapDispatchToProps = dispatch => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfigurableForm);\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfigurableForm\");","map":{"version":3,"sources":["/home/sai/projects/django-apps/providertool/frontend/javascript/skeleton/src/views/configurable-forms/ConfigurableForm.js"],"names":["React","Checkbox","CardContent","Divider","FormControlLabel","Grid","Typography","TextField","connect","actions","fetchSectionAttributes","SubCard","getFieldByType","attributeItem","frontend_input","attribute_id","attribute_code","frontend_label","makeFields","attributes","map","makeGroupFields","childAttributeGroups","Object","keys","childGroupKey","group_detail","mb","attribute_group_name","makeGroupFieldsRecursive","childGroupsData","childGroupItem","makeGroupContent","groupData","default_attributes","attribute_groups","makeElements","defaultAttributes","ConfigurableForm","sectionData","mapStateToProps","state","sectionForm","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\n\r\n// material-ui\r\nimport { Checkbox, CardContent, Divider, FormControlLabel, Grid, Typography, TextField } from '@material-ui/core';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from 'store/actions';\r\nimport { fetchSectionAttributes } from 'store/actions';\r\n\r\n\r\nimport SubCard from 'ui-component/cards/SubCard';\r\n\r\n/*\r\nThis component servers as a page content for any user section attribute group.\r\nAll the fields will be fetched under the attribute group and iterated to display in this component.\r\n */\r\nconst getFieldByType = (attributeItem) => {\r\n    // eslint-disable-next-line camelcase\r\n    const { frontend_input } = attributeItem;\r\n\r\n    // eslint-disable-next-line camelcase\r\n    switch (frontend_input) {\r\n        case 'input_textbox':\r\n            return <TextField required id={attributeItem.attribute_id} name={attributeItem.attribute_code}\r\n                              label={attributeItem.frontend_label} fullWidth\r\n                              autoComplete='given-name' />;\r\n\r\n        case 'input_number':\r\n            return <TextField type='number' required id={attributeItem.attribute_id} name={attributeItem.attribute_code}\r\n                              label={attributeItem.frontend_label} fullWidth\r\n                              autoComplete='given-name' />;\r\n\r\n        case 'input_date':\r\n            return <TextField type='number' required id={attributeItem.attribute_id} name={attributeItem.attribute_code}\r\n                              label={attributeItem.frontend_label} fullWidth\r\n                              autoComplete='given-name' />;\r\n        default:\r\n            return <TextField required id={attributeItem.attribute_id} name={attributeItem.attribute_code}\r\n                              label={attributeItem.frontend_label} fullWidth\r\n                              autoComplete='given-name' />;\r\n    }\r\n};\r\n\r\nconst makeFields = (attributes) => attributes.map(attributeItem => (\r\n    <Grid item xs={10} sm={6} lg={12}>\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={10} sm={6} lg={5}>\r\n                {getFieldByType(attributeItem)}\r\n            </Grid>\r\n        </Grid>\r\n    </Grid>\r\n));\r\n\r\nconst makeGroupFields = (childAttributeGroups) => Object.keys(childAttributeGroups).map(childGroupKey => {\r\n    // eslint-disable-next-line camelcase\r\n    const { group_detail, attributes } = childAttributeGroups[childGroupKey];\r\n\r\n    return (<Grid container mb={1} spacing={5}>\r\n        <Grid item xs={12}>\r\n            <Typography variant='h5' component='div' sx={{ mb: 3 }}>\r\n                {group_detail.attribute_group_name}\r\n            </Typography>\r\n            <Grid container spacing={3} alignItems='center'>\r\n                {makeFields(attributes)}\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n            <Divider />\r\n        </Grid>\r\n    </Grid>);\r\n});\r\n\r\nfunction makeGroupFieldsRecursive(childGroupsData) {\r\n    // eslint-disable-next-line array-callback-return\r\n    return Object.keys(childGroupsData).map(childGroupItem =>\r\n        // eslint-disable-next-line no-use-before-define\r\n        makeGroupContent(childGroupsData[childGroupItem])\r\n    );\r\n}\r\n\r\nconst makeGroupContent = (groupData) => {\r\n    // eslint-disable-next-line camelcase\r\n    const { group_detail, default_attributes, attribute_groups } = groupData;\r\n    return (<Grid container mb={3} spacing={5}>\r\n        <Grid item xs={12}>\r\n            <SubCard title={group_detail.attribute_group_name}>\r\n                <CardContent>\r\n                    <Grid container spacing={3} alignItems='center'>\r\n                        {makeGroupFieldsRecursive(attribute_groups)}\r\n                    </Grid>\r\n                    <Grid container spacing={3} alignItems='center'>\r\n                        {makeFields(default_attributes)}\r\n                    </Grid>\r\n                </CardContent>\r\n            </SubCard>\r\n        </Grid>\r\n    </Grid>);\r\n};\r\n\r\nconst makeElements = (groupData) => {\r\n    const { childAttributeGroups, defaultAttributes } = groupData;\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={12} lg={12}>\r\n                <Grid container spacing={3}>\r\n                    {makeFields(defaultAttributes)}\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} lg={12}>\r\n                {makeGroupFieldsRecursive(childAttributeGroups)}\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\n/*\r\n* Component Function\r\n* */\r\nfunction ConfigurableForm({ sectionData, groupData }) {\r\n    return makeElements(groupData);\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    sectionData: state.sectionForm\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfigurableForm);\r\n"]},"metadata":{},"sourceType":"module"}