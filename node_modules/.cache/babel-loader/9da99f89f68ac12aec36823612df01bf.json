{"ast":null,"code":"var _jsxFileName = \"/home/sai/projects/django-apps/providertool/frontend/javascript/skeleton/src/contexts/FirebaseContext.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport React, { createContext, useEffect, useReducer } from 'react'; // third-party\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth'; // action - state management\n\nimport { ACCOUNT_INITIALIZE } from 'store/actionTypes'; // project imports\n\nimport accountReducer from 'store/reducers/accountReducer';\nimport Loader from 'ui-component/Loader';\nimport config from 'config'; // firebase initialize\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config.firebase);\n} // const\n\n\nconst initialState = {\n  isLoggedIn: false,\n  isInitialized: false,\n  user: null\n}; // ===========================|| FIREBASE CONTEXT & PROVIDER ||=========================== //\n\nconst FirebaseContext = /*#__PURE__*/createContext({ ...initialState,\n  firebaseEmailPasswordNewUser: () => Promise.resolve(),\n  firebaseEmailPasswordSignIn: () => Promise.resolve(),\n  firebaseGoogleSignIn: () => Promise.resolve(),\n  logout: () => Promise.resolve()\n});\nexport const FirebaseProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(accountReducer, initialState);\n\n  const firebaseEmailPasswordSignIn = (email, password) => firebase.auth().signInWithEmailAndPassword(email, password);\n\n  const firebaseGoogleSignIn = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    return firebase.auth().signInWithPopup(provider);\n  };\n\n  const firebaseEmailPasswordNewUser = async (email, password) => firebase.auth().createUserWithEmailAndPassword(email, password);\n\n  const logout = () => firebase.auth().signOut();\n\n  useEffect(() => firebase.auth().onAuthStateChanged(user => {\n    if (user) {\n      dispatch({\n        type: ACCOUNT_INITIALIZE,\n        payload: {\n          isLoggedIn: true,\n          user: {\n            id: user.uid,\n            email: user.email\n          }\n        }\n      });\n    } else {\n      dispatch({\n        type: ACCOUNT_INITIALIZE,\n        payload: {\n          isLoggedIn: false,\n          user: null\n        }\n      });\n    }\n  }), [dispatch]);\n\n  if (!state.isInitialized) {\n    return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(FirebaseContext.Provider, {\n    value: { ...state,\n      firebaseEmailPasswordNewUser,\n      firebaseEmailPasswordSignIn,\n      firebaseGoogleSignIn,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FirebaseProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = FirebaseProvider;\nFirebaseProvider.propTypes = {\n  children: PropTypes.node\n};\nexport default FirebaseContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"FirebaseProvider\");","map":{"version":3,"sources":["/home/sai/projects/django-apps/providertool/frontend/javascript/skeleton/src/contexts/FirebaseContext.js"],"names":["PropTypes","React","createContext","useEffect","useReducer","firebase","ACCOUNT_INITIALIZE","accountReducer","Loader","config","apps","length","initializeApp","initialState","isLoggedIn","isInitialized","user","FirebaseContext","firebaseEmailPasswordNewUser","Promise","resolve","firebaseEmailPasswordSignIn","firebaseGoogleSignIn","logout","FirebaseProvider","children","state","dispatch","email","password","auth","signInWithEmailAndPassword","provider","GoogleAuthProvider","signInWithPopup","createUserWithEmailAndPassword","signOut","onAuthStateChanged","type","payload","id","uid","propTypes","node"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React, { createContext, useEffect, useReducer } from 'react';\r\n\r\n// third-party\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\n\r\n// action - state management\r\nimport { ACCOUNT_INITIALIZE } from 'store/actionTypes';\r\n\r\n// project imports\r\nimport accountReducer from 'store/reducers/accountReducer';\r\nimport Loader from 'ui-component/Loader';\r\nimport config from 'config';\r\n\r\n// firebase initialize\r\nif (!firebase.apps.length) {\r\n    firebase.initializeApp(config.firebase);\r\n}\r\n\r\n// const\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    isInitialized: false,\r\n    user: null\r\n};\r\n\r\n// ===========================|| FIREBASE CONTEXT & PROVIDER ||=========================== //\r\n\r\nconst FirebaseContext = createContext({\r\n    ...initialState,\r\n    firebaseEmailPasswordNewUser: () => Promise.resolve(),\r\n    firebaseEmailPasswordSignIn: () => Promise.resolve(),\r\n    firebaseGoogleSignIn: () => Promise.resolve(),\r\n    logout: () => Promise.resolve()\r\n});\r\n\r\nexport const FirebaseProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(accountReducer, initialState);\r\n\r\n    const firebaseEmailPasswordSignIn = (email, password) => firebase.auth().signInWithEmailAndPassword(email, password);\r\n\r\n    const firebaseGoogleSignIn = () => {\r\n        const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n        return firebase.auth().signInWithPopup(provider);\r\n    };\r\n\r\n    const firebaseEmailPasswordNewUser = async (email, password) => firebase.auth().createUserWithEmailAndPassword(email, password);\r\n\r\n    const logout = () => firebase.auth().signOut();\r\n\r\n    useEffect(\r\n        () =>\r\n            firebase.auth().onAuthStateChanged((user) => {\r\n                if (user) {\r\n                    dispatch({\r\n                        type: ACCOUNT_INITIALIZE,\r\n                        payload: {\r\n                            isLoggedIn: true,\r\n                            user: {\r\n                                id: user.uid,\r\n                                email: user.email\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    dispatch({\r\n                        type: ACCOUNT_INITIALIZE,\r\n                        payload: {\r\n                            isLoggedIn: false,\r\n                            user: null\r\n                        }\r\n                    });\r\n                }\r\n            }),\r\n        [dispatch]\r\n    );\r\n\r\n    if (!state.isInitialized) {\r\n        return <Loader />;\r\n    }\r\n\r\n    return (\r\n        <FirebaseContext.Provider\r\n            value={{\r\n                ...state,\r\n                firebaseEmailPasswordNewUser,\r\n                firebaseEmailPasswordSignIn,\r\n                firebaseGoogleSignIn,\r\n                logout\r\n            }}\r\n        >\r\n            {children}\r\n        </FirebaseContext.Provider>\r\n    );\r\n};\r\n\r\nFirebaseProvider.propTypes = {\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default FirebaseContext;\r\n"]},"metadata":{},"sourceType":"module"}