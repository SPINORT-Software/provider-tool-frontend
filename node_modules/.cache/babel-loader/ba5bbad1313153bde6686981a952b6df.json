{"ast":null,"code":"var _jsxFileName = \"/home/sai/projects/django-apps/providertool/frontend/javascript/skeleton/src/views/configurable-forms/index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react'; // material-ui\n\nimport { Grid, Button, Step, Stepper, StepLabel, Stack, Typography } from '@material-ui/core'; // project imports\n\nimport ConfigurableForm from './ConfigurableForm';\nimport MainCard from 'ui-component/cards/MainCard';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport { gridSpacing } from 'store/constant';\nimport { connect } from 'react-redux';\nimport * as actions from 'store/actions';\nimport { fetchSectionAttributes } from \"store/actions\"; // ===========================|| FORMS WIZARD - BASIC ||=========================== //\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ConfigurableForms = ({\n  uuid,\n  title,\n  sectionData\n}) => {\n  _s();\n\n  const sectionAttributeGroups = sectionData.sections[uuid].attribute_groups;\n  const [activeStep, setActiveStep] = React.useState(0);\n\n  const handleNext = () => {\n    setActiveStep(activeStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep(activeStep - 1);\n  };\n\n  const processAttributeGroups = () => {\n    const steps = [];\n    const stepFields = [];\n    Object.entries(sectionAttributeGroups).map(attributeGroupItem => {\n      const attributeGroupCode = attributeGroupItem[0];\n      const attributeGroup = attributeGroupItem[1];\n      const title = attributeGroup.group_detail.attribute_group_name;\n      steps.push(title);\n      stepFields.push({\n        defaultAttributes: attributeGroup.default_attributes,\n        childAttributeGroups: attributeGroup.child_attribute_groups\n      });\n      return true;\n    });\n    return {\n      steps,\n      stepFields\n    };\n  };\n\n  const attributeStepsAndGroupData = processAttributeGroups(); // step options\n\n  const {\n    steps,\n    stepFields\n  } = attributeStepsAndGroupData;\n\n  function getStepContent(step) {\n    if (step < steps.length) {\n      return /*#__PURE__*/_jsxDEV(ConfigurableForm, {\n        groupData: stepFields[step]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 20\n      }, this);\n    } // throw new Error('Unknown step');\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Unknown Step\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 3,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      md: 10,\n      lg: 10,\n      children: /*#__PURE__*/_jsxDEV(MainCard, {\n        title: title,\n        children: [/*#__PURE__*/_jsxDEV(Stepper, {\n          activeStep: activeStep,\n          sx: {\n            pt: 3,\n            pb: 5\n          },\n          children: steps.map(label => /*#__PURE__*/_jsxDEV(Step, {\n            children: /*#__PURE__*/_jsxDEV(StepLabel, {\n              children: label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 33\n            }, this)\n          }, label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: activeStep === steps.length ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              gutterBottom: true,\n              children: \"After submission.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Stack, {\n              direction: \"row\",\n              justifyContent: \"flex-end\",\n              children: /*#__PURE__*/_jsxDEV(AnimateButton, {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"error\",\n                  onClick: () => setActiveStep(0),\n                  sx: {\n                    my: 3,\n                    ml: 1\n                  },\n                  children: \"Reset\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [getStepContent(activeStep), /*#__PURE__*/_jsxDEV(Stack, {\n              direction: \"row\",\n              justifyContent: activeStep !== 0 ? 'space-between' : 'flex-end',\n              children: [activeStep !== 0 && /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"secondary\",\n                onClick: handleBack,\n                sx: {\n                  my: 3,\n                  ml: 1\n                },\n                children: \"Back\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(AnimateButton, {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  onClick: handleNext,\n                  sx: {\n                    my: 3,\n                    ml: 1\n                  },\n                  children: activeStep === steps.length - 1 ? 'Submit' : 'Next'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true)\n        }, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ConfigurableForms, \"cJXWosTT0XUh3gGn3cCcv/Y+Hws=\");\n\n_c = ConfigurableForms;\n\nconst mapStateToProps = state => ({\n  sectionData: state.sectionForm\n});\n\nconst mapDispatchToProps = dispatch => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfigurableForms);\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfigurableForms\");","map":{"version":3,"sources":["/home/sai/projects/django-apps/providertool/frontend/javascript/skeleton/src/views/configurable-forms/index.js"],"names":["React","Grid","Button","Step","Stepper","StepLabel","Stack","Typography","ConfigurableForm","MainCard","AnimateButton","gridSpacing","connect","actions","fetchSectionAttributes","ConfigurableForms","uuid","title","sectionData","sectionAttributeGroups","sections","attribute_groups","activeStep","setActiveStep","useState","handleNext","handleBack","processAttributeGroups","steps","stepFields","Object","entries","map","attributeGroupItem","attributeGroupCode","attributeGroup","group_detail","attribute_group_name","push","defaultAttributes","default_attributes","childAttributeGroups","child_attribute_groups","attributeStepsAndGroupData","getStepContent","step","length","pt","pb","label","my","ml","mapStateToProps","state","sectionForm","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\n// material-ui\r\nimport {Grid, Button, Step, Stepper, StepLabel, Stack, Typography} from '@material-ui/core';\r\n\r\n// project imports\r\nimport ConfigurableForm from './ConfigurableForm';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\nimport {gridSpacing} from 'store/constant';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from 'store/actions';\r\nimport {fetchSectionAttributes} from \"store/actions\";\r\n\r\n// ===========================|| FORMS WIZARD - BASIC ||=========================== //\r\n\r\nconst ConfigurableForms = ({uuid, title, sectionData}) => {\r\n    const sectionAttributeGroups = sectionData.sections[uuid].attribute_groups\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n\r\n    const handleNext = () => {\r\n        setActiveStep(activeStep + 1);\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setActiveStep(activeStep - 1);\r\n    };\r\n\r\n    const processAttributeGroups = () => {\r\n        const steps = []\r\n        const stepFields = []\r\n\r\n        Object.entries(sectionAttributeGroups).map(attributeGroupItem => {\r\n            const attributeGroupCode = attributeGroupItem[0]\r\n            const attributeGroup = attributeGroupItem[1]\r\n\r\n            const title = attributeGroup.group_detail.attribute_group_name;\r\n            steps.push(title)\r\n\r\n            stepFields.push({\r\n                defaultAttributes:attributeGroup.default_attributes,\r\n                childAttributeGroups:attributeGroup.child_attribute_groups\r\n            })\r\n            return true;\r\n        })\r\n\r\n        return {steps, stepFields}\r\n    }\r\n    const attributeStepsAndGroupData = processAttributeGroups();\r\n\r\n    // step options\r\n    const {steps, stepFields} = attributeStepsAndGroupData;\r\n\r\n    function getStepContent(step) {\r\n        if(step < steps.length){\r\n            return <ConfigurableForm groupData={stepFields[step]}/>;\r\n        }\r\n        // throw new Error('Unknown step');\r\n        return <div>\r\n            Unknown Step\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={3} >\r\n            <Grid item xs={12} md={10} lg={10}>\r\n                <MainCard title={title}>\r\n                    <Stepper activeStep={activeStep} sx={{pt: 3, pb: 5}}>\r\n                        {steps.map((label) => (\r\n                            <Step key={label}>\r\n                                <StepLabel>{label}</StepLabel>\r\n                            </Step>\r\n                        ))}\r\n                    </Stepper>\r\n                    <>\r\n                        {activeStep === steps.length ? (\r\n                            <>\r\n                                <Typography variant=\"h5\" gutterBottom>\r\n                                    After submission.\r\n                                </Typography>\r\n                                <Stack direction=\"row\" justifyContent=\"flex-end\">\r\n                                    <AnimateButton>\r\n                                        <Button variant=\"contained\" color=\"error\" onClick={() => setActiveStep(0)}\r\n                                                sx={{my: 3, ml: 1}}>\r\n                                            Reset\r\n                                        </Button>\r\n                                    </AnimateButton>\r\n                                </Stack>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                {getStepContent(activeStep)}\r\n                                <Stack direction=\"row\" justifyContent={activeStep !== 0 ? 'space-between' : 'flex-end'}>\r\n                                    {activeStep !== 0 && (\r\n                                        <Button variant=\"contained\" color=\"secondary\" onClick={handleBack} sx={{my: 3, ml: 1}}>\r\n                                            Back\r\n                                        </Button>\r\n                                    )}\r\n                                    <AnimateButton>\r\n                                        <Button variant=\"contained\" onClick={handleNext} sx={{my: 3, ml: 1}}>\r\n                                            {activeStep === steps.length - 1 ? 'Submit' : 'Next'}\r\n                                        </Button>\r\n                                    </AnimateButton>\r\n                                </Stack>\r\n                            </>\r\n                        )}\r\n                    </>\r\n                </MainCard>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    sectionData: state.sectionForm\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfigurableForms)\r\n"]},"metadata":{},"sourceType":"module"}