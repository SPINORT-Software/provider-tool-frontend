{"ast":null,"code":"var _jsxFileName = \"/home/sai/projects/django-apps/providertool/frontend/javascript/skeleton/src/layout/MainLayout/Header/LocalizationSection/index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux'; // material-ui\n\nimport { makeStyles, useTheme } from '@material-ui/styles';\nimport { Avatar, Box, ButtonBase, ClickAwayListener, Grid, List, ListItemText, Paper, Popper, Typography, useMediaQuery } from '@material-ui/core';\nimport ListItemButton from '@material-ui/core/ListItemButton'; // project imports\n\nimport Transitions from 'ui-component/extended/Transitions';\nimport * as actionTypes from 'store/actions'; // assets\n\nimport TranslateTwoToneIcon from '@material-ui/icons/TranslateTwoTone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  navContainer: {\n    width: '100%',\n    minWidth: '200px',\n    maxWidth: '280px',\n    backgroundColor: theme.palette.background.paper,\n    borderRadius: '10px',\n    [theme.breakpoints.down('sm')]: {\n      maxWidth: '250px'\n    }\n  },\n  headerAvatar: { ...theme.typography.commonAvatar,\n    ...theme.typography.mediumAvatar,\n    border: '1px solid',\n    borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light,\n    background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light,\n    color: theme.palette.primary.dark,\n    transition: 'all .2s ease-in-out',\n    '&[aria-controls=\"menu-list-grow\"],&:hover': {\n      borderColor: theme.palette.primary.main,\n      background: theme.palette.primary.main,\n      color: theme.palette.primary.light\n    }\n  },\n  box: {\n    marginLeft: '16px',\n    [theme.breakpoints.down('sm')]: {\n      marginLeft: '8px'\n    }\n  }\n})); // ===========================|| LOCALIZATION ||=========================== //\n\nconst LocalizationSection = () => {\n  _s();\n\n  const classes = useStyles();\n  const customization = useSelector(state => state.customization);\n  const dispatch = useDispatch();\n  const theme = useTheme();\n  const matchesXs = useMediaQuery(theme.breakpoints.down('sm'));\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const [language, setLanguage] = React.useState(customization.locale);\n\n  const handleListItemClick = (event, index) => {\n    setLanguage(index);\n    dispatch({\n      type: actionTypes.THEME_LOCALE,\n      locale: index\n    });\n    setOpen(false);\n  };\n\n  const handleToggle = () => {\n    setOpen(prevOpen => !prevOpen);\n  };\n\n  const handleClose = event => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const prevOpen = React.useRef(open);\n  React.useEffect(() => {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n  React.useEffect(() => {\n    setLanguage(customization.locale);\n  }, [customization]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      component: \"span\",\n      className: classes.box,\n      children: /*#__PURE__*/_jsxDEV(ButtonBase, {\n        sx: {\n          borderRadius: '12px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Avatar, {\n          variant: \"rounded\",\n          className: classes.headerAvatar,\n          ref: anchorRef,\n          \"aria-controls\": open ? 'menu-list-grow' : undefined,\n          \"aria-haspopup\": \"true\",\n          onClick: handleToggle,\n          color: \"inherit\",\n          children: [language !== 'en' && /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h5\",\n            sx: {\n              textTransform: 'uppercase'\n            },\n            color: \"inherit\",\n            children: language\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 29\n          }, this), language === 'en' && /*#__PURE__*/_jsxDEV(TranslateTwoToneIcon, {\n            sx: {\n              fontSize: '1.3rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 47\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Popper, {\n      placement: matchesXs ? 'bottom-start' : 'bottom',\n      open: open,\n      anchorEl: anchorRef.current,\n      role: undefined,\n      transition: true,\n      disablePortal: true,\n      popperOptions: {\n        modifiers: [{\n          name: 'offset',\n          options: {\n            offset: [matchesXs ? 0 : 0, 20]\n          }\n        }]\n      },\n      children: ({\n        TransitionProps\n      }) => /*#__PURE__*/_jsxDEV(Transitions, {\n        position: \"top\",\n        in: open,\n        ...TransitionProps,\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          elevation: 16,\n          children: /*#__PURE__*/_jsxDEV(ClickAwayListener, {\n            onClickAway: handleClose,\n            children: /*#__PURE__*/_jsxDEV(List, {\n              component: \"nav\",\n              className: classes.navContainer,\n              children: [/*#__PURE__*/_jsxDEV(ListItemButton, {\n                selected: language === 'en',\n                onClick: event => handleListItemClick(event, 'en'),\n                children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: /*#__PURE__*/_jsxDEV(Grid, {\n                    container: true,\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      color: \"textPrimary\",\n                      children: \"English\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 154,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"caption\",\n                      color: \"textSecondary\",\n                      sx: {\n                        ml: '8px'\n                      },\n                      children: \"(UK)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 155,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 153,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ListItemButton, {\n                selected: language === 'fr',\n                onClick: event => handleListItemClick(event, 'fr'),\n                children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: /*#__PURE__*/_jsxDEV(Grid, {\n                    container: true,\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      color: \"textPrimary\",\n                      children: \"fran\\xE7ais\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 166,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"caption\",\n                      color: \"textSecondary\",\n                      sx: {\n                        ml: '8px'\n                      },\n                      children: \"(French)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 167,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 165,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ListItemButton, {\n                selected: language === 'ro',\n                onClick: event => handleListItemClick(event, 'ro'),\n                children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: /*#__PURE__*/_jsxDEV(Grid, {\n                    container: true,\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      color: \"textPrimary\",\n                      children: \"Rom\\xE2n\\u0103\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 178,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"caption\",\n                      color: \"textSecondary\",\n                      sx: {\n                        ml: '8px'\n                      },\n                      children: \"(Romanian)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 179,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 177,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(ListItemButton, {\n                selected: language === 'zh',\n                onClick: event => handleListItemClick(event, 'zh'),\n                children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                  primary: /*#__PURE__*/_jsxDEV(Grid, {\n                    container: true,\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      color: \"textPrimary\",\n                      children: \"\\u4E2D\\u56FD\\u4EBA\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 190,\n                      columnNumber: 53\n                    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"caption\",\n                      color: \"textSecondary\",\n                      sx: {\n                        ml: '8px'\n                      },\n                      children: \"(Chinese)\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 191,\n                      columnNumber: 53\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 189,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 187,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(LocalizationSection, \"LqghFkntOjXNo4fr5lrM0RHP0Uo=\", false, function () {\n  return [useStyles, useSelector, useDispatch, useTheme, useMediaQuery];\n});\n\n_c = LocalizationSection;\nexport default LocalizationSection;\n\nvar _c;\n\n$RefreshReg$(_c, \"LocalizationSection\");","map":{"version":3,"sources":["/home/sai/projects/django-apps/providertool/frontend/javascript/skeleton/src/layout/MainLayout/Header/LocalizationSection/index.js"],"names":["React","useDispatch","useSelector","makeStyles","useTheme","Avatar","Box","ButtonBase","ClickAwayListener","Grid","List","ListItemText","Paper","Popper","Typography","useMediaQuery","ListItemButton","Transitions","actionTypes","TranslateTwoToneIcon","useStyles","theme","navContainer","width","minWidth","maxWidth","backgroundColor","palette","background","paper","borderRadius","breakpoints","down","headerAvatar","typography","commonAvatar","mediumAvatar","border","borderColor","mode","dark","main","primary","light","color","transition","box","marginLeft","LocalizationSection","classes","customization","state","dispatch","matchesXs","open","setOpen","useState","anchorRef","useRef","language","setLanguage","locale","handleListItemClick","event","index","type","THEME_LOCALE","handleToggle","prevOpen","handleClose","current","contains","target","useEffect","focus","undefined","textTransform","fontSize","modifiers","name","options","offset","TransitionProps","ml"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n// material-ui\r\nimport { makeStyles, useTheme } from '@material-ui/styles';\r\nimport {\r\n    Avatar,\r\n    Box,\r\n    ButtonBase,\r\n    ClickAwayListener,\r\n    Grid,\r\n    List,\r\n    ListItemText,\r\n    Paper,\r\n    Popper,\r\n    Typography,\r\n    useMediaQuery\r\n} from '@material-ui/core';\r\nimport ListItemButton from '@material-ui/core/ListItemButton';\r\n\r\n// project imports\r\nimport Transitions from 'ui-component/extended/Transitions';\r\nimport * as actionTypes from 'store/actions';\r\n\r\n// assets\r\nimport TranslateTwoToneIcon from '@material-ui/icons/TranslateTwoTone';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    navContainer: {\r\n        width: '100%',\r\n        minWidth: '200px',\r\n        maxWidth: '280px',\r\n        backgroundColor: theme.palette.background.paper,\r\n        borderRadius: '10px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            maxWidth: '250px'\r\n        }\r\n    },\r\n    headerAvatar: {\r\n        ...theme.typography.commonAvatar,\r\n        ...theme.typography.mediumAvatar,\r\n        border: '1px solid',\r\n        borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light,\r\n        background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light,\r\n        color: theme.palette.primary.dark,\r\n        transition: 'all .2s ease-in-out',\r\n        '&[aria-controls=\"menu-list-grow\"],&:hover': {\r\n            borderColor: theme.palette.primary.main,\r\n            background: theme.palette.primary.main,\r\n            color: theme.palette.primary.light\r\n        }\r\n    },\r\n    box: {\r\n        marginLeft: '16px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginLeft: '8px'\r\n        }\r\n    }\r\n}));\r\n\r\n// ===========================|| LOCALIZATION ||=========================== //\r\n\r\nconst LocalizationSection = () => {\r\n    const classes = useStyles();\r\n    const customization = useSelector((state) => state.customization);\r\n    const dispatch = useDispatch();\r\n\r\n    const theme = useTheme();\r\n    const matchesXs = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef(null);\r\n    const [language, setLanguage] = React.useState(customization.locale);\r\n\r\n    const handleListItemClick = (event, index) => {\r\n        setLanguage(index);\r\n        dispatch({ type: actionTypes.THEME_LOCALE, locale: index });\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleClose = (event) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n    };\r\n\r\n    const prevOpen = React.useRef(open);\r\n    React.useEffect(() => {\r\n        if (prevOpen.current === true && open === false) {\r\n            anchorRef.current.focus();\r\n        }\r\n        prevOpen.current = open;\r\n    }, [open]);\r\n\r\n    React.useEffect(() => {\r\n        setLanguage(customization.locale);\r\n    }, [customization]);\r\n\r\n    return (\r\n        <>\r\n            <Box component=\"span\" className={classes.box}>\r\n                <ButtonBase sx={{ borderRadius: '12px' }}>\r\n                    <Avatar\r\n                        variant=\"rounded\"\r\n                        className={classes.headerAvatar}\r\n                        ref={anchorRef}\r\n                        aria-controls={open ? 'menu-list-grow' : undefined}\r\n                        aria-haspopup=\"true\"\r\n                        onClick={handleToggle}\r\n                        color=\"inherit\"\r\n                    >\r\n                        {language !== 'en' && (\r\n                            <Typography variant=\"h5\" sx={{ textTransform: 'uppercase' }} color=\"inherit\">\r\n                                {language}\r\n                            </Typography>\r\n                        )}\r\n                        {language === 'en' && <TranslateTwoToneIcon sx={{ fontSize: '1.3rem' }} />}\r\n                    </Avatar>\r\n                </ButtonBase>\r\n            </Box>\r\n\r\n            <Popper\r\n                placement={matchesXs ? 'bottom-start' : 'bottom'}\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                popperOptions={{\r\n                    modifiers: [\r\n                        {\r\n                            name: 'offset',\r\n                            options: {\r\n                                offset: [matchesXs ? 0 : 0, 20]\r\n                            }\r\n                        }\r\n                    ]\r\n                }}\r\n            >\r\n                {({ TransitionProps }) => (\r\n                    <Transitions position=\"top\" in={open} {...TransitionProps}>\r\n                        <Paper elevation={16}>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <List component=\"nav\" className={classes.navContainer}>\r\n                                    <ListItemButton selected={language === 'en'} onClick={(event) => handleListItemClick(event, 'en')}>\r\n                                        <ListItemText\r\n                                            primary={\r\n                                                <Grid container>\r\n                                                    <Typography color=\"textPrimary\">English</Typography>\r\n                                                    <Typography variant=\"caption\" color=\"textSecondary\" sx={{ ml: '8px' }}>\r\n                                                        (UK)\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            }\r\n                                        />\r\n                                    </ListItemButton>\r\n                                    <ListItemButton selected={language === 'fr'} onClick={(event) => handleListItemClick(event, 'fr')}>\r\n                                        <ListItemText\r\n                                            primary={\r\n                                                <Grid container>\r\n                                                    <Typography color=\"textPrimary\">français</Typography>\r\n                                                    <Typography variant=\"caption\" color=\"textSecondary\" sx={{ ml: '8px' }}>\r\n                                                        (French)\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            }\r\n                                        />\r\n                                    </ListItemButton>\r\n                                    <ListItemButton selected={language === 'ro'} onClick={(event) => handleListItemClick(event, 'ro')}>\r\n                                        <ListItemText\r\n                                            primary={\r\n                                                <Grid container>\r\n                                                    <Typography color=\"textPrimary\">Română</Typography>\r\n                                                    <Typography variant=\"caption\" color=\"textSecondary\" sx={{ ml: '8px' }}>\r\n                                                        (Romanian)\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            }\r\n                                        />\r\n                                    </ListItemButton>\r\n                                    <ListItemButton selected={language === 'zh'} onClick={(event) => handleListItemClick(event, 'zh')}>\r\n                                        <ListItemText\r\n                                            primary={\r\n                                                <Grid container>\r\n                                                    <Typography color=\"textPrimary\">中国人</Typography>\r\n                                                    <Typography variant=\"caption\" color=\"textSecondary\" sx={{ ml: '8px' }}>\r\n                                                        (Chinese)\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            }\r\n                                        />\r\n                                    </ListItemButton>\r\n                                </List>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Transitions>\r\n                )}\r\n            </Popper>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LocalizationSection;\r\n"]},"metadata":{},"sourceType":"module"}