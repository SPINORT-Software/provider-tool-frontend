{"ast":null,"code":"import services from 'utils/mockAdapter'; // third-party\n\nimport jwt from 'jsonwebtoken'; // project imports\n\nimport config from 'config'; // constant\n\nconst JWT_SECRET = config.jwt.secret;\nconst JWT_EXPIRES_TIME = config.jwt.timeout;\n\nconst delay = timeout => new Promise(res => setTimeout(res, timeout));\n\nconst users = [{\n  id: '5e86809283e28b96d2d38537',\n  email: 'info@codedthemes.com',\n  password: '123456'\n}]; // ===========================|| MOCK SERVICES ||=========================== //\n\nservices.onPost('/api/account/login').reply(async request => {\n  try {\n    await delay(500);\n    const {\n      email,\n      password\n    } = JSON.parse(request.data);\n    const user = users.find(_user => _user.email === email);\n\n    if (!user) {\n      return [400, {\n        message: 'Verify Your Email & Password'\n      }];\n    }\n\n    if (user.password !== password) {\n      return [400, {\n        message: 'Invalid Password'\n      }];\n    }\n\n    const serviceToken = jwt.sign({\n      userId: user.id\n    }, JWT_SECRET, {\n      expiresIn: JWT_EXPIRES_TIME\n    });\n    return [200, {\n      serviceToken,\n      user: {\n        id: user.id,\n        email: user.email\n      }\n    }];\n  } catch (err) {\n    console.error(err);\n    return [500, {\n      message: 'Server Error'\n    }];\n  }\n});\nservices.onGet('/api/account/me').reply(request => {\n  try {\n    const {\n      Authorization\n    } = request.headers;\n\n    if (!Authorization) {\n      return [401, {\n        message: 'Token Missing'\n      }];\n    }\n\n    const serviceToken = Authorization.split(' ')[1];\n    const {\n      userId\n    } = jwt.verify(serviceToken, JWT_SECRET);\n    const user = users.find(_user => _user.id === userId);\n\n    if (!user) {\n      return [401, {\n        message: 'Invalid Token'\n      }];\n    }\n\n    return [200, {\n      user: {\n        id: user.id,\n        email: user.email\n      }\n    }];\n  } catch (err) {\n    return [500, {\n      message: 'Server Error'\n    }];\n  }\n});","map":{"version":3,"sources":["/home/sai/projects/django-apps/providertool/frontend/javascript/skeleton/src/_mockApis/account.js"],"names":["services","jwt","config","JWT_SECRET","secret","JWT_EXPIRES_TIME","timeout","delay","Promise","res","setTimeout","users","id","email","password","onPost","reply","request","JSON","parse","data","user","find","_user","message","serviceToken","sign","userId","expiresIn","err","console","error","onGet","Authorization","headers","split","verify"],"mappings":"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","sourcesContent":["import services from 'utils/mockAdapter';\r\n\r\n// third-party\r\nimport jwt from 'jsonwebtoken';\r\n\r\n// project imports\r\nimport config from 'config';\r\n\r\n// constant\r\nconst JWT_SECRET = config.jwt.secret;\r\nconst JWT_EXPIRES_TIME = config.jwt.timeout;\r\n\r\nconst delay = (timeout) => new Promise((res) => setTimeout(res, timeout));\r\n\r\nconst users = [\r\n    {\r\n        id: '5e86809283e28b96d2d38537',\r\n        email: 'info@codedthemes.com',\r\n        password: '123456'\r\n    }\r\n];\r\n\r\n// ===========================|| MOCK SERVICES ||=========================== //\r\n\r\nservices.onPost('/api/account/login').reply(async (request) => {\r\n    try {\r\n        await delay(500);\r\n\r\n        const { email, password } = JSON.parse(request.data);\r\n        const user = users.find((_user) => _user.email === email);\r\n\r\n        if (!user) {\r\n            return [400, { message: 'Verify Your Email & Password' }];\r\n        }\r\n\r\n        if (user.password !== password) {\r\n            return [400, { message: 'Invalid Password' }];\r\n        }\r\n\r\n        const serviceToken = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: JWT_EXPIRES_TIME });\r\n\r\n        return [\r\n            200,\r\n            {\r\n                serviceToken,\r\n                user: {\r\n                    id: user.id,\r\n                    email: user.email\r\n                }\r\n            }\r\n        ];\r\n    } catch (err) {\r\n        console.error(err);\r\n        return [500, { message: 'Server Error' }];\r\n    }\r\n});\r\n\r\nservices.onGet('/api/account/me').reply((request) => {\r\n    try {\r\n        const { Authorization } = request.headers;\r\n\r\n        if (!Authorization) {\r\n            return [401, { message: 'Token Missing' }];\r\n        }\r\n\r\n        const serviceToken = Authorization.split(' ')[1];\r\n        const { userId } = jwt.verify(serviceToken, JWT_SECRET);\r\n        const user = users.find((_user) => _user.id === userId);\r\n\r\n        if (!user) {\r\n            return [401, { message: 'Invalid Token' }];\r\n        }\r\n\r\n        return [\r\n            200,\r\n            {\r\n                user: {\r\n                    id: user.id,\r\n                    email: user.email\r\n                }\r\n            }\r\n        ];\r\n    } catch (err) {\r\n        return [500, { message: 'Server Error' }];\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}